/*  Metrowerks Standard Library  *//*  $Date: 2000/06/09 19:24:46 $  *  $Revision: 1.9.8.12 $  *  $NoKeywords: $  * *		Portions Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//** **  ios **/#ifndef _IOS#define _IOS#include <mslconfig>#ifndef _MSL_NO_IO#include <cstdlib>#include <iosfwd>#include <exception>#include <MSLstring.h>#include <utility>#include <algorithm>#include <string>#ifndef _MSL_NO_LOCALE	#include <locale>#endif#ifndef RC_INVOKED#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#if _MSL_FORCE_ENUMS_ALWAYS_INT		#pragma enumsalwaysint on	#else		#pragma enumsalwaysint off	#endif#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT		#pragma bool on	#else		#pragma bool off	#endif#endif#ifndef _MSL_NO_CPP_NAMESPACE	namespace std {#endif// typedef  OFF_T   streamoff;  in <iosfwd> so that <string> can see ittypedef long streamsize;// fpostemplate <class stateT>class fpos{public:	fpos(streamoff o);	operator streamoff() const;	fpos& operator += (streamoff o);	fpos& operator -= (streamoff o);	fpos operator + (streamoff o) const;	fpos operator - (streamoff o) const;	// _lib.fpos.members_ Members	stateT state() const;	void state(stateT s);private:	streamoff offset_;	stateT st_;};template <class stateT>inlinefpos<stateT>::fpos(streamoff o)	: offset_(o),	  st_(stateT()){}template <class stateT>inlinefpos<stateT>::operator streamoff() const{	return offset_;}template <class stateT>inlinefpos<stateT>&fpos<stateT>::operator += (streamoff o){	offset_ += o;	return *this;}template <class stateT>inlinefpos<stateT>&fpos<stateT>::operator -= (streamoff o){	offset_ -= o;	return *this;}template <class stateT>inlinefpos<stateT>fpos<stateT>::operator + (streamoff o) const{	return fpos<stateT>(offset_ + o);}template <class stateT>inlinefpos<stateT>fpos<stateT>::operator - (streamoff o) const{	return fpos<stateT>(offset_ - o);}template <class stateT>inlinestateTfpos<stateT>::state() const{	return st_;}template <class stateT>inlinevoidfpos<stateT>::state(stateT s){	st_ = s;}template <class stateT>inlinestreamoffoperator - (const fpos<stateT>& lhs, const fpos<stateT>& rhs){	return streamoff(lhs) - streamoff(rhs);}// ios_baseclass _MSL_IMP_EXP_CPP ios_base{public:	class failure;	enum fmtflags	{		boolalpha   = 1 <<  0,		dec         = 1 <<  1,		fixed       = 1 <<  2,		hex         = 1 <<  3,		internal    = 1 <<  4,		left        = 1 <<  5,		oct         = 1 <<  6,		right       = 1 <<  7,		scientific  = 1 <<  8,		showbase    = 1 <<  9,		showpoint   = 1 << 10,		showpos     = 1 << 11,		skipws      = 1 << 12,		unitbuf     = 1 << 13,		uppercase   = 1 << 14,		adjustfield = left | right | internal,		basefield   = dec | oct | hex,		floatfield  = scientific | fixed	};	enum iostate	{		goodbit = 0,		badbit  = 1 <<  0,		eofbit  = 1 <<  1,		failbit = 1 <<  2	};	enum openmode	{		app    = 1 <<  0,		ate    = 1 <<  1,		binary = 1 <<  2,		in     = 1 <<  3,		out    = 1 <<  4,		trunc  = 1 <<  5	};	enum seekdir	{		beg = 1 << 0,		cur = 1 << 1,		end = 1 << 2	};	class Init;	//  lib.fmtflags.state fmtflags state:	fmtflags flags() const;	fmtflags flags(fmtflags fmtfl);	fmtflags setf(fmtflags fmtfl);	fmtflags setf(fmtflags fmtfl, fmtflags mask);	void unsetf(fmtflags mask);	streamsize precision() const;	streamsize precision(streamsize prec);	streamsize width() const;	streamsize width(streamsize wide);	void* rdbuf() const;	void* rdbuf(void* sb);	bool good() const;	bool eof()  const;	bool fail() const;	bool bad()  const;	iostate exceptions() const;	void exceptions(iostate except);	operator void*() const;	bool operator!() const;	iostate rdstate() const;	void clear(iostate state = goodbit);	void setstate(iostate state);#ifndef _MSL_NO_LOCALE	//  lib.ios.base.locales locales:	locale imbue(const locale& loc);	locale getloc() const;#endif	//  lib.ios.base.storage storage:	static int xalloc();	long&  iword(int index);	void*& pword(int index);	// copy and assginment	ios_base(const ios_base& rhs);	ios_base& operator=(const ios_base& rhs);	//  destructor	virtual ~ios_base();	//  lib.ios.base.callback callbacks;	enum event { erase_event, imbue_event, copyfmt_event };	typedef void (*event_callback)(event, ios_base&, int index);	void register_callback(event_callback fn, int index);	static bool sync_with_stdio(bool sync = true);protected:	ios_base();	void init(void* sb);	iostate& state();	void do_callbacks(event evnt);private:	typedef pair<event_callback, int> event_data;		static int index_;	event_data* cb_vec_;	size_t cb_siz_;	size_t cb_cap_;	long* iarray_;	size_t isize_;	void** parray_;	size_t psize_;#ifndef _MSL_NO_LOCALE	locale* loc_;#endif	void* rdbuf_;	streamsize precision_;	streamsize width_;	fmtflags fmtflags_;	iostate iostate_;	iostate exceptions_;	void copy_ios_base(const ios_base& rhs);};// failureclass ios_base::failure	: public exception{public:	explicit failure(const char* msg);	explicit failure(const string& msg);	virtual const char* what() const _MSL_THROW;private:	_MSLstring what_;};inlineios_base::failure::failure(const char* msg)	: what_(msg){}inlineios_base::failure::failure(const string& msg)	: what_(msg){}inlineconst char*ios_base::failure::what() const _MSL_THROW{	return what_.c_str();}// Init - implemented in iostream.cppclass _MSL_IMP_EXP_CPP ios_base::Init{public:	Init();	~Init();private:	static int init_cnt_s;};// fmtflagsinlineios_base::fmtflagsoperator & (ios_base::fmtflags x, ios_base::fmtflags y){	return static_cast<ios_base::fmtflags>(static_cast<int>(x) & static_cast<int>(y));}inlineios_base::fmtflagsoperator | (ios_base::fmtflags x, ios_base::fmtflags y){	return static_cast<ios_base::fmtflags>(static_cast<int>(x) | static_cast<int>(y));}inlineios_base::fmtflagsoperator ^ (ios_base::fmtflags x, ios_base::fmtflags y){	return static_cast<ios_base::fmtflags>(static_cast<int>(x) ^ static_cast<int>(y));}inlineios_base::fmtflagsoperator ~ (ios_base::fmtflags x){	return static_cast<ios_base::fmtflags>(~static_cast<int>(x));}inlineios_base::fmtflags&operator &= (ios_base::fmtflags& x, ios_base::fmtflags y){	return x = x & y;}inlineios_base::fmtflags&operator |= (ios_base::fmtflags& x, ios_base::fmtflags y){	return x = x | y;}inlineios_base::fmtflags&operator ^= (ios_base::fmtflags& x, ios_base::fmtflags y){	return x = x ^ y;}// iostateinlineios_base::iostateoperator & (ios_base::iostate x, ios_base::iostate y){	return static_cast<ios_base::iostate>(static_cast<int>(x) & static_cast<int>(y));}inlineios_base::iostateoperator | (ios_base::iostate x, ios_base::iostate y){	return static_cast<ios_base::iostate>(static_cast<int>(x) | static_cast<int>(y));}inlineios_base::iostateoperator ^ (ios_base::iostate x, ios_base::iostate y){	return static_cast<ios_base::iostate>(static_cast<int>(x) ^ static_cast<int>(y));}inlineios_base::iostateoperator ~ (ios_base::iostate x){	return static_cast<ios_base::iostate>(~static_cast<int>(x));}inlineios_base::iostate&operator &= (ios_base::iostate& x, ios_base::iostate y){	return x = x & y;}inlineios_base::iostate&operator |= (ios_base::iostate& x, ios_base::iostate y){	return x = x | y;}inlineios_base::iostate&operator ^= (ios_base::iostate& x, ios_base::iostate y){	return x = x ^ y;}// openmodeinlineios_base::openmodeoperator & (ios_base::openmode x, ios_base::openmode y){	return static_cast<ios_base::openmode>(static_cast<int>(x) & static_cast<int>(y));}inlineios_base::openmodeoperator | (ios_base::openmode x, ios_base::openmode y){	return static_cast<ios_base::openmode>(static_cast<int>(x) | static_cast<int>(y));}inlineios_base::openmodeoperator ^ (ios_base::openmode x, ios_base::openmode y){	return static_cast<ios_base::openmode>(static_cast<int>(x) ^ static_cast<int>(y));}inlineios_base::openmodeoperator ~ (ios_base::openmode x){	return static_cast<ios_base::openmode>(~static_cast<int>(x));}inlineios_base::openmode&operator &= (ios_base::openmode& x, ios_base::openmode y){	return x = x & y;}inlineios_base::openmode&operator |= (ios_base::openmode& x, ios_base::openmode y){	return x = x | y;}inlineios_base::openmode&operator ^= (ios_base::openmode& x, ios_base::openmode y){	return x = x ^ y;}// ios_base inline Implementationinlineios_base::fmtflagsios_base::flags() const{	return fmtflags_;}inlineios_base::fmtflagsios_base::flags(fmtflags fmtfl){	fmtflags result = fmtflags_;	fmtflags_ = fmtfl;	return result;}inlineios_base::fmtflagsios_base::setf(fmtflags fmtfl){	fmtflags result = fmtflags_;	fmtflags_ |= fmtfl;	return result;}inlineios_base::fmtflagsios_base::setf(fmtflags fmtfl, fmtflags mask){	fmtflags result = fmtflags_;	fmtflags_ &= ~mask;	fmtflags_ |= fmtfl & mask;	return result;}inlinevoidios_base::unsetf(fmtflags mask){	fmtflags_ &= ~mask;}inlinestreamsizeios_base::precision() const{	return precision_;}inlinestreamsizeios_base::precision(streamsize prec){	streamsize result = precision_;	precision_ = prec;	return result;}inlinestreamsizeios_base::width() const{	return width_;}inlinestreamsizeios_base::width(streamsize wide){	streamsize result = width_;	width_ = wide;	return result;}inlinevoid*ios_base::rdbuf() const{	return rdbuf_;}inlinevoidios_base::clear(iostate state){	iostate_ = state;	if (rdbuf_ == 0)		iostate_ |= badbit;	if (iostate_ & exceptions_)	#ifndef _MSL_NO_EXCEPTIONS		throw failure("ios_base failure in clear");	#else		__msl_error("ios_base failure in clear\n");	#endif}inlinevoid*ios_base::rdbuf(void* sb){	void* result = rdbuf_;	rdbuf_ = sb;	clear();	return result;}inlineboolios_base::good() const{	return static_cast<bool>(iostate_ == goodbit);}inlineboolios_base::eof() const{	return static_cast<bool>(iostate_ & eofbit);}inlineboolios_base::fail() const{	return static_cast<bool>(iostate_ & (failbit | badbit));}inlineboolios_base::bad() const{	return static_cast<bool>(iostate_ & badbit);}inlineios_base::iostateios_base::exceptions() const{	return exceptions_;}inlinevoidios_base::exceptions(iostate except){	exceptions_ = except;	if (rdbuf_ == 0)		iostate_ |= badbit;	if (iostate_ & exceptions_)	#ifndef _MSL_NO_EXCEPTIONS		throw failure("ios_base failure in exceptions");	#else		__msl_error("ios_base failure in exceptions\n");	#endif}inlineios_base::operator void*() const{	return fail() ? 0 : rdbuf_;}inlineboolios_base::operator!() const{	return fail();}inlineios_base::iostateios_base::rdstate() const{	return iostate_;}inlinevoidios_base::setstate(iostate state){	clear(rdstate() | state);}#ifndef _MSL_NO_LOCALE	inline	locale	ios_base::getloc() const	{		return *loc_;	}#endifinlineintios_base::xalloc(){	return index_++;}inlineios_base::ios_base(const ios_base& rhs)	: cb_vec_(0),	  cb_cap_(0),	  iarray_(0),	  isize_(0),	  parray_(0),	  psize_(0),#ifndef _MSL_NO_LOCALE	  loc_(0),#endif	  rdbuf_(0){	copy_ios_base(rhs);}inlineios_base&ios_base::operator=(const ios_base& rhs){	if (this != &rhs)		copy_ios_base(rhs);	return *this;}inlineios_base::ios_base(){}inlineios_base::iostate&ios_base::state(){	return iostate_;}inlinevoidios_base::do_callbacks(event evnt){	for (size_t i = cb_siz_; i > 0;)	{		event_data& ev = cb_vec_[--i];		ev.first(evnt, *this, ev.second);	}}// basic_iostemplate <class charT, class traits>class basic_ios	: public ios_base{public:	//  Types:	typedef charT                     char_type;	typedef typename traits::int_type int_type;	typedef typename traits::pos_type pos_type;	typedef typename traits::off_type off_type;	typedef traits                    traits_type;	//  lib.basic.ios.cons Constructor/destructor:	explicit basic_ios(basic_streambuf<charT, traits>* sb);	//  lib.basic.ios.members Members:	basic_ostream<charT, traits>* tie() const;	basic_ostream<charT, traits>* tie(basic_ostream<charT, traits>* tiestr);	basic_streambuf<charT, traits>* rdbuf() const;	basic_streambuf<charT, traits>* rdbuf(basic_streambuf<charT, traits>* sb);	basic_ios& copyfmt(const basic_ios& rhs);	char_type fill() const;	char_type fill(char_type ch);#ifndef _MSL_NO_LOCALE	//  lib.ios.base.locales locales:	locale imbue(const locale& loc);#endif	char     narrow(char_type c, char dfault) const;	char_type widen(char c) const;#ifdef _MSL_NO_LOCALE	basic_string<charT, traits> widen(const string& s) const;#endifprotected:	basic_ios();	void init(basic_streambuf<charT, traits>* sb);private:	basic_ostream<charT, traits>* tiestr_;	char_type fill_;	basic_ios(const basic_ios& );              //  not defined	basic_ios& operator=(const basic_ios&);    //  not defined};// basic_ios Implementationtemplate <class charT, class traits>inlinebasic_ios<charT, traits>::basic_ios(basic_streambuf<charT, traits>* sb){	init(sb);}template <class charT, class traits>inlinebasic_ios<charT, traits>::basic_ios(){}template <class charT, class traits>inlinebasic_ostream<charT, traits>*basic_ios<charT, traits>::tie() const{	return tiestr_;}template <class charT, class traits>inlinebasic_ostream<charT, traits>*basic_ios<charT, traits>::tie(basic_ostream<charT, traits>* tiestr){	basic_ostream<charT, traits>* result = tiestr_;	tiestr_ = tiestr;	return result;}template <class charT, class traits>inlinebasic_streambuf<charT, traits>*basic_ios<charT, traits>::rdbuf() const{	return static_cast<basic_streambuf<charT, traits>*>(ios_base::rdbuf());}template <class charT, class traits>inlinebasic_streambuf<charT, traits>*basic_ios<charT, traits>::rdbuf(basic_streambuf<charT, traits>* sb){	return static_cast<basic_streambuf<charT, traits>*>(ios_base::rdbuf(sb));}template <class charT, class traits>basic_ios<charT, traits>&basic_ios<charT, traits>::copyfmt(const basic_ios& rhs){	do_callbacks(erase_event);	ios_base::operator = (rhs);//	tiestr_ = rhs.tiestr_;  // ???	fill_ = rhs.fill_;	do_callbacks(copyfmt_event);	exceptions(rhs.exceptions());	return *this;}template <class charT, class traits>inlinetypename basic_ios<charT, traits>::char_typebasic_ios<charT, traits>::fill() const{	return fill_;}template <class charT, class traits>inlinetypename basic_ios<charT, traits>::char_typebasic_ios<charT, traits>::fill(char_type ch){	char_type result = fill_;	fill_ = ch;	return result;}#ifndef _MSL_NO_LOCALE	template <class charT, class traits>	inline	locale	basic_ios<charT, traits>::imbue(const locale& loc)	{		locale result = ios_base::imbue(loc);		if (rdbuf())			rdbuf()->pubimbue(loc);		return result;	}	template <class charT, class traits>	inline	char	basic_ios<charT, traits>::narrow(char_type c, char dfault) const	{		return _USE_FACET(ctype<char_type>, getloc()).narrow(c, dfault);	}	template <class charT, class traits>	inline	typename basic_ios<charT, traits>::char_type	basic_ios<charT, traits>::widen(char c) const	{		return _USE_FACET(ctype<char_type>, getloc()).widen(c);	}#else  // _MSL_NO_LOCALE	template <class charT, class traits>	inline	char	basic_ios<charT, traits>::narrow(char_type c, char) const	{		return char(c);	}	template <class charT, class traits>	inline	typename basic_ios<charT, traits>::char_type	basic_ios<charT, traits>::widen(char c) const	{		return char_type(c);	}	template <class charT, class traits>	basic_string<charT, traits>	basic_ios<charT, traits>::widen(const string& s) const	{		return basic_string<charT, traits>(s.begin(), s.end());	}#endif  // _MSL_NO_LOCALEtemplate <class charT, class traits>inlinevoidbasic_ios<charT, traits>::init(basic_streambuf<charT, traits>* sb){	ios_base::init(sb);	tiestr_ = 0;	fill_ = widen(' ');}//  lib.std.ios.manip, manipulators:inlineios_base&boolalpha(ios_base& str){	str.setf(ios_base::boolalpha);	return str;}inlineios_base&noboolalpha(ios_base& str){	str.unsetf(ios_base::boolalpha);	return str;}inlineios_base&showbase(ios_base& str){	str.setf(ios_base::showbase);	return str;}inlineios_base&noshowbase(ios_base& str){	str.unsetf(ios_base::showbase);	return str;}inlineios_base&showpoint(ios_base& str){	str.setf(ios_base::showpoint);	return str;}inlineios_base&noshowpoint(ios_base& str){	str.unsetf(ios_base::showpoint);	return str;}inlineios_base&showpos(ios_base& str){	str.setf(ios_base::showpos);	return str;}inlineios_base&noshowpos(ios_base& str){	str.unsetf(ios_base::showpos);	return str;}inlineios_base&skipws(ios_base& str){	str.setf(ios_base::skipws);	return str;}inlineios_base&noskipws(ios_base& str){	str.unsetf(ios_base::skipws);	return str;}inlineios_base&uppercase(ios_base& str){	str.setf(ios_base::uppercase);	return str;}inlineios_base&nouppercase(ios_base& str){	str.unsetf(ios_base::uppercase);	return str;}inlineios_base&unitbuf(ios_base& str){	str.setf(ios_base::unitbuf);	return str;}inlineios_base&nounitbuf(ios_base& str){	str.unsetf(ios_base::unitbuf);	return str;}//  lib.adjustfield.manip adjustfield:inlineios_base&internal(ios_base& str){	str.setf(ios_base::internal, ios_base::adjustfield);	return str;}inlineios_base&left(ios_base& str){	str.setf(ios_base::left, ios_base::adjustfield);	return str;}inlineios_base&right(ios_base& str){	str.setf(ios_base::right, ios_base::adjustfield);	return str;}//  lib.basefield.manip basefield:inlineios_base&dec(ios_base& str){	str.setf(ios_base::dec, ios_base::basefield);	return str;}inlineios_base&hex(ios_base& str){	str.setf(ios_base::hex, ios_base::basefield);	return str;}inlineios_base&oct(ios_base& str){	str.setf(ios_base::oct, ios_base::basefield);	return str;}//  lib.floatfield.manip floatfield:inlineios_base&fixed(ios_base& str){	str.setf(ios_base::fixed, ios_base::floatfield);	return str;}inlineios_base&scientific(ios_base& str){	str.setf(ios_base::scientific, ios_base::floatfield);	return str;}// Auxillary helper class to that saves and restores ios_base::fmtflags on the stackclass _SaveFlags{public:	_SaveFlags(ios_base& str);	~_SaveFlags();private:	ios_base& str_;	ios_base::fmtflags flags_;	_SaveFlags(const _SaveFlags&);              // Not defined	_SaveFlags& operator= (const _SaveFlags&);  // Not defined};inline_SaveFlags::_SaveFlags(ios_base& str)	: str_(str),	  flags_(str_.flags()){}inline_SaveFlags::~_SaveFlags(){	str_.flags(flags_);}#ifndef _MSL_NO_CPP_NAMESPACE	} // namespace std#endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#pragma enumsalwaysint reset#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#pragma bool reset#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif // RC_INVOKED#ifdef _MSL_NO_LOCALE	#include <locale>#endif#endif // _MSL_NO_IO#endif // _IOS// hh 971220 fixed MOD_INCLUDE// hh 971222 added wrapper for alignment// hh 971222 Changed filename from ios.h to ios// hh 971222 Made include guards standard// hh 971230 added RC_INVOKED wrapper// hh 980202 moved streamoff from <iosfwd> per standard// hh 980909 fpos added// hh 981111 made throwfailure() public// hh 981220 Added typename to appropriate return types// hh 981226 Added mutex accessor to help encapsulate future changes// hh 990524 Rewrote// hh 000130 Installed _MSL_NO_LOCALE// hh 000130 Installed _MSL_IMP_EXP_CPP// hh 000604 Rewrote sync_with_stdio
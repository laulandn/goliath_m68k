/*  Metrowerks Standard Library  *//*  $Date: 2000/06/09 19:24:07 $  *  $Revision: 1.8.8.5 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//************************************************************************//*	Project...:	Standard C++ Library									*//*	Name......:	exception												*//*	Purpose...:	exception handling										*//************************************************************************/#ifndef _EXCEPTION#define _EXCEPTION#include <mslconfig>#ifndef RC_INVOKED // hh 971230#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#if _MSL_FORCE_ENUMS_ALWAYS_INT		#pragma enumsalwaysint on	#else		#pragma enumsalwaysint off	#endif#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT		#pragma bool on	#else		#pragma bool off	#endif#endif#ifndef _MSL_NO_CPP_NAMESPACE           // hh 971206 moved this up in the file	namespace std {#endif	// hh 971226	// Removed string and bool from this class.  This data is moved into	// derived classes if and when needed.	class exception {       // hh 971226 moved from mexcept.h	public :	    exception () _MSL_THROW {}	    exception (const exception&) _MSL_THROW {}	    exception& operator= (const exception&) _MSL_THROW {return *this;}	    virtual ~exception () _MSL_THROW {}	    virtual const char* what () const _MSL_THROW {return "exception";}	};	class bad_exception : public exception {	public:		bad_exception() _MSL_THROW {}		bad_exception(const bad_exception&) _MSL_THROW {}		bad_exception& operator=(const bad_exception&) _MSL_THROW { return *this; }		virtual ~bad_exception() _MSL_THROW {};		virtual const char* what() const _MSL_THROW { return "bad_exception"; };	};	typedef void (*unexpected_handler)();	_MSL_IMP_EXP_RUNTIME unexpected_handler set_unexpected(unexpected_handler f) _MSL_THROW;	_MSL_IMP_EXP_RUNTIME void unexpected();#ifdef __MC68K__	#ifndef _MSL_MULTITHREAD		_MSL_IMP_EXP_RUNTIME bool __quick_uncaught_exception();	#else		_MSL_IMP_EXP_RUNTIME bool __uncaught_exception();	#endif		inline		bool		uncaught_exception()		{		#ifndef _MSL_MULTITHREAD			return __quick_uncaught_exception();		#else			return __uncaught_exception();		#endif		}#endif // __MC68K__	typedef void (*terminate_handler)();	_MSL_IMP_EXP_RUNTIME terminate_handler set_terminate(terminate_handler f) _MSL_THROW;	_MSL_IMP_EXP_RUNTIME void terminate();#ifndef _MSL_NO_CPP_NAMESPACE	}#endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#pragma enumsalwaysint reset#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#pragma bool reset#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif // RC_INVOKED#endif/*     Change record960828 bkoz try a forward declaration to cut the exception->string dependencies960828 bkoz add exception::exception(const char*) ctor for string literals961210 bkoz added wrapper for alignment961217 KO	Changed char_traits from a struct to a class. Needed for the new x86			compiler.970211 bkoz	line 73 added bad_exception::what from stdexcept.cp970408 bkoz	line 22, include bstring, inlined exception classhh 971206   Moved #ifdef MSIPL_USING_NAMESPACE around// hh 971226 moved exception from mexcept.h// hh 971226 cleaned up & checked against standard// hh 971226 Removed string and bool from this class.  This data is moved into//           derived classes if and when needed.// hh 971230 added RC_INVOKED wrapper// hh 970102 __priv_throwbadcast no longer needed// hh 990120 changed name of MSIPL flags*/
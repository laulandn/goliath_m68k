/************************************************************Created: Thursday, February 8, 1996 at 2:30:00 PM    somdts.h	    C++ Interface to SOM	Macintosh Version        © Apple Computer, Inc. 1995-1996        All rights reserved************************************************************/#ifndef	__SOMDTS__#define	__SOMDTS__#ifndef	IN#define	IN#endif#ifndef	OUT#define	OUT#endif#ifndef	INOUT#define	INOUT#endif#if !_WINDOWS && !defined __CONDITIONALMACROS__#include <ConditionalMacros.h>#endif#if PRAGMA_STRUCT_ALIGN			// RA/1/7/99 used to be PRAGMA_ALIGN_SUPPORTED#  pragma options align=power#endif#if PRAGMA_IMPORT_SUPPORTED#pragma import on#endiftypedef unsigned char boolean;struct Environment;/* CORBA 4.13, p. 80 */enum { NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION };typedef long exception_type;#if __SOM_ENABLED__#ifdef	__cplusplusextern "C" #endif	void somExceptionFree  ( Environment *ev );#endifstruct Environment {	exception_type	_major;	struct {		char		*_exception_name;		void		*_params;    } exception;    void			*_somdAnchor;};#ifdef	__cplusplusstruct AutoInitEnvironment : public Environment {	AutoInitEnvironment ()	{ 		_major = NO_EXCEPTION;		exception._exception_name = 0;		exception._params = 0;		_somdAnchor = 0;	}#if __SOM_ENABLED__	~AutoInitEnvironment ()	{		somExceptionFree ( this );	}#endif};#endif#ifndef	__cplusplustypedef struct Environment Environment;#endiftypedef Environment __Environment; // reserved name for MrCpp use#if __SOM_ENABLED__//	needed by dynamic interfacestypedef void *somId;typedef void *somKernelId;typedef void *somDToken;typedef void *somMToken;typedef struct somMethodData somMethodData, *somMethodDataPtr;struct somMethodData {	long stuff [6];};class SOMObject;extern "C" {	somId somIdFromString (char *aString);	char *somMakeStringFromId (somId id);	int somCompareIds (somId id1, somId id2);	somId somConvertAndFreeKernelId (somKernelId id);	void somFreeKernelId (somKernelId id);	typedef void *somMethodProc (void *somSelf);	typedef somMethodProc *somMethodPtr;	void *somNewObjectInstance(void *tokenTable, long majorVersion, long minorVersion);	SOMObject *somReleaseObjectReference(SOMObject *obj);	void *somParentNumResolve(void *ref, int parentNum, void *mToken);		#if __MRC__ || __SC__ >= 0x0811 || __MWERKS__ >= 0x1000	void *_som_new(void *tokenTable, long majorVersion, long minorVersion);	void __som_check_ev(Environment *);	void __som_check_new(SOMObject *);	#endif}#if __MRC__ || __SC__ >= 0x0811struct __SOMAuto {    SOMObject *fObj;    __SOMAuto (void *tokenTable, long major, long minor)      { fObj = somNewObjectInstance(tokenTable, major, minor); }    ~__SOMAuto() { somReleaseObjectReference(fObj); }};#endif /* __MRC__ || __SC__ >= 0x0811 */#endif /* __SOM_ENABLED__ */#if PRAGMA_IMPORT_SUPPORTED#pragma import off#endif#if PRAGMA_STRUCT_ALIGN			// RA/1/7/99 used to be PRAGMA_ALIGN_SUPPORTED#  pragma options align=reset#endif#endif /* __SOMDTS__ */
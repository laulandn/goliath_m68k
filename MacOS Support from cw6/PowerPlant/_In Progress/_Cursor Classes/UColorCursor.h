// ===========================================================================//	UColorCursor.h				PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub#ifndef _H_UColorCursor#define _H_UColorCursor#pragma once#include <PP_Prefix.h>#include <Quickdraw.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantclass LStream;// ===========================================================================#pragma mark === UColorCursor ===class UColorCursor {public:	static	void			SetTheCursor( ResIDT inCursID );	static	ResIDT			GetCurrentID();	static	void			SetCurrentID( const ResIDT inCurrentID );protected:	static	CCrsrHandle		sColorCursorH;	static	ResIDT			sCurrentColorID;private:			// defensive programming							UColorCursor();							UColorCursor( const UColorCursor &inOriginal );							UColorCursor( LStream *inStream );			virtual			~UColorCursor();			UColorCursor	operator=(const UColorCursor &inOriginal);};// ----- UColorCursor inline functions -----// ---------------------------------------------------------------------------//	¥ GetCurrentID						[static, public]// ---------------------------------------------------------------------------//	Return the ResIDT for the 'crsr' of the current cursorinlineResIDTUColorCursor::GetCurrentID(){	return sCurrentColorID;}// ---------------------------------------------------------------------------//	¥ SetCurrentID						[static, public]// ---------------------------------------------------------------------------//	Set the 'crsr' ResIDT to the given value. Does NOT set the cursor//	to the given ID.inlinevoidUColorCursor::SetCurrentID(	const ResIDT inCurrentID ){	sCurrentColorID = inCurrentID;}// ===========================================================================#pragma mark === StColorCursor ===class StColorCursor {public:							StColorCursor(								ResIDT		inCursID,								Boolean		inRestoreOriginal = true );			virtual			~StColorCursor();protected:			ResIDT			mRestoreID;private:		// defensive programming							StColorCursor();							StColorCursor( const StColorCursor &inOriginal );							StColorCursor( LStream *inStream );			StColorCursor&	operator=(const StColorCursor &inOriginal );};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif /* _H_UColorCursor */
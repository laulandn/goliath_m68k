/* =========================================================================== *	SSLDistinguishedName.cpp	    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2002  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com */#ifndef __SSLDistinguishedName_h__#include "SSLDistinguishedName.h"#endif#include <vector>SSLDistinguishedName::SSLDistinguishedName(X509_NAME *name) {	unsigned long vecSize = 256;	std::vector<char> tempSpace(vecSize);    int ret;    ret = X509_NAME_get_text_by_NID(name, NID_countryName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mCountry.assign(&tempSpace[0]);    ret = X509_NAME_get_text_by_NID(name, NID_stateOrProvinceName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mState.assign(&tempSpace[0]);    ret = X509_NAME_get_text_by_NID(name, NID_localityName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mLocality.assign(&tempSpace[0]);    ret = X509_NAME_get_text_by_NID(name, NID_organizationName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mOrgName.assign(&tempSpace[0]);    ret = X509_NAME_get_text_by_NID(name, NID_organizationalUnitName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mOrgUnit.assign(&tempSpace[0]);    ret = X509_NAME_get_text_by_NID(name, NID_commonName, &tempSpace[0], (int)vecSize);    if (1 <= ret)    	mCommonName.assign(&tempSpace[0]);}SSLDistinguishedName::SSLDistinguishedName(const SSLDistinguishedName& rhs) {	mCountry = rhs.mCountry;	mState = rhs.mState;	mLocality = rhs.mLocality;	mOrgUnit = rhs.mOrgUnit;	mOrgName = rhs.mOrgName;	mCommonName = rhs.mCommonName;}int SSLDistinguishedName::compare(const SSLDistinguishedName& rhs) const {	std::vector<int> tmp;		tmp.push_back(mCountry.compare(rhs.mCountry));	tmp.push_back(mState.compare(rhs.mState));	tmp.push_back(mLocality.compare(rhs.mLocality));	tmp.push_back(mOrgName.compare(rhs.mOrgName));	tmp.push_back(mOrgUnit.compare(rhs.mOrgUnit));	tmp.push_back(mCommonName.compare(rhs.mCommonName));	for (std::vector<int>::iterator iter = tmp.begin(); iter != tmp.end(); ++iter) {		if (*iter != 0)			return *iter;	}	return 0;}bool operator == (const SSLDistinguishedName& a, const SSLDistinguishedName& b) {	return (a.compare(b) == 0);}bool operator < (const SSLDistinguishedName& a, const SSLDistinguishedName& b) {	return (a.compare(b) < 0);}
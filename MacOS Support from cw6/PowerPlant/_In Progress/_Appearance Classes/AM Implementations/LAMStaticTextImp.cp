// ===========================================================================//	LAMStaticTextImp.cp			PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LAMStaticTextImp.h>#include <LStream.h>#include <UDrawingUtils.h>#include <UQDOperators.h>#include <UTextTraits.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LAMStaticTextImp					Stream/Default Constructor	  [public]// ---------------------------------------------------------------------------//	Do not access inStream. It may be nil. Read Stream data in Init()LAMStaticTextImp::LAMStaticTextImp(	LStream*	inStream)	: LControlImp(inStream){}// ---------------------------------------------------------------------------//	¥ Init									Stream Initializer		  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::Init(	LControlPane*	inControlPane,	LStream*		inStream){	SInt16	controlKind;	*inStream >> controlKind;	*inStream >> mTextTraitsID;	inStream->ReadPString(mText);	Init(inControlPane, controlKind, mText, mTextTraitsID);}// ---------------------------------------------------------------------------//	¥ Init									Parameterized Initializer [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::Init(	LControlPane*	inControlPane,	SInt16			inControlKind,	ConstStringPtr	inTitle,	ResIDT			inTextTraitsID,	SInt32			inRefCon){	LControlImp::Init(inControlPane, inControlKind, inTitle,							inTextTraitsID, inRefCon);	mText		  = inTitle;	mTextTraitsID = inTextTraitsID;}// ---------------------------------------------------------------------------//	¥ ~LAMStaticTextImp					Destructor				  [public]// ---------------------------------------------------------------------------LAMStaticTextImp::~LAMStaticTextImp(){}#pragma mark -// ---------------------------------------------------------------------------//	¥ GetDescriptor													  [public]// ---------------------------------------------------------------------------StringPtrLAMStaticTextImp::GetDescriptor(	Str255		outDescriptor) const{	return LString::CopyPStr(mText, outDescriptor);}// ---------------------------------------------------------------------------//	¥ SetDescriptor													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::SetDescriptor(	ConstStringPtr	inDescriptor){	mText = inDescriptor;	Refresh();}// ---------------------------------------------------------------------------//	¥ GetValue														  [public]// ---------------------------------------------------------------------------boolLAMStaticTextImp::GetValue(	SInt32&		outValue) const{	outValue = mText;	return true;}// ---------------------------------------------------------------------------//	¥ SetValue														  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::SetValue(	SInt32		inValue){	mText = inValue;	Refresh();}// ---------------------------------------------------------------------------//	¥ GetTextTraitsID												  [public]// ---------------------------------------------------------------------------ResIDTLAMStaticTextImp::GetTextTraitsID() const{	return mTextTraitsID;}// ---------------------------------------------------------------------------//	¥ SetTextTraitsID												  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::SetTextTraitsID(	ResIDT	inTextTraitsID){	if (inTextTraitsID != mTextTraitsID) {		mTextTraitsID = inTextTraitsID;		Refresh();	}}// ---------------------------------------------------------------------------//	¥ SetDataTag													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::SetDataTag(	SInt16			/* inPartCode */,	FourCharCode	inTag,	Size			inDataSize,	void*			inDataPtr){	if (inTag == kControlStaticTextTextTag) {		mText.Assign(inDataPtr, (UInt8) inDataSize);		Refresh();	}}// ---------------------------------------------------------------------------//	¥ GetDataTag													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::GetDataTag(	SInt16			/* inPartCode */,	FourCharCode	inTag,	Size			inBufferSize,	void*			inBuffer,	Size*			outDataSize) const{	if (inTag == kControlStaticTextTextTag) {		SInt32	bytesToCopy = mText.LongLength();		if (inBufferSize < bytesToCopy) {			bytesToCopy = inBufferSize;		}		::BlockMoveData(mText.ConstTextPtr(), inBuffer, bytesToCopy);		if (outDataSize != nil) {			*outDataSize = bytesToCopy;		}	}}#pragma mark -// ---------------------------------------------------------------------------//	¥ ActivateSelf													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::ActivateSelf(){	if (mControlPane->GetEnabledState() == triState_On) {		Refresh();	}}// ---------------------------------------------------------------------------//	¥ DeactivateSelf												  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::DeactivateSelf(){	if (IsEnabled()) {		Refresh();	}}// ---------------------------------------------------------------------------//	¥ EnableSelf													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::EnableSelf(){	if (mControlPane->GetActiveState() == triState_On) {		Refresh();	}}// ---------------------------------------------------------------------------//	¥ DisableSelf													  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::DisableSelf(){	if (IsActive()) {		Refresh();	}}// ---------------------------------------------------------------------------//	¥ DrawSelf														  [public]// ---------------------------------------------------------------------------voidLAMStaticTextImp::DrawSelf(){	Rect	frame;	CalcLocalFrameRect(frame);									// Set text characteristics of the Port	SInt16	just = UTextTraits::SetPortTextTraits(mTextTraitsID);	RGBColor	textColor;			// Get text color from Port	::GetForeColor(&textColor);									// Container sets background color	mControlPane->ApplyForeAndBackColors();	if (textColor == Color_Black) {			// Black is the default text color in the Platinum Theme.			// To be Theme-savvy, we ask our container for the color			// in which to draw text instead of using black.		SInt16	bitDepth;		bool	hasColor;		mControlPane->GetDeviceInfo(bitDepth, hasColor);		mControlPane->GetEmbeddedTextColor( bitDepth, hasColor,											(IsActive() && IsEnabled()),											textColor);			// For non-black text, we use the color specified			// in the text traits, dimming it if this Pane			// is inactive or disabled.	} else if (!IsActive() || !IsEnabled()) {		UTextDrawing::DimTextColor(textColor);	}	::RGBForeColor(&textColor);	UTextDrawing::DrawWithJustification(mText.TextPtr(), mText.LongLength(),						frame, just, true);}PP_End_Namespace_PowerPlant
// ===========================================================================//	LMacTCPInetMapper.cp		PowerPlant 2.1		©1996-2000 Metrowerks Inc.// ===========================================================================////	Wrapper for MacTCPÕs DNR code segment.#include <LMacTCPInetMapper.h>#if PP_Target_Carbon		// MacTCP not supported. Remove this file from Carbon targets	#error "Carbon does not support MacTCP"#endif#include <UMacTCPSupport.h>#include <UDNSCache.h>PP_Begin_Namespace_PowerPlantLInternetAddress *LMacTCPInetMapper::sOurAddress = nil;// ===========================================================================#pragma mark === LMacTCPInetMapper ===// ---------------------------------------------------------------------------//		¥ LMacTCPInetMapper// ---------------------------------------------------------------------------//	ConstructorLMacTCPInetMapper::LMacTCPInetMapper(){	UMacTCPSupport::OpenMacTCPDriver();}// ---------------------------------------------------------------------------//		¥ ~LMacTCPInetMapper// ---------------------------------------------------------------------------//	DestructorLMacTCPInetMapper::~LMacTCPInetMapper(){}// ---------------------------------------------------------------------------//		¥ NameToAddress// ---------------------------------------------------------------------------//	Call to convert a DNS address (encapsulated by an LInternetDNSAddress//	object) to an IP address.UInt32LMacTCPInetMapper::NameToAddress(	ConstStringPtr inHostName){	hostInfo				theInfo;	Str255					hostName;#if DNS_USECACHE	//Check the local cache first	UInt32 returnAddress = UDNSCache::GetNameFromCache(inHostName);	if (returnAddress)		return returnAddress;#endif	LString::CopyPStr(inHostName, hostName);	LString::PToCStr(hostName);	//The new DNS operation created here will be deleted by	//	the DNS completion routine	LMacTCPDNSOperation * DNSOperation = new LMacTCPDNSOperation;	OSErr result = ::StrToAddr((char*)hostName, &theInfo,				DNSOperation->GetResultProc(), (char*)DNSOperation);	switch (result) {		case noErr:			break;		case cacheFault:			DNSOperation->WaitForCompletion();			ThrowIfError_(theInfo.rtnCode);			break;		default:			Throw_(result);			break;	}#if DNS_USECACHE && DNS_CACHELOOKUPS	//Add this to the cache	UDNSCache::AddToDNSCache((UInt32)theInfo.addr[0], inHostName);#endif	return (UInt32)theInfo.addr[0];}// ---------------------------------------------------------------------------//		¥ AddressToName// ---------------------------------------------------------------------------//	Call to convert an IP address (encapsulated by an LInternetAddress//	object) to a DNS address (which will be encapsulated by an//	LInternetDNSAddress).voidLMacTCPInetMapper::AddressToName(					UInt32 inHostIP,					LStr255& outHostName){	hostInfo				theInfo;#if DNS_USECACHE	if (UDNSCache::GetAddressFromCache(inHostIP, outHostName))		return;#endif	//The new DNS operation created here will be deleted by	//	the DNS completion routine	LMacTCPDNSOperation * DNSOperation = new LMacTCPDNSOperation;	OSErr result = ::AddrToName(inHostIP, &theInfo,						DNSOperation->GetResultProc(), (char*)DNSOperation);	switch (result) {		case noErr:			break;		case cacheFault:			DNSOperation->WaitForCompletion();			ThrowIfError_(theInfo.rtnCode);			break;		default:			Throw_(result);			break;	}	outHostName = (char*)theInfo.cname;	if (outHostName.EndsWith('.'))		// strip trailing '.'		outHostName[0]--;#if DNS_USECACHE && DNS_CACHELOOKUPS	//Add this to the cache	UDNSCache::AddToDNSCache(inHostIP, outHostName);#endif}// ---------------------------------------------------------------------------//		¥ GetLocalAddress// ---------------------------------------------------------------------------//	Call to retrieve the local address of this machine.LInternetAddress*LMacTCPInetMapper::GetLocalAddress(){	// ADM 000404 - Bug #MW07741 - Block Start	// ADM 000404 - Bug #MW07741 - Always retrieve the local address of this machine.	//				Can change if for example the user connects to the internet using	//				a PPP connection that assigns a dynamic ip address and between	//				calls to GetLocalAddress is disconnected and assigned a new ip	//				address when the connection is reestablished.	GetAddrParamBlock paramBlock;	for (short i = 0; i < sizeof(GetAddrParamBlock); i++)	{		SInt8 *ptr = (SInt8*)&paramBlock;		ptr[i] = 0;	}	paramBlock.ioCRefNum = UMacTCPSupport::GetMacTCPRefNum();	paramBlock.csCode = ipctlGetAddr;	ThrowIfError_(::PBControlSync((ParmBlkPtr)&paramBlock));	// ADM 000404 - Bug #MW07741 - Block End	if (!sOurAddress)	{		// ADM 000404 - Bug #MW07741 - Block Start		//GetAddrParamBlock paramBlock;										// ADM 000404		//for (short i = 0; i < sizeof(GetAddrParamBlock); i++)				// ADM 000404		//{																	// ADM 000404		//	SInt8 *ptr = (SInt8*)&paramBlock;								// ADM 000404		//	ptr[i] = 0;														// ADM 000404		//}																	// ADM 000404		//paramBlock.ioCRefNum = UMacTCPSupport::GetMacTCPRefNum();			// ADM 000404		//paramBlock.csCode = ipctlGetAddr;									// ADM 000404		//if (!::PBControlSync((ParmBlkPtr)&paramBlock)) {					// ADM 000404		sOurAddress = new LInternetAddress(paramBlock.ourAddress,0);		ThrowIfNil_(sOurAddress);		//}																	// ADM 000404		// ADM 000404 - Bug #MW07741 - Block End	}	// ADM 000404 - Bug #MW07741 - Block Start	// ADM 000404 - Global sOurAddress already allocated and initialized.	else {		// ADM 000404 - Check if the local address of this machine has changed and		//				 update the global sOurAddress if needed.		if ( sOurAddress->GetIPAddress() != paramBlock.ourAddress ) {			sOurAddress->SetIPAddress(paramBlock.ourAddress);			sOurAddress->SetHostPort(0);			sOurAddress->SetDNSAddress("\p");		}	}	// ADM 000404 - Bug #MW07741 - Block End	return new LInternetAddress(*sOurAddress);}// ---------------------------------------------------------------------------//		¥ AbortThreadOperation// ---------------------------------------------------------------------------// Abort the pending operation on the thread indicatedvoidLMacTCPInetMapper::AbortThreadOperation(LThread * inThread){	LMacTCPDNSOperation * theOperation = (LMacTCPDNSOperation *)StAsyncOperation::GetThreadOperation(inThread);	if (theOperation) {		theOperation->AbortOperation();	}}PP_End_Namespace_PowerPlant
// ===========================================================================//	LDialogBox.cp				PowerPlant 2.1		©1993-1999 Metrowerks Inc.// ===========================================================================////	A DialogBox is a Window that has an optional Default and/or Cancel//	Button. Return and Enter are keyboard equivalents for the Default//	Button, which has a DefaultOutline drawn around it. Escape and//	Command-Period are keyboard equivalents for the Cancel Button.////	The DialogBox is a Listener to these buttons, which must derived from//	LControl. However, the DialogBox does not attach any special meaning//	to the buttons. The user must give meaning to these buttons by assigning//	them an appropriate message (the one broadcasted when they are clicked).////	A DialogBox handles negative message numbers by relaying them to its//	SuperCommander as commands to ObeyCommand(). This allows any//	Commander to create a DialogBox and then to receive as commands//	the messages sent by the DialogBox's Broadcasters (which are usually//	Controls such as buttons).#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LDialogBox.h>#include <LStdControl.h>#include <LStream.h>#include <UReanimator.h>#include <UKeyFilters.h>#include <PP_KeyCodes.h>#include <PP_Messages.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LDialogBox							Default Constructor		  [public]// ---------------------------------------------------------------------------LDialogBox::LDialogBox(){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;	mDefaultOutline  = nil;}// ---------------------------------------------------------------------------//	¥ LDialogBox							Constructor				  [public[// ---------------------------------------------------------------------------//	Construct DialogBox from the data in a structLDialogBox::LDialogBox(	const SWindowInfo&	inWindowInfo)	: LWindow(inWindowInfo){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;	mDefaultOutline  = nil;}// ---------------------------------------------------------------------------//	¥ LDialogBox							Constructor				  [pulbic]// ---------------------------------------------------------------------------//	Construct a DialogBox from a WIND Resource with the specified attributes//	and SuperCommander////	Side Effect: Created window becomes the current portLDialogBox::LDialogBox(	ResIDT			inWINDid,	UInt32			inAttributes,	LCommander*		inSuper)	: LWindow(inWINDid, inAttributes, inSuper){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;	mDefaultOutline  = nil;}// ---------------------------------------------------------------------------//	¥ LDialogBox							Constructor				  [public]// ---------------------------------------------------------------------------LDialogBox::LDialogBox(	LCommander*		inSuperCommander,	const Rect&		inGlobalBounds,	ConstStringPtr	inTitle,	SInt16			inProcID,	UInt32			inAttributes,	WindowPtr		inBehind,	PaneIDT			inDefaultButtonID,	PaneIDT			inCancelButtonID)	: LWindow(inSuperCommander, inGlobalBounds, inTitle, inProcID,					inAttributes, inBehind){	mDefaultButtonID = inDefaultButtonID;	mCancelButtonID	 = inCancelButtonID;	mDefaultOutline	 = nil;}// ---------------------------------------------------------------------------//	¥ LDialogBox							Stream Constructor		  [public]// ---------------------------------------------------------------------------LDialogBox::LDialogBox(	LStream*	inStream)	: LWindow(inStream){	*inStream >> mDefaultButtonID;	*inStream >> mCancelButtonID;	mDefaultOutline = nil;}// ---------------------------------------------------------------------------//	¥ ~LDialogBox							Destructor				  [public]// ---------------------------------------------------------------------------LDialogBox::~LDialogBox(){}// ---------------------------------------------------------------------------//	¥ FinishCreateSelf											   [protected]// ---------------------------------------------------------------------------//	Finish creation by linking DialogBox as a Listener to its Default//	and Cancel Buttons.voidLDialogBox::FinishCreateSelf(){	SetDefaultButton(mDefaultButtonID);	SetCancelButton(mCancelButtonID);}// ---------------------------------------------------------------------------//	¥ HandleKeyPress												  [public]// ---------------------------------------------------------------------------//	DialogBox handles keyboard equivalents for hitting the Default and//	Cancel Buttons.////		Default Button: Enter, Return//		Cancel Button:  Escape, Command-PeriodBooleanLDialogBox::HandleKeyPress(	const EventRecord&	inKeyEvent){	Boolean		keyHandled	= true;	LControl*	keyButton	= nil;	UInt8		theChar		= (UInt8) (inKeyEvent.message & charCodeMask);	if ( (theChar == char_Enter) || (theChar == char_Return) ) {		keyButton = dynamic_cast<LControl*>(FindPaneByID(mDefaultButtonID));	} else if ( UKeyFilters::IsEscapeKey(inKeyEvent) ||				UKeyFilters::IsCmdPeriod(inKeyEvent) ) {		keyButton = dynamic_cast<LControl*>(FindPaneByID(mCancelButtonID));	}	if (keyButton != nil) {		keyButton->SimulateHotSpotClick(kControlButtonPart);	} else {		keyHandled = LWindow::HandleKeyPress(inKeyEvent);	}	return keyHandled;}// ---------------------------------------------------------------------------//	¥ ListenToMessage												  [public]// ---------------------------------------------------------------------------//	Respond to messages from Broadcasters////	DialogBox responds to the cmd_Close message by deleting itself.////	Also, negative message numbers are relayed to the ProcessCommand().//	This allows subclasses of DialogBox to handle messages as commands.//	Or, if you don't want to subclass DialogBox, the SuperCommander//	of the DialogBox will receive the messages as commands.voidLDialogBox::ListenToMessage(	MessageT	inMessage,	void*		ioParam){	if (inMessage == cmd_Close) {		DoClose();	} else if (inMessage < 0) {									// Relay message to supercommander		if (GetSuperCommander() != nil) {			SDialogResponse	theResponse;			theResponse.dialogBox = this;			theResponse.messageParam = ioParam;			ProcessCommand(inMessage, &theResponse);		}	}}// ---------------------------------------------------------------------------//	¥ SetDefaultButton												  [public]// ---------------------------------------------------------------------------//	Specify the PaneID of the default button of a DialogBox. The default//	button must be derived from LControl.////	The default button has a default outline around it and certain//	keyboard equivalents (Return and Enter) simulate a click inside itvoidLDialogBox::SetDefaultButton(	PaneIDT	inButtonID){	mDefaultButtonID = inButtonID;	if (mDefaultOutline != nil) {	// Remove former default outline		mDefaultOutline->Refresh();		delete mDefaultOutline;		mDefaultOutline = nil;	}	LControl	*theButton = dynamic_cast<LControl*>(FindPaneByID(inButtonID));	if (theButton != nil) {		theButton->AddListener(this);									// Create new default outline		mDefaultOutline = new LDefaultOutline(theButton);		mDefaultOutline->Refresh();	}}// ---------------------------------------------------------------------------//	¥ SetCancelButton												  [public]// ---------------------------------------------------------------------------//	Specify the PaneID of the cancel button of a DialogBox. The cancel//	button must be derived from LControl.////	Certain keyboard equivalents (Escape and Command-Period) simulate//	a click inside the cancel buttonvoidLDialogBox::SetCancelButton(	PaneIDT	inButtonID){	mCancelButtonID = inButtonID;	LControl*	theButton = dynamic_cast<LControl*>(FindPaneByID(inButtonID));	if (theButton != nil) {		theButton->AddListener(this);	}}PP_End_Namespace_PowerPlant
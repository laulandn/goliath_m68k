// ===========================================================================//	AEDescExtractor.t			PowerPlant 2.1d1	©1993-1999 Metrowerks Inc.// ===========================================================================////	Simulates a template function using the preprocessor//	Function for extracting data from an AppleEvent Descriptor Record////	#include this file after defining the following symbols://		Extractor_Name		Function name//		C_DataType			Type of data to extract//		AE_DataType			AppleEvent constant describing the type////	For example://		#undef	Extractor_Name//		#undef	C_DataType//		#undef	AE_DataType////		#define		Extractor_Name		TheInt16//		#define		C_DataType			SInt16//		#define		AE_DataType			typeShortInteger//		#include <AEDescExtractor.t>//	Will define a function for extracting a 16-bit integer from a DescriptorvoidUExtractFromAEDesc::Extractor_Name (	const AEDesc	&inDesc,	C_DataType		&outValue){#if PP_Target_Carbon	AEDesc	coerceDesc = {typeNull, nil};	if (::AECoerceDesc(&inDesc, AE_DataType, &coerceDesc) == noErr) {		OSErr err = ::AEGetDescData(&coerceDesc, &outValue, sizeof(C_DataType));		::AEDisposeDesc(&coerceDesc);		ThrowIfOSErr_(err);	} else {						// Coercion failed		ThrowOSErr_(errAETypeError);	}#else	Handle	dataH;	AEDesc	coerceDesc = {typeNull, nil};	if (inDesc.descriptorType == AE_DataType) {		dataH = inDesc.dataHandle;		// Descriptor is the type we want	} else {							// Try to coerce to the desired type		if (::AECoerceDesc(&inDesc, AE_DataType, &coerceDesc) == noErr) {										// Coercion succeeded			dataH = coerceDesc.dataHandle;		} else {						// Coercion failed			ThrowOSErr_(errAETypeError);		}	}	outValue = **(C_DataType**) dataH;	// Extract value from Handle	if (coerceDesc.dataHandle != nil) {		::AEDisposeDesc(&coerceDesc);	}#endif}
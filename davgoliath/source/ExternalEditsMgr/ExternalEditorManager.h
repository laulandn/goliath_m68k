/* ================================================================================================== * ExternalEditorManager.h															    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#ifndef __ExternalEditorManager_h__#define __ExternalEditorManager_h__ #pragma once #include <list>#include <map>#include <string>class ExternalEditContext;class CDAVContext;class CDAVTableWindow;typedef std::pair<std::string, OSType> ExternalEditorDef;typedef std::list<ExternalEditorDef> ExternalEditorDefList;class ExternalEditorManager {	public:		static ExternalEditorManager* GetExternalEditsMgr();		static bool ExternalEditsMgrInitialized();				// Initialization of ExternalEditorManager requires a valid		//  MenuBar		static void InitializeExternalEditMgr(	const FSSpec& inAppListStore, 												CommandT inStartEditCommand,												SInt16	inEditCommandRange,												CommandT subMenuCMD,												const LStr255& inEditRootDirName,												const FSSpec& inEditFileStorage); 		virtual ~ExternalEditorManager();				void GetEditorList(ExternalEditorDefList& outList);		void SetEditorList(const ExternalEditorDefList& inList);				bool EditItems(	CommandT inEditCmd, const CDAVContext* inDAVContext, 						const std::list<std::pair<std::string, FSSpec> >& inURLToFSpecMap,						CDAVTableWindow *inOriginatingWnd);								bool UpdateItemEditTime(const std::string& inServer, const std::string& inURI);		bool StopEditingItem(const std::string& inServer, const std::string& inURI);				void GetModifiedItems(std::list<ExternalEditContext*>& outItems);				void GetAllEditedItems(std::list<ExternalEditContext*>& outItems);				bool URLIsBeingEdited(const std::string& inServer, const std::string& inURI);		bool GetFSSpecForEditedItem(const std::string& inServer, const std::string& inURI, FSSpec& outSpec);		const FSSpec& GetEditSpecRoot() const;				bool GetFSSpecForLocalEdit(const std::string& inHostName, const std::string& inRelURIToEdit, FSSpec& outSpec);			protected:		void RebuildMenu();		bool LoadAppList();		bool SaveAppList();				bool LoadEditedFilesList();		bool SaveEditedFilesList();				std::list<ExternalEditContext*>	mEditingItems;		ExternalEditorDefList			mExternalEditors;		std::map<CommandT, OSType>		mCmdToAppMap;				LMenu*							mAppEditMenu;		FSSpec							mAppListStore;		CommandT						mFirstEditCmd;		SInt16							mCommandRnge;		bool							mInit;				FSSpec							mEditSpaceRoot;		FSSpec							mEditFileStore;			private:		ExternalEditorManager(	const FSSpec& inAppListStore, 								CommandT inStartEditCommand,								SInt16	inEditCommandRange,								CommandT subMenuCMD,								const LStr255& inEditRootDirName,								const FSSpec& inEditFileStorage);};#endif
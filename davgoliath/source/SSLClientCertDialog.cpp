/* ================================================================================================== * SSLClientCertDialog.cpp												    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#ifndef __SSLCertificateDialog_h__#include "SSLClientCertDialog.h"#endif#ifndef _H_UModalDialogs#include <UModalDialogs.h>#endif#ifndef __CNAVSERVICESUTILS_H__#include <CNavServicesUtils.h>#endif#include "CDAVTableAppConstants.h"#include "CDAVTableApp.h"#ifndef __SSLCertificateUtils_h__#include "SSLCertificateUtils.h"#endif#ifndef __SSLClientCertManager_H__#include "SSLClientCertManager.h"#endif#include "CStringDisplayTable.h"#include "CDAVHeadingTable.h"#include "CDAVLibUtils.h"#include <LEditText.h>#include <LPushButton.h>#include <vector>#include <cassert>static bool gRegisteredSSLCliCertDlog = false;static bool gRegisteredChooseCliCertDlog = false;const MessageT kIssuedToColumn   = FOUR_CHAR_CODE('col1');const MessageT kIssuedByColumn   = FOUR_CHAR_CODE('col2');const MessageT kExpiresColumn   = FOUR_CHAR_CODE('col3');const MessageT kFriendlyNameColumn   = FOUR_CHAR_CODE('col4');class SSLClientCertificateDialog : public LDialogBox {public:	enum { class_ID = FOUR_CHAR_CODE('CCRT') };	SSLClientCertificateDialog(LStream* inStream);	virtual ~SSLClientCertificateDialog();	static void DoDialogLoop();protected:	virtual void	FinishCreateSelf();		void DoAddClientCertDlog();	void RemoveSelectedCerts();	void OnOK();	void EnableControls();	bool GetPassword(std::string& outPassword);	void DoErrorAlert(const ClientCertInfo::ParseStatus);		CStringDisplayTable*	mTable;	LPushButton* mRemoveButton;		std::vector<SSLClientCertificate*>	mCertificates;	};class ChooseSSLClientCertDialog : public LDialogBox, public CStringDisplayTableClickCallback {public:	enum { class_ID = FOUR_CHAR_CODE('CLCT') };	ChooseSSLClientCertDialog(LStream* inStream);	virtual ~ChooseSSLClientCertDialog();		static bool DoDialogLoop(std::string& outCliCertData);	virtual void ItemDoubleClicked(const LOutlineItem* inItem);protected:	virtual void	FinishCreateSelf();		bool GetSelectedCliCert(std::string& outCliCertData);	void EnableControls();		CStringDisplayTable*	mTable;	std::vector<SSLClientCertificate*>	mCertificates;	LPushButton* mOKButton;	bool 	mDblClickTerminate;};// ---------------------------------------------------------------------------------//		¥ SSLClientCertificateDialog// ---------------------------------------------------------------------------------//	SSLClientCertificateDialog::SSLClientCertificateDialog(LStream* inStream) : LDialogBox(inStream),	mTable(NULL), mRemoveButton(NULL) {	SSLClientCertManager* sslCliCertMgr = SSLClientCertManager::GetSSLClientCertMgr();	sslCliCertMgr->GetClientCertificates(mCertificates);}// ---------------------------------------------------------------------------------//		¥ ~SSLClientCertificateDialog// ---------------------------------------------------------------------------------//	SSLClientCertificateDialog::~SSLClientCertificateDialog() {	for (std::vector<SSLClientCertificate*>::iterator iter = mCertificates.begin(); iter != mCertificates.end(); ++iter) {	   SSLClientCertificate* tmp = *iter;	   delete tmp;	}}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::FinishCreateSelf() {    mTable = dynamic_cast<CStringDisplayTable*>(FindPaneByID('flvt'));    Assert_(mTable != nil);	if (!mTable)		return;	CDAVHeadingTable *heading = reinterpret_cast<CDAVHeadingTable*>(FindPaneByID( EDITPROPSDLOGTBLTHDR ));   	mRemoveButton = dynamic_cast<LPushButton*>(FindPaneByID('RCRT'));   	 	LBevelButton *button = reinterpret_cast<LBevelButton*>(FindPaneByID('sort'));	std::map<MessageT, int> colMsgMap;	std::map<MessageT, int>::iterator iter;	colMsgMap[kIssuedToColumn] = 1;	colMsgMap[kIssuedByColumn] = 2;	colMsgMap[kExpiresColumn] = 3;	colMsgMap[kFriendlyNameColumn] = 4;	iter = colMsgMap.begin();    mTable->Setup(button, heading, colMsgMap);        heading->InsertCols(4, 0, nil, nil, false);    for (int i=1; i<5; i++) {		heading->SetColumnHeading( i, LStr255(1005, i), kControlBevelButtonAlignTextCenter, 0);		heading->SetColWidth(130,  i,  i);		heading->SetColumnHeadingValueMessage(i, (*iter).first);		heading->SetColumnListener(i, mTable);			++iter;    }	for (std::vector<SSLClientCertificate*>::iterator iter = mCertificates.begin(); iter != mCertificates.end(); ++iter) {	   SSLClientCertificate* tmp = *iter;   	   std::vector<std::string> items;	   items.push_back(tmp->mClientCertInfo.mIssuedTo);	   items.push_back(tmp->mClientCertInfo.mIssuedBy);	   items.push_back(tmp->mClientCertInfo.mExpirationDate);	   if (tmp->mClientCertInfo.mFriendlyName.size() > 0 ) {	      items.push_back(tmp->mClientCertInfo.mFriendlyName);	   }	   	mTable->AddListItem(items, tmp);	}	}// ---------------------------------------------------------------------------------//		¥ GetPassword// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::OnOK() {	SSLClientCertManager* sslCliCertMgr = SSLClientCertManager::GetSSLClientCertMgr();	sslCliCertMgr->SetClientCertificates(mCertificates);}// ---------------------------------------------------------------------------------//		¥ GetPassword// ---------------------------------------------------------------------------------//	bool SSLClientCertificateDialog::GetPassword(std::string& outPassword) {	PP_PowerPlant::StDialogHandler dialog(CLIENTCERTPASSWORDDLOG, GetApplicationInstance());	LDialogBox* dlog = dynamic_cast<LDialogBox*>(dialog.GetDialog());	Assert_(dlog != nil);		if (!dlog)		return false;		LEditText* pass = dynamic_cast<LEditText*>(dlog->FindPaneByID('pass'));	Assert_(pass != nil);	if (!pass)		return false;	dlog->Show();	while (true) {		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			return false;		else if (hitMessage == PP_PowerPlant::msg_OK)			break;	}    LStr255 valText;    pass->GetText(valText);	outPassword.append(valText.ConstTextPtr(), valText.Length());	return true;}// ---------------------------------------------------------------------------------//		¥ DoPasswordAlert// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::DoErrorAlert(const ClientCertInfo::ParseStatus inParseStat) {   LStr255 AlertText;   if (inParseStat == ClientCertInfo::eBadPass) {      AlertText = LStr255(str_UIStrings, str_IncorrectPassword);   } else if (inParseStat == ClientCertInfo::eBadData) {      AlertText = LStr255(str_UIStrings, str_BadDataFile);      } else if (inParseStat == ClientCertInfo::eIOErr) {      AlertText = LStr255(str_UIStrings, str_CertFileIOErr);   } else {      AlertText = LStr255(str_UIStrings, str_CertFileUnknownErr);   }      AlertStdAlertParamRec	param;   SInt16			itemHit;   param.movable 		= true;   param.filterProc 	= nil;   param.defaultText 	= "\pOK";   param.cancelText 	= nil;   param.helpButton 	= false;   param.otherText = nil;   param.defaultButton = kAlertStdAlertOKButton;   param.cancelButton 	= 0;   param.position 		= 0;   OSErr err = StandardAlert( kAlertCautionAlert, StringPtr(AlertText), nil, &param, &itemHit );}// ---------------------------------------------------------------------------------//		¥ DoAddClientCertDlog// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::DoAddClientCertDlog() {   FSSpec theSpec;   if (!CNavServicesUtils::getfileNavSrv(&theSpec,str_UIStrings, str_OpenClientCertFile, NULL, NULL))      return;      		ClientCertInfo outCertData;	ClientCertInfo::ParseStatus parseStat;	std::string password;	while (1) {		password.clear();		if (!GetPassword(password))			return;		parseStat = ClientCertInfo::ParseCertifcate(theSpec, password, outCertData);		if (ClientCertInfo::eOK != parseStat) {			DoErrorAlert(parseStat);			if (parseStat != ClientCertInfo::eBadPass)			   return;		} else {		   break;		}	}	std::vector<std::string> items;	items.push_back(outCertData.mIssuedTo);	items.push_back(outCertData.mIssuedBy);	items.push_back(outCertData.mExpirationDate);	if (outCertData.mFriendlyName.size() > 0 ) {		items.push_back(outCertData.mFriendlyName);	} else {		LStr255 noneStr(1005, 5);		std::string tempStr;		tempStr.append(noneStr.ConstTextPtr(), noneStr.Length());		items.push_back(tempStr);	}		SSLClientCertificate* cliCert = new SSLClientCertificate;	cliCert->mClientCertInfo = outCertData;	LFileStream filestream(theSpec);	filestream.OpenDataFork(fsRdPerm);	SInt32 streamSize = filestream.GetLength() - filestream.GetMarker();	std::vector<char> tempArray(streamSize);		SInt32 bytesRead = filestream.ReadData(&tempArray[0], streamSize);	assert(streamSize == bytesRead);	std::string pkcsData;	pkcsData.assign(&tempArray[0], streamSize);		CBase64StringUtils::Encode(pkcsData, cliCert->mPKCS12Data);	mCertificates.push_back(cliCert);		mTable->AddListItem(items, cliCert);}// ---------------------------------------------------------------------------------//		¥ DoAddClientCertDlog// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::RemoveSelectedCerts() {	STableCell		cell;	UInt32			numRows,numCols;		std::vector<LOutlineItem*> items;	mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {		   LOutlineItem* theItem = mTable->FindItemForRow(cell.row);		   if (NULL != theItem) 		      items.push_back(theItem);   		}	}		for (std::vector<LOutlineItem*>::iterator iter = items.begin(); iter != items.end(); ++iter) {		LOutlineItem *theItem = *iter;		void* userData = mTable->GetUserDataForItem(theItem);		if (userData != NULL) {			SSLClientCertificate* cliCert = static_cast<SSLClientCertificate*>(userData);			mTable->RemoveItem(theItem);			std::vector<SSLClientCertificate*>::iterator iter = std::find(mCertificates.begin(), mCertificates.end(), cliCert);			if (iter != mCertificates.end())				mCertificates.erase(iter);			delete cliCert;		}	}	}// ---------------------------------------------------------------------------------//		¥ DoAddClientCertDlog// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::EnableControls() {	STableCell		cell;	UInt32			numRows,numCols;		mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {			atLeastOneIsSelected = true;			break;   		}	}	if (atLeastOneIsSelected)		mRemoveButton->Enable();	else 		mRemoveButton->Disable();}// ---------------------------------------------------------------------------------//		¥ DoDialogLoop// ---------------------------------------------------------------------------------//	void SSLClientCertificateDialog::DoDialogLoop() {	PP_PowerPlant::StDialogHandler dialog(CLIENTCERTSDLOG, GetApplicationInstance());	SSLClientCertificateDialog* dlog = dynamic_cast<SSLClientCertificateDialog*>(dialog.GetDialog());	Assert_(dlog != nil);		dlog->Show();		while (true) {		dlog->EnableControls();		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			break;		else if (hitMessage == PP_PowerPlant::msg_OK) {			dlog->OnOK();			break;		} else if (hitMessage == 'ICRT') {			dlog->DoAddClientCertDlog();		} else if (hitMessage == 'RCRT') {			dlog->RemoveSelectedCerts();		}	}}// ---------------------------------------------------------------------------------//		¥ ChooseSSLClientCertDialog// ---------------------------------------------------------------------------------//	ChooseSSLClientCertDialog::ChooseSSLClientCertDialog(LStream* inStream) : LDialogBox(inStream),	mTable(NULL), mOKButton(NULL), mDblClickTerminate(false) {	SSLClientCertManager* sslCliCertMgr = SSLClientCertManager::GetSSLClientCertMgr();	sslCliCertMgr->GetClientCertificates(mCertificates);}// ---------------------------------------------------------------------------------//		¥ ~ChooseSSLClientCertDialog// ---------------------------------------------------------------------------------//	ChooseSSLClientCertDialog::~ChooseSSLClientCertDialog() {	for (std::vector<SSLClientCertificate*>::iterator iter = mCertificates.begin(); iter != mCertificates.end(); ++iter) {	   SSLClientCertificate* tmp = *iter;	   delete tmp;	}}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	void ChooseSSLClientCertDialog::FinishCreateSelf() {    mTable = dynamic_cast<CStringDisplayTable*>(FindPaneByID('flvt'));    Assert_(mTable != nil);	if (!mTable)		return;	mTable->SetClickCallback(this);	CDAVHeadingTable *heading = reinterpret_cast<CDAVHeadingTable*>(FindPaneByID( EDITPROPSDLOGTBLTHDR ));   	mOKButton = dynamic_cast<LPushButton*>(FindPaneByID('OPEN'));   	 	LBevelButton *button = reinterpret_cast<LBevelButton*>(FindPaneByID('sort'));	std::map<MessageT, int> colMsgMap;	std::map<MessageT, int>::iterator iter;	colMsgMap[kIssuedToColumn] = 1;	iter = colMsgMap.begin();	mTable->SetSingleSelect(true);    mTable->Setup(button, heading, colMsgMap);        heading->InsertCols(1, 0, nil, nil, false);	heading->SetColumnHeading( 1, LStr255(1005, 1), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(308,  1,  1);	heading->SetColumnHeadingValueMessage(1, (*iter).first);	heading->SetColumnListener(1, mTable);		for (std::vector<SSLClientCertificate*>::iterator iter = mCertificates.begin(); iter != mCertificates.end(); ++iter) {	   SSLClientCertificate* tmp = *iter;   	   std::vector<std::string> items;	   items.push_back(tmp->mClientCertInfo.mIssuedTo);	   mTable->AddListItem(items, tmp);	}	}// ---------------------------------------------------------------------------------//		¥ GetSelectedCliCert// ---------------------------------------------------------------------------------//	bool ChooseSSLClientCertDialog::GetSelectedCliCert(std::string& outCliCertData) {	STableCell		cell;	UInt32			numRows,numCols;		mTable->GetTableSize(numRows,numCols);	cell.col = 1;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {			LOutlineItem* theItem = mTable->FindItemForRow(cell.row);			void* userData = mTable->GetUserDataForItem(theItem);			if (userData != NULL) {				SSLClientCertificate* cliCert = static_cast<SSLClientCertificate*>(userData);				if (cliCert) {					CBase64StringUtils::Decode(cliCert->mPKCS12Data, outCliCertData);					return true;				}			}			return false;   		}	}	return false;}// ---------------------------------------------------------------------------------//		¥ DoDialogLoop// ---------------------------------------------------------------------------------//	void ChooseSSLClientCertDialog::EnableControls() {	STableCell		cell;	UInt32			numRows,numCols;		mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	cell.col = 1;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {			atLeastOneIsSelected = true;			break;   		}	}	if (atLeastOneIsSelected)		mOKButton->Enable();	else 		mOKButton->Disable();}// ---------------------------------------------------------------------------------//		¥ DoDialogLoop// ---------------------------------------------------------------------------------//	bool ChooseSSLClientCertDialog::DoDialogLoop(std::string& outCliCertData) {	PP_PowerPlant::StDialogHandler dialog(1411, GetApplicationInstance());	ChooseSSLClientCertDialog* dlog = dynamic_cast<ChooseSSLClientCertDialog*>(dialog.GetDialog());	Assert_(dlog != nil);		dlog->Show();		while (true) {		dlog->EnableControls();		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			break;		else if (hitMessage == PP_PowerPlant::msg_OK || dlog->mDblClickTerminate) {			return dlog->GetSelectedCliCert(outCliCertData);		} 	}	return false;}// ---------------------------------------------------------------------------------//		¥ ItemDoubleClicked// ---------------------------------------------------------------------------------//	void ChooseSSLClientCertDialog::ItemDoubleClicked(const LOutlineItem* /*inItem*/) {	mDblClickTerminate = true;}// ---------------------------------------------------------------------------------//		¥ DisplayClientCertificateDialog// ---------------------------------------------------------------------------------//	void DisplayClientCertificateDialog() {	if (!gRegisteredSSLCliCertDlog) {		RegisterClass_(SSLClientCertificateDialog);		gRegisteredSSLCliCertDlog = true;	}	SSLClientCertificateDialog::DoDialogLoop();}// ---------------------------------------------------------------------------------//		¥ GetClientCertificate// ---------------------------------------------------------------------------------//	bool GetClientCertificate(std::string& outClientCertData) {	if (!gRegisteredChooseCliCertDlog) {		RegisterClass_(ChooseSSLClientCertDialog);		gRegisteredChooseCliCertDlog = true;	}		return ChooseSSLClientCertDialog::DoDialogLoop(outClientCertData);}
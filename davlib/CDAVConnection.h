/* =========================================================================== *	CDAVConnection.h			    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2000  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com *//*!   @header DAVLib	This library implements HTTP 1.1 and the WebDAV (RFC 2518) extensions to HTTP.   This program is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.    This program is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.*/#pragma once#ifndef __CDAVCONNECTION_H__#define __CDAVCONNECTION_H__#include <LHTTP11Connection.h>#include <LHTTPMessage.h>#include <LHTTPResponse.h>#include <LThread.h>// ===========================================================================//		¥ CDAVConnection// ===========================================================================/*!  @class CDAVConnection  @discussion This class implements the WebDAV extensions to the HTTP 1.1  protocol. Designed to be a drop in replacement for the PowerPlant  LHttpConnection class; extends the functionality to include RFC2518 (WebDAV)  methods. See the documentation on PowerPlant's Internet classes for more  information. */class CDAVConnection : public LHTTP11Connection {public:  /*!	 @function CDAVConnection	 @discussion object constructor	 @param inThread thread the connection runs in.	 @param inEndPoint (optional) externally provided endpoint,	 	typically to be reused for additional connections, and to be created	 	and closed by the caller.	 @param inOutCookieList (optional) persistent cookie list to be used as	 	necessary by the connection.	 @param inSecure (optional) if true, an SSL connection is attempted. By	 	default, an SSL connection will be created iff the port is 443.	*/							CDAVConnection(LThread& 		inThread,											LTCPEndpoint *	inEndPoint = nil,											LCookieList  *  inOutCookieList = nil,											bool			inSecure = false );  /*!	 @function ~CDAVConnection	 @discussion object destructor	*/	virtual					~CDAVConnection();	// HTTP protocol   /*!	  @function RequestResource	  @discussion Get a resource	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inMethod the method, defaults to GET	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			RequestResource(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									EHTTPMethod			inMethod = HTTPGet,									SInt16				inRemotePort = 0);	   /*!	  @function RequestResource	  @discussion Get a resource	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inMethod the method, defaults to GET	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			RequestResource(									ConstStr255Param	inRemoteHost,									ConstStr255Param	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									EHTTPMethod			inMethod = HTTPGet,									SInt16				inRemotePort = 0);	   /*!	  @function Options	  @discussion performs an HTTP OPTIONS	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Options(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);    // DAV Extensions   /*!	  @function PropFind	  @discussion performs an HTTP PROPFIND	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			PropFind(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Mkcol	  @discussion performs an HTTP MKCOL	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			MkCol(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Delete	  @discussion performs an HTTP Delete	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Delete(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Copy	  @discussion performs an HTTP Copy	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Copy(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Move	  @discussion performs an HTTP MOVE	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Move(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function PropPatch	  @Discussion performs an HTTP PROPPATCH	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			PropPatch(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Lock	  @discussion performs an HTTP Lock	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Lock(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);   /*!	  @function Unlock	  @discussion performs an HTTP UNLOCK	  @param inRemoteHost the host name or IP address of the server	  @param inRequest the requested resource	  @param inMessage contains the message to be sent to the server	  @param outResponse HTTP response is parsed and placed in this object	  @param inRemptePort the port number to communicate with the server.  Defaults to 80	*/	virtual void			Unlock(									const std::string&	inRemoteHost,									const std::string&	inRequest,									LHTTPMessage&		inMessage,									LHTTPResponse&		outResponse,									SInt16				inRemotePort = 0);			virtual void			SetCheckContentLength(Boolean inCheck)								{ mCheckContentLength = inCheck; }		virtual Boolean			GetCheckContentLength()								{ return mCheckContentLength; }public:		static const char*	kHTTPOptions;	static const char*	kDAVPropFind;	static const char*	kDAVMkcol;	static const char*	kDAVDelete;	static const char*	kDAVCopy;	static const char*	kDAVMove;	static const char*	kDAVPropPatch;	static const char*	kDAVLock;	static const char*	kDAVUnlock;    // HTTP header fields	static const char*	kFieldTransferEncoding;	static const char*	kChunkedTransferEncoding;	static const char*	kDAV;	static const char*	kMSAuthorVia;	static const char*	kServer;	static const char*	kAllow;   		static const SInt32 kHTTPContinue;	static const SInt32 kHTTPSwitchingProtocols;		static const SInt32 kHTTPOK;	static const SInt32 kHTTPCreated;	static const SInt32 kHTTPNoContent;	static const SInt32 kHTTPResetContent;	static const SInt32 kHTTPPartialContent;	static const SInt32 kHTTPMultiStatus;	static const SInt32 kHTTPMovedPermanently;	static const SInt32 kHTTPFound;	//400's - error codes	static const SInt32 kHTTPRequestUnauthorized;	static const SInt32 kHTTPForbidden;	static const SInt32 kHTTPNotFound;	static const SInt32 kHTTPMethodNotAllowed;	static const SInt32 kHTTPConfiict;	static const SInt32 kHTTPPreconditionFailed;	static const SInt32 kUnsupportedMediaType;	static const SInt32 kHTTPLocked;	static const SInt32 kHTTPFailedDependancy;	static const SInt32 kHTTPBadGateway;	static const SInt32 kHTTPInsufficientStorage;};#endif
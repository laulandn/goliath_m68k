/* ================================================================================================== * SSLClientCertManager.cpp													    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */ #ifndef __SSLClientCertManager_H__#include "SSLClientCertManager.h"#endif#include "CDAVTableAppConstants.h"#ifndef __PropListParser_h__#include "PropListParser.h"#endif#include <memory>std::auto_ptr<SSLClientCertManager> gCliCertMgr(NULL);const char* kIssuedTo = "issued_to";const char* kIssuedBy = "issued_by";const char* kExpiration = "expires";const char* kFriendlyName = "friendlyName";const char* kLocalKeyID   = "localKeyID";const char* kCertData     = "certData";// ---------------------------------------------------------------------------------//		¥ SSLClientCertificate// ---------------------------------------------------------------------------------//	SSLClientCertificate::SSLClientCertificate() {}// ---------------------------------------------------------------------------------//		¥ SSLClientCertificate// ---------------------------------------------------------------------------------//	SSLClientCertificate::SSLClientCertificate(const SSLClientCertificate& rhs) :	mClientCertInfo(rhs.mClientCertInfo),	mPKCS12Data(rhs.mPKCS12Data) {}// ---------------------------------------------------------------------------------//		¥ GetSSLClientCertMgr// ---------------------------------------------------------------------------------//	SSLClientCertManager* SSLClientCertManager::GetSSLClientCertMgr() {	if (gCliCertMgr.get() == NULL) {		gCliCertMgr = std::auto_ptr<SSLClientCertManager>(new SSLClientCertManager);	}	return gCliCertMgr.get();}// ---------------------------------------------------------------------------------//		¥ SSLClientCertManager// ---------------------------------------------------------------------------------//	SSLClientCertManager::SSLClientCertManager() :	mInit(false){   OSErr  err;   short  vRefNum;   long   dirID;      LStr255 cliCertFolderName(str_FileNameStrings, str_GoliathClientCertDBFileName);   //locate our preferences file; if it doesn't exist, create it   err = ::FindFolder( kOnSystemDisk, kPreferencesFolderType, kCreateFolder,                       &vRefNum, &dirID);                          if (err != noErr) 	   return;         mPrefsFile.vRefNum = vRefNum;   mPrefsFile.parID   = dirID;   LString::CopyPStr(cliCertFolderName, mPrefsFile.name, sizeof(StrFileName));   ::FSpCreateResFile(&mPrefsFile, '????', 'pref', (ScriptCode)nil );   err = ResError();   if ( err == dupFNErr ) {      mInit = true;   } else {      mInit = true;   }   }// ---------------------------------------------------------------------------------//		¥ ~SSLClientCertManager// ---------------------------------------------------------------------------------//	SSLClientCertManager::~SSLClientCertManager() {}// ---------------------------------------------------------------------------------//		¥ GetClientCertificates// ---------------------------------------------------------------------------------//	bool SSLClientCertManager::GetClientCertificates(std::vector<SSLClientCertificate*>& outCertList) {	PropListParser::PropValMapList PVMList;	if (!PropListParser::LoadPropList(mPrefsFile, PVMList))	   return false;		for (PropListParser::PropValMapList::iterator iter = PVMList.begin(); iter != PVMList.end(); ++iter) {	   SSLClientCertificate* tempCert = new SSLClientCertificate;	   PropListParser::PropValMap pvMap = *iter;	   tempCert->mClientCertInfo.mIssuedTo = pvMap[kIssuedTo];	   tempCert->mClientCertInfo.mIssuedBy = pvMap[kIssuedBy];	   tempCert->mClientCertInfo.mExpirationDate = pvMap[kExpiration];	   tempCert->mClientCertInfo.mFriendlyName = pvMap[kFriendlyName];	   tempCert->mClientCertInfo.mLocalKeyID = pvMap[kLocalKeyID];	   tempCert->mPKCS12Data = pvMap[kCertData];	   outCertList.push_back(tempCert);	}		return true;}// ---------------------------------------------------------------------------------//		¥ SetClientCertificates// ---------------------------------------------------------------------------------//	bool SSLClientCertManager::SetClientCertificates(const std::vector<SSLClientCertificate*>& outCertList) {	PropListParser::PropValMapList PVMList;	for (std::vector<SSLClientCertificate*>::const_iterator iter = outCertList.begin(); iter != outCertList.end(); ++iter) {	   PropListParser::PropValMap pvMap;	   pvMap[kIssuedTo] = (*iter)->mClientCertInfo.mIssuedTo;	   pvMap[kIssuedBy] = (*iter)->mClientCertInfo.mIssuedBy;	   pvMap[kExpiration] = (*iter)->mClientCertInfo.mExpirationDate;	   pvMap[kFriendlyName] = (*iter)->mClientCertInfo.mFriendlyName;	   pvMap[kLocalKeyID] = (*iter)->mClientCertInfo.mLocalKeyID;	   pvMap[kCertData] = (*iter)->mPKCS12Data;       PVMList.push_back(pvMap);	}		return PropListParser::SavePropList(mPrefsFile, PVMList);} //  
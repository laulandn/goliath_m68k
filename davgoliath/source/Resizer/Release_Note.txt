// =============================================================================// Resizer 1.0 Release Notes//// Author: Joseph Chan <mailto:firstian@bellatlantic.net>//// Date	:	1/25/2000//// Copyright © 2000 Joseph Chan. All rights reserved.// =============================================================================History:1/25/2000	First release.Overview:This set of classes implement the function of panel resizers. Resizers can be eitherXOR animated, or live - resize drawings can be done during the tracking of the resizer.Most uses of this set of classes require no additional coding, only modification to resources are required. The task of resizing is done by two cooperating classes:CResizerTrackerViewThis view must be one of the superviews of the resizer that wish to be tracked. Tracking begins by a resizer target (described below) detecting a click-drag action and thencalling TrackResizer(). CResizerTrackerView by default provide XOR animation for theresizer. It is also a derived class of LOffscreenView, which enable resizer targetsto provide its own drawing, e.g., "live" resizing, similar to the Finder list view.CResizerTargetThis is an nested abstract class of CResizerTrackerView. This provides a callback interfacefor CResizerTrackerView to start, track, and end the resizing action.Source files overview:CResizerTrackerView.cp	Contains CResizerTrackerView and CResizerTarget. CResizerTrackerView is meant to be	used as it is. One tracker can be used to track serve multiple resizers, as shown in	the sample code. CResizerTarget is meant to be used as a mixed-in. The range of	movement of a resizer is determined by the clipping region that is passed into 	TrackResizer(). See the comment above TrackResizer() for further explanations.CResizerAttachment.cp	An implementation of CResizerTarget that is an attachment. It can be attached to	any pane and make the pane a resizer. Its PPob takes in two pane IDs for the panes	that the resizer sits in between and are supposed to be resized. Pane 1 is the	top/left pane and Pane 2 is the bottom/right pane. The PPob also takes in two	minimum dimensions that the panes can have. Because this class used the locations, 	sizes, and the minimum dimensions to calculate the clipping region to limit the 	movement of the resizer pane, any unusual arrange, i.e., not the classic sandwich	pane-resizer-pane arrangement will result in some spectacular special effects. Finally,	you can also select in the PPob whether you want to the resizing action to be live or	not.CAdjustCursorAttachment.cp	This is a simple class that simply change the cursor shape when the cursor is inside	the host pane, or when the host pane is clicked. This class in itself has nothing to	do with resizer per se, but it is a convenient companion for CResizerAttachment: by	putting both of these attachments on a pane, you have an instant resizer that behaves	as expected: the cursor changes when you enter the resizer, and optionally, it will	change the cursor again when you click on the resizer, liking the grabbing hand in	the sample code.XORDrawing.cp	This is one of the base classes of CResizerTrackerView. Its only purpose is to 	encapsulate the procedure of doing generic XOR animation. Normal users of the resizer	classes will not need to use this class at all. Any new derived class of XORDrawing	only needs to overrid DrawNewXOR(), which builds the new XOR region, in our case,	the region of the resizer in its current position.CHeadingTable.cp	This class also has nothing to do with resizers per se. It implements a table header	that can be attached to any LTableView objects and provides a Finder like table header	with LBevelButtons as titles. The convention of using this class is that all column	manipulations of the host table need to go through CHeadingTable. For instance, adding,	removing, resizing columns of the host table MUST be done by calling InsertCols,	RemoveCols, and SetColWidth of CHeadingTable, respectively. CHeadingTable overrides	those methods to forward the calls to the host table. In the PPob of CHeadingTable,	you can select whether the bevel buttons are clickable or not. If they are clickable,	they will be in a radio group, so only one of them can be on at a time. When a	bevel button is clicked, the heading will broadcast a message with the column index	in the ioParam.CResizableHeading.cp	This is another implementation of CResizerTarget that is derived from CHeadingTable.	The only added feature is that all the column are resizable. The behavior of this	class closely mimic that of the Finder. The resizer cursor and whether the resizers	are live can be selected in the PPob.CMultiScrollerView.cp	This class has nothing to do with resizer per se. This class is used in the sample	code to let the table heading scroll horizontally with the table. The PPob of this	class is set up so that a list of subviews can be scrolled together. However, the	scroll bars are only adjusted according to the primary scrolling view. Therefore,	it is important to make sure that the image sizes of the subviews are consistent	with each other, i.e., views that scroll together horizontally should have the same	image width, etc.How to use it:Drag the folder Resizer into the project window. For simple resizer, see the resource forResizer window about how to hook up the two attachment to a LSeparator to make resizers.For more complicated resizers, see how CResizableHeading does it. Pay particular attentionto how the clipping region is constructed to limit the movement of the resizer. Make sure the CTYP resource is reachable by Constructor (either in the same res file or in the Custom Types folder).Note: There is a bug in LOutlineTable that under certain conditions will cause the little white lines in the table example to not draw all the way to the right edge of the frame ifthe frame size is larger than the image size. This is not a bug in the resizer classes.Please contact me if you want to know how to fix it.Restrictions:None. This code may be used freely in any application. I would appreciate it if you will inform me of any bugs, omissions, etc., and if you added any features to the class. However,if you intend to distribute a modified version of this code, please add to the revisionhistory.Legal stuff:This code is provided to you on an "AS IS" basis. Joseph Chan make no warranties, neither expressed nor implied, regarding this code, its merchantability, nor its fitness for any purpose.  Joseph Chan agrees to make a reasonable effort to provide written or verbal corrections for any problems that might be found in this code.
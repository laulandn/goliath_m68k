/*  Metrowerks Standard Library  *//*  $Date: 2000/06/13 16:43:05 $  *  $Revision: 1.11.8.7 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//* *	cstring            hh  971206  this file used to be string.h */ #ifndef __cstring__#define __cstring__#include <ansi_parms.h>/*__namespace(__stdc_space(string))    hh  971206  never wrap a namespace around an #include(it's considered impolite)*/#include <size_t.h>#include <null.h>#if (__dest_os	== __win32_os )#include <extras.h>#endif#ifndef RC_INVOKED   /* hh 971230 */#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#if macintosh && !defined(__dest_os)               /*MW-mm 960927a*/  #define __dest_os __mac_os                       /*MW-mm 960927a*/#endif                                             /*MW-mm 960927a*/#if __dest_os == __be_os	#include <bsd_mem.h>#endif#define __max_errstr	32#ifdef __cplusplus           /* hh  971206  expanded _extern macros and added namespace std*/	#ifdef _MSL_USING_NAMESPACE		namespace std {	#endif	extern "C" {#endif_MSL_IMP_EXP_C void * 	memset(void * , int , size_t );_MSL_IMP_EXP_C void * 	memchr(const void * , int , size_t );_MSL_IMP_EXP_C int		memcmp(const void * , const void * , size_t );/*__end_extern_c    hh  971206*/#if !__MC68K__ || _No_BlockMove || __dest_os != __mac_os		_MSL_IMP_EXP_C void * memcpy (void * , const void * , size_t );	_MSL_IMP_EXP_C void * memmove(void * , const void * , size_t );	#else /* __MC68K__ && !_No_BlockMove && __dest_os == __mac_os */		void * __memcpy(void * : __A1, const void * : __A0, size_t : __D0) : __A1		= {				0x7220,			/*			moveq		#32, d1				*/				0xB081,			/*			cmp.l		d1, d0				*/				0x6504,			/*			bcs.s		@1						*/				0xA22E,			/*			_BlockMoveData				*/				0x600E,			/*			bra.s		@3						*/				0x4A80,			/* @1:	tst.l		d0						*/				0x670A,			/*			beq.s		@3						*/				0x2209,			/* 			move.l	a1, d1				*/				0x12D8,			/* @2:	move.b	(a0)+, (a1)+	*/				0x5380,			/*			subq.l	#1, d0				*/				0x66FA,			/*			bne.s		@2						*/				0x2241			/*			move.l	d1, a1				*/			};						/* @3:												*/		void * __memmove(void * : __A1, const void * : __A0, size_t : __D0) : __A1		= {				0xA22E			/* _BlockMoveData */			};	#ifdef __cplusplus		} /* extern "C" */		inline void * memcpy (void * dst, const void * src, size_t len)			{ return __memcpy(dst, src, len); }				inline void * memmove(void * dst, const void * src, size_t len)			{ return __memmove(dst, src, len); }		extern "C" {	#else			_MSL_IMP_EXP_C void * memcpy (void * , const void * , size_t );		_MSL_IMP_EXP_C void * memmove(void * , const void * , size_t );				#define memcpy(dst, src, len)		__memcpy(dst, src, len)		#define memmove(dst, src, len)	__memmove(dst, src, len)		#endif#endif /* !__MC68K__ || _No_BlockMove */#if !__MC68K__ || _No_String_Inlines		_MSL_IMP_EXP_C size_t strlen(const char * );	_MSL_IMP_EXP_C char * strcpy(char * , const char * );	#else /* !(!__MC68K__ || _No_String_Inlines) */		size_t __strlen(const char * : __A0) : __D0		= {				0x70FF,			/*		moveq		-1, d0	*/				0x5280,			/* @1	addq.l	#1, d0	*/				0x4A18,			/*		tst.b		(a0)+		*/				0x66FA			/*		bne.s		@1			*/			};			char * __strcpy(char * : __A0, const char * : __A1) : __D0 		= {				0x2008,			/*		move.l	a0, d0				*/				0x10D9,			/* @1	move.b	(a1)+, (a0)+	*/				0x66FC			/*		bne.s		@1						*/			};	/* hh 990525 */		#ifdef __cplusplus					} // extern "C"					inline size_t strlen(const char* str) {return __strlen(str);}			inline char* strcpy(char* dst, const char* src) {return __strcpy(dst, src);}					extern "C" {			#else			_MSL_IMP_EXP_C size_t strlen(const char * );		_MSL_IMP_EXP_C char * strcpy(char * , const char * );				#define strlen(str)				__strlen(str)		#define strcpy(dst, src)	__strcpy(dst, src)			#endif	#endif /* !__MC68K__ || _No_String_Inlines */_MSL_IMP_EXP_C char * strncpy(char * , const char * , size_t );_MSL_IMP_EXP_C char * strcat (char * , const char * );_MSL_IMP_EXP_C char * strncat(char * , const char * , size_t );_MSL_IMP_EXP_C int    strcmp (const char * , const char * );_MSL_IMP_EXP_C int    strncmp(const char * , const char * , size_t );_MSL_IMP_EXP_C int    strcoll(const char * , const char * );_MSL_IMP_EXP_C size_t strxfrm(      char * , const char * , size_t );_MSL_IMP_EXP_C char * strchr (const char * , int );_MSL_IMP_EXP_C char * strrchr(const char * , int );_MSL_IMP_EXP_C char * strpbrk(const char * , const char * );_MSL_IMP_EXP_C size_t strspn (const char * , const char * );_MSL_IMP_EXP_C size_t strcspn(const char * , const char * );_MSL_IMP_EXP_C char * strtok (      char * , const char * );_MSL_IMP_EXP_C char * strstr(const char * , const char * );_MSL_IMP_EXP_C char * strerror(int);char * __strerror(int , char *);void * __memrchr(const void *, int, size_t);#if (__dest_os == __be_os)/* prototypes for some useful but non-standard string routines */_MSL_IMP_EXP_C int			strcasecmp (const char *, const char *);_MSL_IMP_EXP_C int			strncasecmp(const char *, const char *, size_t );_MSL_IMP_EXP_C char *			strdup(const char *);#endif#ifdef __cplusplus	} /* extern "C" */#endif#if defined(__cplusplus) && __embedded_cplusplus == 0   /* hh  971206*/		inline	char*	strchr(char* s, int c)	{		return strchr(static_cast<const char*>(s), c);	}	inline	char*	strpbrk(char* s1, const char* s2)	{		return strpbrk(static_cast<const char*>(s1), s2);	}	inline	char*	strrchr(char* s, int c)	{		return strrchr(static_cast<const char*>(s), c);	}	inline	char*	strstr(char* s1, const char* s2)	{		return strstr(static_cast<const char*>(s1), s2);	}	inline	void*	memchr(void* s, int c, size_t n)	{		return memchr(static_cast<const void*>(s), c, n);	}#endif#ifdef __cplusplus	#ifdef _MSL_USING_NAMESPACE		}	#endif#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif /* RC_INVOKED */#endif/*     Change record MW-mm 960927a Inserted setting of __dest_os to __mac_os when not otherwise set. hh  971206  Changed file name to cstring (from string.h) and added namespace support. hh  971217   commented out inline definitions.  C++ must use C libs hh  971230   added RC_INVOKED wrapper hh  980122   added <cstddef> for wchar_t bs  990105   changed prototype for strncasecmp vss 990121  removed powerTV wrapper mm 990217 Deleted #include of cstddef and replaced by #include <wchar_t.h> blc 990312  removed wchar_t functions and reference (they are in wstring.h now) hh 990525  Fixed 68K C++ / namespace bug with strlen and strcpy hh 991112  Put inline definitions back in as extern "C++" hh 991112  Put non-const versions of str and mem functions in per C++ standard. cc 000515	Dest os the #include of extras.h */
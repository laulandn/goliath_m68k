// ===========================================================================//	UAnimateCursor.h			PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub#ifndef _H_UAnimateCursor#define _H_UAnimateCursor#pragma once#include <PP_Prefix.h>#include <LPeriodical.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantclass LStream;// ---------------------------------------------------------------------------#pragma mark === UAnimateCursor ===class UAnimateCursor {public:							UAnimateCursor(								ResIDT		inAcurID,								UInt32		inTickInterval = 10UL,								UInt32		inIntialDelay = 120UL );	virtual					~UAnimateCursor();	virtual	void			Suspend( ResIDT inNewCursorID = 0 );	virtual	void			Resume();	virtual	void			Reset();	virtual	void			Tick();protected:		ResIDT				mAcurID;		UInt32				mTickInterval;		UInt32				mLastTick;		UInt32				mStartTick;		SInt32				mNextFrameIndex;		UInt32				mInitialDelay;		Handle				mCursorTableH;		SInt16				mNumCursors;		Boolean				mIsRepeater;	virtual	void			InitAnimCursor();private:			// defensive programming							UAnimateCursor();							UAnimateCursor( const UAnimateCursor &inOriginal );							UAnimateCursor( LStream *inStream );			UAnimateCursor& operator=(const UAnimateCursor &inOriginal );};// ---------------------------------------------------------------------------#pragma mark === UPeriodicalCursor ===class UPeriodicalCursor : public UAnimateCursor,							public LPeriodical{public:							UPeriodicalCursor(								ResIDT		inAcurID,								UInt32		inTickInterval = 10UL,								UInt32		inIntialDelay = 120UL,								Boolean		inIsRepeater = true );	virtual					~UPeriodicalCursor();	virtual	void			Suspend( ResIDT inNewCursorID = 0 );	virtual	void			Resume();protected:	virtual	void			SpendTime( const EventRecord &inMacEvent );private:			// defensive programming							UPeriodicalCursor();							UPeriodicalCursor( const UPeriodicalCursor &inOriginal );							UPeriodicalCursor( LStream *inStream );			UPeriodicalCursor& operator=(const UPeriodicalCursor &inOriginal );};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif /* _H_UAnimateCursor */
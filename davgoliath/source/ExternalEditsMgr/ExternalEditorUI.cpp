/* ================================================================================================== * ExternalEditorUI.cpp															    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */ #ifndef __ExternalEditorUI_h__#include "ExternalEditorUI.h"#endif#include <LStaticText.h>#include <LCheckBox.h>#ifndef __ExternalEditContext_h__#include "ExternalEditContext.h"#endif#ifndef __ExternalEditorManager_h__#include "ExternalEditorManager.h"#endif#ifndef __CDAVTableApp_h__ #include "CDAVTableApp.h"#endif#ifndef __CDAVLIBUTILS_H__#include <CDAVLibUtils.h>#endif#ifndef __CSAVETOWEBTHREAD_H__#include "CSaveToWebThread.h"#endif#ifndef __AppLauncher_h__#include "AppLauncher.h"#endif#include "HelperAppDialog.h"#include "LocalEditsDialog.h" #include <vector>#include <stdio.h>#include <cassert>const int kFileChangedDlog = 1415;const MessageT kViewInFinderMsg = 'VFND';const PaneIDT   kTextViewID = 'TEXT';const PaneIDT   kRelinquishLockCheckID = 'STOP';bool PromptForEdit(const std::string& inURI, const FSSpec* inEditSpec, bool& outRelinquishLock);static bool gRegisteredHelperAppDialog = false;static bool gRegisteredLocalEditsDialog = false;// ---------------------------------------------------------------------------------//		¥ EditHelperApps// ---------------------------------------------------------------------------------//	void ExternalEditorUI::EditHelperApps() {	if (!gRegisteredHelperAppDialog) {		RegisterClass_(HelperAppDialog);		gRegisteredHelperAppDialog = true;	}		HelperAppDialog::DoDialogLoop();}// ---------------------------------------------------------------------------------//		¥ CheckForExternalEdits// ---------------------------------------------------------------------------------//	void ExternalEditorUI::CheckForExternalEdits() {	std::list<ExternalEditContext*> updatedItems;	ExternalEditorManager::GetExternalEditsMgr()->GetModifiedItems(updatedItems);		for (std::list<ExternalEditContext*>::iterator iter = updatedItems.begin(); iter != updatedItems.end(); ++iter) {		bool relinquishLock;		if (PromptForEdit((*iter)->GetURL(), (*iter)->GetFSSpec(), relinquishLock)) {			(*iter)->ResetFileEditTime();			CSaveToWebThread *thread = new CSaveToWebThread((*iter)->GetContext(), (*iter)->GetWnd(), 	                   (*iter)->GetURL(), *(*iter)->GetFSSpec(), (*iter)->GetEncodeResources(),	                   relinquishLock);			thread->Resume();		}	}}// ---------------------------------------------------------------------------------//		¥ ViewLocalEdits// ---------------------------------------------------------------------------------//	void ExternalEditorUI::ViewLocalEdits() {	if (!gRegisteredLocalEditsDialog) {		RegisterClass_(LocalEditsDialog);		gRegisteredLocalEditsDialog = true;	}		LocalEditsDialog::DoDialogLoop();}// ---------------------------------------------------------------------------------//		¥ PromptForEdit// ---------------------------------------------------------------------------------//	bool PromptForEdit(const std::string& inURI, const FSSpec* inEditSpec, bool& outRelinquishLock) {	PP_PowerPlant::StDialogHandler dialog(kFileChangedDlog, GetApplicationInstance());	LDialogBox *dlog = dynamic_cast<LDialogBox*>(dialog.GetDialog());		LStaticText *text = dynamic_cast<LStaticText*>(dlog->FindPaneByID(kTextViewID));	LCheckBox *stop = dynamic_cast<LCheckBox*>(dlog->FindPaneByID(kRelinquishLockCheckID));		assert(text != NULL);	assert(stop != NULL);	if (text == NULL || stop == NULL)		return false;			Size textLen;	text->GetText(NULL, 0, &textLen);	std::vector<char> origText(textLen+1);	text->GetText(&(origText[0]), textLen, NULL);	origText.push_back(NULL);		std::string nodeName;	CURLStringUtils::GetURINodeName(inURI, nodeName);	std::vector<char> newText(textLen + nodeName.size() + 1);	sprintf(&newText[0], &origText[0], nodeName.c_str());		text->SetText(&newText[0], newText.size());	dlog->Show();		bool ok = false;	while (true) {		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			break;		else if (hitMessage == PP_PowerPlant::msg_OK) {			ok = true;			break;		} else if (kViewInFinderMsg == hitMessage) {			AppLauncher::RevealFileInFinder(inEditSpec);		}	}	outRelinquishLock = (stop->GetValue()==1);	return ok;}// ---------------------------------------------------------------------------------//		¥ PromptForEdit// ---------------------------------------------------------------------------------//	bool ExternalEditorUI::HaveAtLeastOneEdit() {	std::list<ExternalEditContext*> updatedItems;	ExternalEditorManager::GetExternalEditsMgr()->GetModifiedItems(updatedItems);	return (updatedItems.size() > 0);}
// ===========================================================================//	UDrawingState.h				PowerPlant 2.1		©1993-2000 Metrowerks Inc.// ===========================================================================#ifndef _H_UDrawingState#define _H_UDrawingState#pragma once#include <URegions.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------extern const RGBColor	Color_White;extern const RGBColor	Color_Black;// ---------------------------------------------------------------------------#pragma mark UQDGlobalsclass	UQDGlobals {public:	static void			InitializeToolbox();	static GrafPtr		GetCurrentPort();	static WindowPtr	GetCurrentWindowPort();	static SInt32		GetRandomSeed();	static void			SetRandomSeed( SInt32 inRandSeed );	static Cursor*		GetArrow( Cursor* outArrow );	static void			SetArrow( const Cursor* inArrow );	static Pattern*		GetDarkGrayPat( Pattern* outPattern );	static Pattern*		GetLightGrayPat( Pattern* outPattern );	static Pattern*		GetGrayPat( Pattern* outPattern );	static Pattern*		GetBlackPat( Pattern* outPattern );	static Pattern*		GetWhitePat( Pattern* outPattern );#if PP_Target_Classic	static void			InitializeToolbox(QDGlobals*	inQDGlobals);	static QDGlobals*	GetQDGlobals()		{ return sQDGlobals; }	static void			SetQDGlobals(QDGlobals*	inQDGlobals)							{								sQDGlobals = inQDGlobals;							}	static void			SetCodeResourceQDGlobals();private:	static QDGlobals*	sQDGlobals;#endif // PP_Target_Classic};// ===========================================================================//	UQDGlobals inline functionsinline SInt32UQDGlobals::GetRandomSeed(){	#if PP_Target_Carbon		return ::GetQDGlobalsRandomSeed();	#else		return sQDGlobals->randSeed;	#endif}inline voidUQDGlobals::SetRandomSeed( SInt32 inRandSeed ){	#if PP_Target_Carbon		::SetQDGlobalsRandomSeed(inRandSeed);	#else		sQDGlobals->randSeed = inRandSeed;	#endif}inline Cursor*UQDGlobals::GetArrow( Cursor* outArrow ){	#if PP_Target_Carbon		return ::GetQDGlobalsArrow(outArrow);	#else		*outArrow = sQDGlobals->arrow;		return outArrow;	#endif}inline voidUQDGlobals::SetArrow( const Cursor* inArrow ){	#if PP_Target_Carbon		::SetQDGlobalsArrow(inArrow);	#else		sQDGlobals->arrow = *inArrow;	#endif}inline Pattern*UQDGlobals::GetDarkGrayPat( Pattern* outPattern ){	#if PP_Target_Carbon		return ::GetQDGlobalsDarkGray(outPattern);	#else		*outPattern = sQDGlobals->dkGray;		return outPattern;	#endif}inline Pattern*UQDGlobals::GetLightGrayPat( Pattern* outPattern ){	#if PP_Target_Carbon		return ::GetQDGlobalsLightGray(outPattern);	#else		*outPattern = sQDGlobals->ltGray;		return outPattern;	#endif}inline Pattern*UQDGlobals::GetGrayPat( Pattern* outPattern ){	#if PP_Target_Carbon		return ::GetQDGlobalsGray(outPattern);	#else		*outPattern = sQDGlobals->gray;		return outPattern;	#endif}inline Pattern*UQDGlobals::GetBlackPat( Pattern* outPattern ){	#if PP_Target_Carbon		return ::GetQDGlobalsBlack(outPattern);	#else		*outPattern = sQDGlobals->black;		return outPattern;	#endif}inline Pattern*UQDGlobals::GetWhitePat( Pattern* outPattern ){	#if PP_Target_Carbon		return ::GetQDGlobalsWhite(outPattern);	#else		*outPattern = sQDGlobals->white;		return outPattern;	#endif}// ---------------------------------------------------------------------------#pragma mark StGrafPortSaverclass	StGrafPortSaver {public:				StGrafPortSaver ();				StGrafPortSaver (GrafPtr inGrafPtr);				~StGrafPortSaver();private:	GrafPtr		mGrafPtr;};// ---------------------------------------------------------------------------#pragma mark StColorStateclass	StColorState {public:				StColorState ();				~StColorState();	void		Save();	void		Restore();	static void	Normalize();private:	RGBColor	mForegroundColor;	RGBColor	mBackgroundColor;};// ---------------------------------------------------------------------------#pragma mark StColorPenStateclass	StColorPenState {public:				StColorPenState ();				~StColorPenState();	void		Save();	void		Restore();	static void	Normalize();	static void	SetGrayPattern();private:	StColorState	mColorState;	PenState		mPenState;};// ---------------------------------------------------------------------------#pragma mark StTextStateclass	StTextState {public:				StTextState ();				~StTextState();	void		Save();	void		Restore();	static void	Normalize();private:	SInt16		mFontNumber;	SInt16		mSize;	SInt16		mStyle;	SInt16		mMode;};// ---------------------------------------------------------------------------#pragma mark StClipRgnStateclass	StClipRgnState {public:				StClipRgnState ();				StClipRgnState (const Rect&		inClipRect);				StClipRgnState (RgnHandle		inClipRgnH);				~StClipRgnState();	void		Save()			{ ::GetClip(mClipRgn); }	void		Restore()		{ ::SetClip(mClipRgn); }	void		ClipToIntersection(RgnHandle	inRgnH);	void		ClipToIntersection(const Rect&	inRect);	void		ClipToDifference(RgnHandle		inRgnH);	void		ClipToDifference(const Rect&	inRect);	static void	Normalize();	static void	SectWithCurrent(RgnHandle		inRgnH);	static void	SectWithCurrent(const Rect&		inRect);	static void	DiffWithCurrent(RgnHandle		inRgnH);	static void	DiffWithCurrent(const Rect&		inRect);	void		ClipToIntersectionRgn(RgnHandle inRgnH)		// Old API					{						ClipToIntersection(inRgnH);					}private:	StRegion	mClipRgn;};// ---------------------------------------------------------------------------#pragma mark StPortOriginStateclass	StPortOriginState {public:				StPortOriginState (GrafPtr inGrafPtr);				~StPortOriginState();	void		Save(GrafPtr inGrafPtr);	void		Restore();	static void	Normalize()		{ ::SetOrigin(0, 0); }private:	GrafPtr		mSaveGrafPtr;		// Port upon entry	GrafPtr		mNewGrafPtr;		// New Port to make current	Point		mOrigin;			// Origin of new Port};// ---------------------------------------------------------------------------#pragma mark StColorPortStateclass	StColorPortState {public:				StColorPortState (GrafPtr inGrafPtr);				~StColorPortState();	void		Save(GrafPtr inGrafPtr);	void		Restore();	static void	Normalize();private:	StPortOriginState	mPortOriginState;	StColorPenState		mColorPenState;	StTextState			mTextState;	StClipRgnState		mClipRgnState;};// ---------------------------------------------------------------------------#pragma mark StHidePenclass	StHidePen {public:				StHidePen ()		{ ::HidePen(); }				~StHidePen();};// ---------------------------------------------------------------------------#pragma mark StVisRgn#if PP_Target_Classic	// Changing the visRgn is not allowed under Carbonclass	StVisRgn {public:				StVisRgn (GrafPtr		inPort);				StVisRgn (GrafPtr		inPort,						  RgnHandle		inRgnH);				StVisRgn (GrafPtr		inPort,						  const Rect&	inRect);				~StVisRgn();	RgnHandle	Restore	 ();	void		Set		 (RgnHandle		inRgnH);private:	GrafPtr		mGrafPtr;	RgnHandle	mSaveVisRgnH;	Point		mSaveTopLeft;};#endif // PP_Target_Classic// ---------------------------------------------------------------------------#pragma mark StCQDProcsStateclass	StCQDProcsState	{public:				StCQDProcsState(						bool		inSetProcs,						CQDProcs*	inCQDProcs,						CGrafPtr	inPort);				~StCQDProcsState();	void		SetProcs(						bool		inSetProcs,						CQDProcs*	inCQDProcs);	void		ResetProcs();protected:	CQDProcs*	mCQDProcs;	CGrafPtr	mPort;	bool		mSetProcs;};// ---------------------------------------------------------------------------#pragma mark StGDeviceSaverclass	StGDeviceSaver {public:				StGDeviceSaver();				~StGDeviceSaver();protected:	CGrafPtr	mSavePort;	GDHandle	mSaveDevice;};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
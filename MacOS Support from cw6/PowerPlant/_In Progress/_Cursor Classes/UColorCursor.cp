// ===========================================================================//	UColorCursor.cp				PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub////	A set of utility classes and routines for COLOR cursor manipulation and//	control. Works in conjunction with UCursor, but provided seperately for//	those that do not desire color cursor support.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UColorCursor.h>#include <UCursor.h>#include <UDrawingState.h>#include <TArrayIterator.h>PP_Begin_Namespace_PowerPlant#pragma mark === UColorCursor ===CCrsrHandle UColorCursor::sColorCursorH = nil;ResIDT		UColorCursor::sCurrentColorID = 0;//----------------------------------------------------------------------------//		¥ SetTheCursor							[static, public]//----------------------------------------------------------------------------//	Given the ResIDT for a 'crsr' resource, set the cursor to that. If the//	cursor is currently hidden, SetTheCursor will not make it visible. There is//	no Apple-supported/recommend way to determine cursor visibility.////	You could refer to the "develop" Q&A section from the June 1997 issue//	of MacTech Magazine for information on how to determine cursor visibility,//	but use this at your own risk.voidUColorCursor::SetTheCursor(	ResIDT	inCursID ){	// if inCursID is zero, we'll take that to be a desire for the	// the arrow (which technically isn't zero, but we'll interpret	// it that way)	if ( inCursID == 0 ) {		UCursor::SetTheCursor(0);		if ( sColorCursorH != nil ) {			::DisposeCCursor(sColorCursorH);			sColorCursorH = nil;		}		sCurrentColorID = 0;	} else {		// dispose of the old cursor		// if we're using the same cursor, no need to dispose and		// reallocate (saves time and reduces flicker).		if ( inCursID != sCurrentColorID ) {			if ( sColorCursorH != nil ) {				::DisposeCCursor(sColorCursorH);				sColorCursorH = nil;			}			// try to load the cursor			sColorCursorH = ::GetCCursor( inCursID );		}		if ( sColorCursorH == nil ) {			// if the cursor fails to load, hopefully it's just			// programmer error, so we'll signal to that extent.			// We'll look for an error here to help debugging.			OSErr err = ::ResError();			if ( err == noErr ) {				err = resNotFound;			}			SignalStringLiteral_("Color Cursor not found");			// and just set to the arrow			UCursor::SetTheCursor(0);			sCurrentColorID = 0;		} else {			// all's well. Set and go.			::SetCCursor( sColorCursorH );			sCurrentColorID = inCursID;		}	}}#pragma mark === StColorCursor ===//----------------------------------------------------------------------------//		¥ StColorCursor//----------------------------------------------------------------------------//	A class to temporarily change the cursor to something else.////	Upon entry, specify the ResIDT of the 'crsr' to change to. Upon exit,//	either the old cursor is restored or we default to the arrow.////	By default, StColorCursor will restore the original cursor. Unlike//	StCursor however, you MUST specify the 'crsr' to change to.StColorCursor::StColorCursor(	ResIDT		inCursID,	Boolean		inRestoreOriginal ){	// save off the settings	if ( inRestoreOriginal ) {		mRestoreID = UColorCursor::GetCurrentID();	} else {		mRestoreID = 0;	}	// and set the cursor	UColorCursor::SetTheCursor( inCursID );}StColorCursor::~StColorCursor(){	UColorCursor::SetTheCursor( mRestoreID );}PP_End_Namespace_PowerPlant
/* ================================================================================================== * ExternalEditContext.h															    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#ifndef __ExternalEditContext_h__#include "ExternalEditContext.h"#endif#ifndef __CDAVCONTEXT_H__#include <CDAVContext.h>#endif#include "CDAVTableWindow.h"#include <string.h>// ---------------------------------------------------------------------------------//		¥ ExternalEditContext()// ---------------------------------------------------------------------------------//ExternalEditContext::ExternalEditContext(const CDAVContext* inContext,		 const std::string& inTheURL, const FSSpec& inTheSpec, const CDAVTableWindow* inTableWindow, bool encodeRes) :	mFileSpec(inTheSpec),	mURL(inTheURL),	mContext(new CDAVContext(*inContext)),	mOriginatingWnd(inTableWindow),	mEncodingDisabled(encodeRes){	ResetFileEditTime();}// ---------------------------------------------------------------------------------//		¥ ExternalEditContext()// ---------------------------------------------------------------------------------//ExternalEditContext::ExternalEditContext(const CDAVContext* inContext, const std::string& inTheURL, const FSSpec& inTheSpec, bool encodeRes, UInt32 inLastModTime):	mFileSpec(inTheSpec),	mURL(inTheURL),	mContext(new CDAVContext(*inContext)),	mOriginatingWnd(NULL),	mEncodingDisabled(encodeRes),	mLastEditTime(inLastModTime){}// ---------------------------------------------------------------------------------//		¥ ~ExternalEditContext()// ---------------------------------------------------------------------------------//ExternalEditContext::~ExternalEditContext() {}// ---------------------------------------------------------------------------------//		¥ FileHasChanged()// ---------------------------------------------------------------------------------//bool ExternalEditContext::FileHasChanged() {	return GetFSSpecModDate(mFileSpec) != mLastEditTime;}// ---------------------------------------------------------------------------------//		¥ ResetFileEditTime()// ---------------------------------------------------------------------------------//void ExternalEditContext::ResetFileEditTime() {	mLastEditTime = GetFSSpecModDate(mFileSpec);}// ---------------------------------------------------------------------------------//		¥ GetFSSpecModDate()// ---------------------------------------------------------------------------------//UInt32 ExternalEditContext::GetFSSpecModDate(FSSpec& inSpec) {		CInfoPBRec pb;	memset(&pb, 0, sizeof(CInfoPBRec));	pb.hFileInfo.ioNamePtr = inSpec.name;	pb.hFileInfo.ioVRefNum = inSpec.vRefNum;	pb.hFileInfo.ioDirID = inSpec.parID;		OSErr err = PBGetCatInfoSync (&pb);	if (noErr != err)		return 0;			return	pb.hFileInfo.ioFlMdDat;}// ---------------------------------------------------------------------------------//		¥ IsSameResource()// ---------------------------------------------------------------------------------//bool ExternalEditContext::IsSameResource(const std::string& inServer, const std::string& inURI) {	return (mContext->GetServerName().compare(inServer) ==0 && mURL.compare(inURI)==0);}
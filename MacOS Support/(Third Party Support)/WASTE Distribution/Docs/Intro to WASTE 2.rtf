{\rtf1\mac{\fonttbl{\f0\fswiss Helvetica;}{\f1\froman Palatino;}{\f2\fmodern Courier;}}{\colortbl\red0\green0\blue0;\red0\green0\blue212;\red255\green191\blue86;\red24\green34\blue205;}{\info{\title Intro to WASTE 2}{\subject WASTE, the WorldScript-aware Styled Text Engine}{\author Marco Piovanelli}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440{\*\macprintrecord 00030000004800480000000002d80228ffe1ffe202f902460347052803fc00020000004800480000000002d80228000100000064000000010003030300000001270f00010001000000000000000000000000680800190190000000000000000000000000000000000000000000000000000000000000000067726f77000100004000000000000000}\deftab480{\pard\plain\f0\fs72\cf0\qc\sb360\sa480 {\b Intro to WASTE 2\par}}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b What\'d5s New\par}}{\pard\plain\f0\fs36\cf0\qj\sa120\fi120 {\b {\pict\macpict\picw32\pich32\picscalex100\picscaley100 0c120000000000200020001102ff0c00ffffffff0000000000000000002000000020000000000000001e0001000a00000000002000200099802000000000002000200000000000000000004800000048000000000008000100080000000000004efc0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000000000000200020000000000020002000000094000000000020002000000001001c7fff000100000001001c001d7fff000900020003001e001f7fff000a00010002001d001e001f00207fff000b000000017fff0015000000017fff001600010002001d001e001f00207fff001700020003001e001f7fff001b001d001f7fff001c001f00207fff001e001f00207fff001f00000001001e001f7fff00200001001e7fff7fff060000e6fffd000900ffe70001f6fffe000e01ff00fef6fefdeef601f9fffe000e01ff00fef6f6fdf6f601f9fffe001501ff00fef6fefd0008fb010108fdf7f601f9fffe001401ff00fef6fefdf9080233fdfdf9f601f9fffe001301ff00fef6fefdf7080133fdfaf601f9fffe001804ff00f9f6f6fefdfc08fd3303080833fdfbf601f9fffe001d04ff00fff9f6fefd0033fe080033fdff0433330833fdfcf601f9fffe002004ffff00ff00fef60efd330808ffc07fc07fffff3333fdfafdf604f9ff00ff001e04ff0000ff00fef605fffd3308fd7ffcc003fffffdfafdf604f9ffff00ff1ffe0013ff00f6f6ff547ffd3308fdc0c02ac02ac0c0fffffdf604f9ff00f9ff1efe0015ff00f6ff2ac02ac0fd3308fdc0c02ac02ac02ac0fffffcf601f9ff1ffe000bff00ff2ac02ac02ac0fd33fdfec0072ac02ac02ac02afffdf601f9ff1efe000aff00ffc0ffc02ac02ac0fdfec0072ac02ac02ac02afffcf601f9ff1efe0015ff00ff54c054ff2ac02ac02ac02ac02ac02ac02affabfcf601f9ff1efe0015ff00ffc054c054c0ffc02ac02ac02ac02ac02affababfcf601f9ff1ffe0016ff00ff54c054c054c054ff2ac02ac02afd2affababc0fffdf601f9ff20fe0017ff00f6ffffc054c054c054c0ffc02afd01fdababc0fffbfafef601f9ff20fe0001ff00fef617ffff54c054c054c054fffd0801fdc0fdfbfaf6f6f9f6f9ff1efe0001ff00fcf615ffffc054c054c054ff330808fdfbfaf6f6f9fff9f9ff1e04ff0000ff00fbf60cfdffff54c054c0fdff330808fdfef604f9fffff9ff1e04ffff00ff00fbf609fd0808ffffc054fdc0fffe0807fdf6f6f9ff00ff001b04ff00ff0000fbf601fd33fe08fdff010801fe0803fdfdf9fffe001600fffe00f9f601fd33fd08fe01fd0803fdfdf9fffe001201ff00f6f602fd3333f80803fdfdf9fffe001201ff00f5f602fdfd33f90803fdfdf9fffe001101ff00f3f600fdf93306fdfdf9fffcfc000c01ff00f2f6f7fd01f9fffefc0e01ff00f1f6fafa03fdfdf9fffefc0a01fff6e7f903fffcfc00090000e6ff03fcfc000000ff}}{\b  }{\f1\fs24 WASTE 2 is a new release series of the popular text engine for the Mac OS that adds several new significant features while striving to remain compatible with the previous version, WASTE 1.3. The new features include:\par}}{\pard\plain\f1\fs24\cf0\ql\sa60\li480\ri240\fi-240 \'a5\tab Paragraph-level formatting.\par\'a5\tab Additional character styles.\par\'a5\tab Multiple undo/redo.\par\'a5\tab Unicode translation.\par\'a5\tab New APIs for printing and string matching.\par\'a5\tab Support for Mac OS X.\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This alpha release of WASTE 2.1 comes both in {\b shared library} form (PowerPC, CFM68K, Carbon) and as a {\b static library} (classic PowerPC, CFM68K, classic 68K, CFM Carbon and Mach-O Carbon). The included C/C++ header file requires version 3.4 of Apple\'d5s Universal Headers. Pascal interface files and CFM glue are also included.\parWASTE 2 requires version 7.1 or newer of the system software.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Licensing Conditions\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE 2 comes with a new licensing model.\parYou are free to develop, use and distribute to end users binaries built using the WASTE 2 static libraries, at no cost. Moreover, you are free to use and distribute to end users the \'d2WASTELib\'d3 shared library, as included in the standard distribution, at no cost.\parOn the other hand, use of the source code in {\b commercial applications} requires a {\b source code licensing fee} of $100, which entitles you to incorporate the source code in your own software and modify it according to your own needs.\parThis license is non-exclusive and non-transferable and does not allow you to re-distribute the source code to third parties, either in its original form or in any modified form. Also, the old WASTE 1.3 licensing conditions still apply, so:\par}{\pard\plain\f1\fs24\cf0\qj\sa60\li480\ri240\fi-240 \'a5\tab All WASTE-using applications must include the following credit line in their about box and/or documentation:\par}{\pard\plain\f1\fs24\cf0\qc\sa120\fi120 WASTE Text Engine \'a9 1993-2002 Marco Piovanelli\par}{\pard\plain\f1\fs24\cf0\qj\sa60\li480\ri240\fi-240 \'a5\tab I have to right to request one fully registered complimentary copy of the finished application.\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Use of source code in {\b freeware applications} is free. Shareware with a single user license costing up to $10 is considered freeware with respect to this license, whereas shareware costing more than $10 is treated as commercial software.\parSource code licensing fees for WASTE 2.1 are collected by {\b Kagi}.\par}{\pard\plain\f2\fs24\cf1\qc\sa120\fi120 <http://www.kagi.com/>{\f1\cf0 \par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 You can pay using the enclosed {\b Register} application or you can pay online, using your credit card, at:\par}{\pard\plain\f2\fs24\cf1\qc\sa120\fi120 <http://order.kagi.com/?MP>{\f1\cf0 \par}}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Paragraph-level Formatting\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 In WASTE 2, each paragraph has its own set of formatting attributes that can be set independently of other paragraphs. These attributes are similar to styled text attributes like font, size and color, but are applied to whole paragraphs rather than individual characters. Currently, the list of paragraph attributes includes:\par}{\pard\plain\f1\fs24\cf0\ql\sa60\li480\ri240\fi-240 \'a5\tab Alignment (flush left, center, flush right, justify).\par\'a5\tab Line spacing (extra vertical space between lines).\par\'a5\tab Left indent.\par\'a5\tab Right indent.\par\'a5\tab First line indent.\par\'a5\tab Space before (extra vertical space above paragraph).\par\'a5\tab Space after (extra vertical space below paragraph).\par\'a5\tab Bottom border.\par\'a5\tab Dominant line direction (for bidirectional text).\par\'a5\tab Tabs.\par}{\pard\plain\f1\fs24\cf0\ql\sa60\li480\ri240\fi-200 \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 A complete set of paragraph attributes is referred to as a {\b ruler}. WASTE maintains paragraph attributes internally in two new data structures, a {\b ruler table} (which keeps a single copy of each unique ruler, even if it\'d5s used multiple times in the text) and a {\b paragraph-run array} (which maps one of more successive paragraphs to a ruler). If you don\'d5t use paragraph formatting at all, the memory overhead involved by these new data structures is a handful of bytes, and is independent of the number of paragraphs in the text.\parParagraph formatting information can be exchanged through the clipboard or drag-and-drop, using a new scrap format defined by WASTE 2. This new scrap format is both {\b memory efficient} and {\b extensible}. It\'d5s memory efficient (unlike, say, the \'d2styl\'d3 format used by TextEdit) because each unique ruler appears only once in the scrap. It\'d5s extensible because both ruler fields and data types are identified by four-letter tags, so that a newer version of WASTE can specify additional attributes without disrupting older versions (which will simply skip attributes they don\'d5t recognize).\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Multiple Undo/Redo\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE 2 maintains an unlimited {\b undo stack} (and a corresponding {\b redo stack}) that allow your application to offer a multiple undo/redo feature. Also, the undo/redo stacks hold additional state for paragraph-level formatting.\parFor compatibility with old applications, you have to explicitly enable multiple undo by specifying {\f2 weDoMultipleUndo} in your call to {\f2 WENew}. In multiple undo mode, you should use {\f2 WEGetIndUndoInfo} instead of {\f2 WEGetUndoInfo} and you should call {\f2 WERedo} when you mean redo. When multiple undo is disabled, you can continue using {\f2 WEUndo} for both undos and redos.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Additional Character-level Formatting\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE 2 supports additional styles not available in WASTE 1.3 or TextEdit, like {\strike strikethrough}, vertical shift (which can be used to implement {\up6 super}script and {\dn6 sub}script) and {\highlight2 background color}.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b New Scrap Formats\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE 2 introduces four new scrap formats suitable for storing formatting data in files, drags or the clipboard. These new scraps formats have the following features:\par}{\pard\plain\f1\fs24\cf0\qj\sa60\li480\ri240\fi-240 \'a5\tab They preserve the richer formatting model supported by WASTE 2.\par\'a5\tab They\'d5re memory-efficient because they store each unique style or ruler only once per scrap (unlike, say, the TextEdit \'d4styl\'d5 scrap).\par\'a5\tab They store styles and rulers separately from the offsets to the text ranges to which they\'d5re applied, so that the text offsets are easily remapped without touching the styles when the underlying text is converted from one encoding to another.\par\'a5\tab They\'d5re extensible. Styles and rulers are stored in a tree-like structure modeled after (in fact, identical to) Apple event lists and records. Each attribute is identified by a four-letter tag. When new attributes are added to future versions of WASTE, older programs can still parse the tags they understand and skip the ones they don\'d5t.\par\'a5\tab The new style table scrap stores font names rather than font family numbers, obviating the need for a separate font table (the \'d4FISH\'d5 scrap used by WASTE 1.3).\par\'a5\tab The new style table scrap can optionally describe embedded objects, obviating the need for a separate \'d4SOUP\'d5 scrap.\par\'a5\tab They can be used with both text in traditional Mac OS encodings (\'d4TEXT\'d5), and Unicode text (\'d4utxt\'d5).\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Although these new scrap formats are now the preferred means of storing formatting attributes, WASTE 2 still supports all of the formats used by TextEdit and WASTE 1.3.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Unicode Translation\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 New APIs in WASTE 2 allow you to exchange Unicode-encoded text with external sources. Even if this version still stores text internally using traditional Mac OS encodings, you can insert Unicode text and convert any text range back to Unicode, allowing seamless interchange with other applications and platforms that support Unicode.\parYou can get Unicode text in either UTF-8 or UTF-16 format, in big-endian or little-endian byte order, with or without a leading byte-order mark.\parWhen inserting unstyled Unicode text, WASTE will consider every installed font in an effort to represent the source characters in one of the available traditional Mac OS encodings. WASTE can be instructed to automatically detect byte-order marks and perform endian-swapping as necessary.\parUnicode text doesn\'d5t have to be unstyled. You can extract Unicode text with a full complement of formatting scraps (preserving character-level formatting, paragraph-level formatting and embedded objects), using the same flexible format used for non-Unicode text (but with text offsets suitably remapped).\parA future version of WASTE (WASTE 3.0?) may ultimately abandon WorldScript services for its low-level drawing and measuring routines in favor of {\b ATSUI} (Apple Type Services for Unicode Imaging).\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b System Requirements\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE 2 requires {\b Mac OS version 7.1} or newer. System 7.0 is no longer supported. Some features, like Unicode translation, are not available to classic 68K clients.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b An overview of new APIs in WASTE 2.0\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This section briefly discusses some of the new APIs available in WASTE 2.0.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WESetAttributes\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WESetAttributes\par  (\par    SInt32\tab inRangeStart,\par    SInt32\tab inRangeEnd,\par    ItemCount\tab inAttributeCount,\par    const WESelector\tab inAttributeSelectors [ ],\par    const void * const\tab inAttributeValues [ ],\par    const ByteCount\tab inAttributeValueSizes [ ],\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Use this to apply any number of formatting attributes to any text range as an atomic, undoable action. Formatting attributes are specified using four-letter tags, and include both character-level attributes like font, size and text color, and paragraph-level attributes like alignment and indents. This API replaces {\f2 WESetStyle}.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WESetOneAttribute\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WESetOneAttribute\par  (\par    SInt32\tab inRangeStart,\par    SInt32\tab inRangeEnd,\par    WESelector\tab inAttributeSelector,\par    const void *\tab inAttributeValue,\par    ByteCount\tab inAttributeValueSize,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This is a conveniently simplified version of {\f2 WESetAttributes} that can be used when there\'d5s only one attribute to set.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEGetAttributes\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WEGetAttributes\par  (\par    SInt32\tab inOffset,\par    ItemCount\tab inAttributeCount,\par    const WESelector\tab inAttributeSelectors [ ],\par    void * const\tab outAttributeValues [ ],\par    const ByteCount\tab inAttributeValueSizes [ ],\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120   Use this to inspect formatting attributes for any given position in the text. The four-letter tags recognized by this API are mostly the same ones used by {\f2 WESetAttributes}.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEMatchAttributes\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WEMatchAttributes\par  (\par    SInt32\tab inRangeStart,\par    SInt32\tab inRangeEnd,\par    WESelector\tab inAttributeSelector,\par    ByteCount\tab inAttributeValueSize,\par    ItemCount\tab inArraySize,\par    const void *\tab inValueArray,\par    Boolean\tab outWhichValuesArePresent [ ],\par    Boolean *\tab outIsContinuous,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120   Use this to match a set of homogeneous values for a specified attribute (i.e., an array of fonts, or an array of text colors) against existing attribute values over a given range, and to determine whether the specified attribute is continuous.\parThis API obsoletes {\f2 WEContinuousStyle}.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEStreamRange\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WEStreamRange\par  (\par    SInt32\tab inRangeStart,\par    SInt32\tab inRangeEnd,\par    FlavorType\tab inDataFlavor,\par    OptionBits\tab inFlags,         /* set to zero! */\par    Handle\tab inData,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 You can use this new API to extract several pieces of information from any text range. Valid selectors for the {\f2 inDataFlavor} parameter include \'d4TEXT\'d5, \'d4styl\'d5, \'d4SOUP\'d5, \'d4FISH\'d5, \'d4WEpf\'d5, \'d4WEru\'d5, \'d4WEcf\'d5, \'d4WEst\'d5, \'d4utxt\'d5, \'d4UTF8\'d5 and \'d4STXT\'d5. The first three selectors return the same information previously obtainable using {\f2 WECopyRange} (that is, a copy of the raw text, a TextEdit-compatible style scrap, and a \'d2soup\'d3 of embedded objects). The \'d4FISH\'d5 selector creates a font table describing the unique fonts used in the specified range.\parThe \'d4WEpf\'d5 and \'d4WEru\'d5 selectors create paragraph-level formatting scraps suitable to be saved in persistent storage or exchanged with other applications. Note that the two scraps must always be used together: \'d4WEpf\'d5 is a simple run array mapping text offsets to style indices, while \'d4WEru\'d5 contains the ruler table proper.\parThe \'d4WEcf\'d5 and \'d4WEst\'d5 selectors create character-level formatting scraps suitable to be saved in persistent storage or exchanged with other applications. Again, the two scraps must always be used together.\parThe \'d4utxt\'d5 and \'d4UTF8\'d5 selectors convert the specified range to unstyled Unicode (in the canonical 16-bit flavor or encoded in UTF-8 format, respectively). A separate API gives you finer control over the Unicode conversion process and can be used to create styled Unicode text.\parThe \'d4STXT\'d5 selector combines \'d4TEXT\'d5 and \'d4styl\'d5 data in an coerced Apple event record, which is the format for styled text commonly used in Apple events.\parThis new routine obsoletes both {\f2 WECopyRange} and {\f2 WEBuildFontTable}, which are now deprecated APIs in WASTE 2.0.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEPut\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WEPut\par  (\par    SInt32\tab inRangeStart,\par    SInt32\tab inRangeEnd,\par    const void *\tab inTextPtr,\par    SInt32\tab inTextLength,\par    TextEncoding\tab inTextEncoding,\par    OptionBits\tab inPutOptions,\par    ItemCount\tab inFlavorCount,\par    const FlavorType *\tab inFlavorTypes,\par    const Handle *\tab inFlavorHandles,\par    WEReference\tab inWE\par  );\par\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Use {\f2 WEPut} to insert styled or unstyled text (or Unicode text) at an arbitrary offset, optionally replacing an existing range. This call accepts a variable number of formatting scraps that may optionally accompany the inserted text, in several possible combinations. You can use TextEdit, WASTE 1.3 and WASTE 2.0 scrap formats, or even a mixture of them.\parThis new routine obsoletes {\f2 WEInsert}.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WERedo\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal OSErr WERedo\par  (\par    WEReference\tab inWE\par  );\par\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 In multiple undo/redo mode, call this routine to redo an action.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEGetIndUndoInfo\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal WEActionKind WEGetIndUndoInfo\par  (\par    SInt32\tab inUndoLevel,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Use this new API to determine the action kind of actions stored in the undo and redo stacks and to determine the depth of these stacks. Positive values of {\f2 inUndoLevel} refer to the undo stack, negative values to the redo stack.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b New Semantics for Old Routines\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Some WASTE 1.3 routines have a new meaning in WASTE 2.0:\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEGetAlignment\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal WEAlignment WEGetAlignment\par  (\par    WEReference\tab inWE\par  );\par\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This routine now gets the alignment of the selection, not of the whole text. If the selected text contains several paragraphs with different alignments, this routine returns the alignment of the first paragraph.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WESetAlignment\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal void WESetAlignment\par  (\par    WEAlignment\tab inAlignmentStyle,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This routine now sets the alignment of the selection, not of the whole text. It\'d5s equivalent to calling {\f2 WESetRuler} with the {\f2 weDoAlignment} selector.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WEGetDirection\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal WEDirection WEGetDirection\par  (\par    WEReference\tab inWE\par  );\par\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This routine now gets the dominant line direction of the selection, not of the whole text. If the selected text contains several paragraphs with different dominant line directions, this routine returns the direction of the first paragraph.\par}{\pard\plain\f0\fs28\cf0\ql\sb240\sa120\brdrb\brdrdot {\b WESetDirection\par}}{\pard\plain\f2\fs24\cf0\ql\li480\tx4000 pascal void WESetDirection\par  (\par    WEDirection\tab inDirection,\par    WEReference\tab inWE\par  );\par  \par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 This routine now sets the dominant line direction of the selection, not of the whole text. It\'d5s equivalent to calling {\f2 WESetRuler} with the {\f2 weDoDirection} selector.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Compatibility Issues\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 All WASTE 1.3 APIs are still available in WASTE 2.0 and will likely be supported in the foreseeable future (with a couple of exceptions, see below). However, some WASTE 1.3 APIs are now {\b deprecated}, either because they have been superseded by more powerful APIs, or because it is likely that changes in future versions will prevent me from supporting them.\parHere\'d5s the list of deprecated WASTE 1.3 APIs:\par}{\pard\plain\f1\fs24\cf0\qj\sa60\li480\ri240\fi-240 \'a5\tab {\f2 WESetStyle} (use {\f2 WESetAttributes} or {\f2 WESetOneAttribute}).\par\'a5\tab {\f2 WEContinuousStyle} (use {\f2 WEMatchAttributes}).\par\'a5\tab {\f2 WEInsert} (use {\f2 WEPut}).\par\'a5\tab {\f2 WECopyRange} (use {\f2 WEStreamRange}).\par\'a5\tab {\f2 WEBuildFontTable} (use {\f2 WEStreamRange}, which allows you to get a font table for a specific range; font tables are no longer needed if you use the new style scraps).\par\'a5\tab {\f2 WEUpdateFontTable} (font tables are no longer needed if you use the new style scraps).\par\'a5\tab {\f2 WEUpdateStyleScrap} (font tables are no longer needed if you use the new style scraps).\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 The following APIs introduced in early alpha versions of WASTE 2.0 are also deprecated, and unlike WASTE 1.3 APIs, they will likely be removed in a future version:\par}{\pard\plain\f1\fs24\cf0\qj\sa60\li480\ri240\fi-240 \'a5\tab {\f2 WESetRuler} (use {\f2 WESetAttributes} or {\f2 WESetOneAttribute}).\par\'a5\tab {\f2 WEContinuousRuler} (use {\f2 WEMatchAttributes}).\par\'a5\tab {\f2 WEInsertFormattedText} (use {\f2 WEPut}).\par}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Future versions of WASTE will probably use a Unicode text buffer internally, and that will break compatibility with APIs that let you manipulate the underlying text buffer directly: {\f2 WEGetText} and {\f2 WEUseText}. If you\'d5re concerned with future compatibility, avoid using {\f2 WEGetText} whenever possible: you can use {\f2 WEStreamRange} to obtain a {\b copy} of the text. Also, replace {\f2 WEUseText} with {\f2 WEPut}.\parPlease do not assume that a {\f2 WEReference} is a handle and don\'d5t rely on its (undocumented) memory layout.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b About the Author\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 WASTE (the WorldScript-Aware Styled Text Engine) is an ongoing project by Marco Piovanelli that\'d5s been under development since 1993, with contributions from several people, including Mark Alldritt, Rainer Brockerhoff, Brian Clark, Dan Crevier, Martin Fricke, Ari Halberstadt, Jonathan Kew, Koiso Norihito, Stefan Kurth, Mark Lanett, Matsumoto Satoshi, Timothy Paustian, Leonard Rosenthol, Akos Somorjai, jud spencer, Chris Thomas, Romain Vignes and many others.\parMarco is an experienced Mac OS developer who\'d5s sometimes available for contract jobs. Current areas of interest include text processing (of course!), Unicode, XML, AppleScript and Carbon. You can contact him privately at {\f2\cf3 <mailto:marco.piovanelli@pobox.com>}.\par}{\pard\plain\f0\fs36\cf0\ql\sb360\sa240\brdrb\brdrs {\b Technical Support\par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 Send WASTE-related technical support questions to:\par}{\pard\plain\f2\fs24\cf1\qc\sa120\fi120 <mailto:waste@merzwaren.com>{\f1\cf0 \par}}{\pard\plain\f1\fs24\cf0\qj\sa120\fi120 The official WASTE 2 web site is:\par}{\pard\plain\f2\fs24\cf1\qc\sa120\fi120 <http://www.merzwaren.com/waste/>\par}}
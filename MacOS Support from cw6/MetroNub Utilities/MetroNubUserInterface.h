/* =========================================================================== 	MetroNubUserInterface.h		©1996-99 Metrowerks Inc. All rights reserved.   =========================================================================== */#ifndef __MetroNubUserInterface__#define __MetroNubUserInterface__#ifdef MW_USES_PRAGMA_ONCE#pragma once#endif#ifndef __MIXEDMODE__#include <MixedMode.h>#endif#if PRAGMA_STRUCT_ALIGN#pragma options align=mac68k#endif/* ---------------------------------------------------------------------------		¥ Constants (C/C++ compatible)   --------------------------------------------------------------------------- */#define kMetroNubUserAPIV1 1#define kMetroNubUserAPIV2 2 /* current User API version */#define kMetroNubUserAPIVersion kMetroNubUserAPIV2	#define kMetroNubUserSignature 'MnUI'typedef long WatchPointIDT;#define errProcessIsNotClient -23700/* ---------------------------------------------------------------------------		pascal Boolean IsDebuggerRunning();   --------------------------------------------------------------------------- */typedef pascal Boolean (*IsDebuggerRunningProcPtr)();#if TARGET_RT_MAC_CFMtypedef UniversalProcPtr IsDebuggerRunningUPP;#elsetypedef IsDebuggerRunningProcPtr IsDebuggerRunningUPP;#endifenum {	uppIsDebuggerRunningProcInfo = kPascalStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(Boolean)))};#if TARGET_RT_MAC_CFM#define NewIsDebuggerRunningProc(userRoutine)		\		(IsDebuggerRunningUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppIsDebuggerRunningProcInfo, GetCurrentArchitecture())#else#define NewIsDebuggerRunningProc(userRoutine)		\		((IsDebuggerRunningUPP) (userRoutine))#endif#if TARGET_RT_MAC_CFM#define CallIsDebuggerRunningProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppIsDebuggerRunningProcInfo)#else#define CallIsDebuggerRunningProc(userRoutine)		\			(*(userRoutine))()#endif/* ---------------------------------------------------------------------------		pascal Boolean AmIBeingDebugged ();   --------------------------------------------------------------------------- */typedef pascal Boolean (*AmIBeingDebuggedProcPtr)();#if TARGET_RT_MAC_CFMtypedef UniversalProcPtr AmIBeingDebuggedUPP;#elsetypedef AmIBeingDebuggedProcPtr AmIBeingDebuggedUPP;#endifenum {	uppAmIBeingDebuggedProcInfo = kPascalStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(Boolean)))};#if TARGET_RT_MAC_CFM#define NewAmIBeingDebuggedProc(userRoutine)		\		(AmIBeingDebuggedUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppAmIBeingDebuggedProcInfo, GetCurrentArchitecture())#else#define NewAmIBeingDebuggedProc(userRoutine)		\		((AmIBeingDebuggedUPP) (userRoutine))#endif#if TARGET_RT_MAC_CFM#define CallAmIBeingDebuggedProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppAmIBeingDebuggedProcInfo)#else#define CallAmIBeingDebuggedProc(userRoutine)		\			(*(userRoutine))()#endif/* ---------------------------------------------------------------------------		pascal OSErr UserSetWatchPoint (Ptr address, long length,										WatchPointIDT* watchPointID);   --------------------------------------------------------------------------- */typedef pascal OSErr (*UserSetWatchPointProcPtr)(Ptr address, long length,					 					    	 WatchPointIDT* watchPointID);#if TARGET_RT_MAC_CFMtypedef UniversalProcPtr UserSetWatchPointUPP;#elsetypedef UserSetWatchPointProcPtr UserSetWatchPointUPP;#endifenum {	uppUserSetWatchPointProcInfo = kPascalStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(WatchPointIDT*)))};#if TARGET_RT_MAC_CFM#define NewUserSetWatchPointProc(userRoutine)		\		(UserSetWatchPointUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppUserSetWatchPointProcInfo, GetCurrentArchitecture())#else#define NewUserSetWatchPointProc(userRoutine)		\		((UserSetWatchPointUPP) (userRoutine))#endif#if TARGET_RT_MAC_CFM#define CallUserSetWatchPointProc(userRoutine, address, length, watchPointID)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppUserSetWatchPointProcInfo,  \							(address), (length), (watchPointID))#else#define CallUserSetWatchPointProc(userRoutine, address, length, watchPointID)		\			(*(userRoutine))((address), (length), (watchPointID))#endif#if !defined(NewClearWatchPointProc)/* ---------------------------------------------------------------------------		pascal OSErr ClearWatchPoint (WatchPointIDT watchPointID);   --------------------------------------------------------------------------- */typedef pascal OSErr (*ClearWatchPointProcPtr)(WatchPointIDT watchPointID);#if TARGET_RT_MAC_CFMtypedef UniversalProcPtr ClearWatchPointUPP;#elsetypedef ClearWatchPointProcPtr ClearWatchPointUPP;#endifenum {	uppClearWatchPointProcInfo = kPascalStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(WatchPointIDT)))};#if TARGET_RT_MAC_CFM#define NewClearWatchPointProc(userRoutine)		\		(ClearWatchPointUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppClearWatchPointProcInfo, GetCurrentArchitecture())#else#define NewClearWatchPointProc(userRoutine)		\		((ClearWatchPointUPP) (userRoutine))#endif#if TARGET_RT_MAC_CFM#define CallClearWatchPointProc(userRoutine, watchPointID)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppClearWatchPointProcInfo, (watchPointID))#else#define CallClearWatchPointProc(userRoutine, watchPointID)		\			(*(userRoutine))((watchPointID))#endif#endif/* ---------------------------------------------------------------------------		¥ MetroNubUserEntryBlock   --------------------------------------------------------------------------- */struct MetroNubUserEntryBlock{	long					blockLength;		/* length of this block */	short					apiLowVersion;		/* lowest supported version of the Nub API */	short					apiHiVersion;		/* highest supported version of the Nub API */	Str31					nubVersion;			/* short version string from 'vers' 1 resource */		/* Introduced in CW9 (v1) */	IsDebuggerRunningUPP	isDebuggerRunning;	AmIBeingDebuggedUPP		amIBeingDebugged;		/* Never published (v2) */	UserSetWatchPointUPP	userSetWatchPoint;	ClearWatchPointUPP		clearWatchPoint;};typedef struct MetroNubUserEntryBlock MetroNubUserEntryBlock;#if PRAGMA_STRUCT_ALIGN#pragma options align=reset#endif#endif
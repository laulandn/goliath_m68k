// ===========================================================================//	LCarbonApp.cp				PowerPlant 2.1			 ©2000 Metrowerks Inc.// ===========================================================================#include <LCarbonApp.h>#include <LMenuBar.h>#include <LModelDirector.h>#include <PP_Messages.h>#include <PP_Resources.h>#include <UAppleEventsMgr.h>#include <UCursor.h>#include <UEnvironment.h>#include <UCarbonEvents.h>#include <Sound.h>#include <new>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LCarbonApp							Default Constructor		  [public]// ---------------------------------------------------------------------------LCarbonApp::LCarbonApp()		// Initialize Carbon Event Handlers. These are functors,		// which are function pointers wrapped in an object.		// As member variables, they will be destructed along		// with the Application object. The destructor for a		// functor removes the event handler.	: mSuspendHandler( ::GetApplicationEventTarget(),					   kEventClassApplication,					   kEventAppDeactivated,					   &UCarbonEvents::DoSuspend ),	  mResumeHandler( ::GetApplicationEventTarget(),					   kEventClassApplication,					   kEventAppActivated,					   &UCarbonEvents::DoResume ),					   	  mHICommandHandler( ::GetApplicationEventTarget(),	  					 kEventClassCommand,	  					 kEventProcessCommand,	  					 &UCarbonEvents::DoHICommand ),	  					 	  mKeyDownHandler( ::GetApplicationEventTarget(),	  				   kEventClassKeyboard,	  				   kEventRawKeyDown,	  				   &UCarbonEvents::DoKeyDown ){	sTopCommander = this;		UEnvironment::InitEnvironment();		SetUseSubModelList(true);	SetModelKind(cApplication);}// ---------------------------------------------------------------------------//	¥ ~LCarbonApp							Destructor				  [public]// ---------------------------------------------------------------------------LCarbonApp::~LCarbonApp(){}#pragma mark -// ---------------------------------------------------------------------------//	¥ Run															  [public]// ---------------------------------------------------------------------------//	Run the Application by processing events until quittingvoidLCarbonApp::Run(){	try {		new LMenuBar(MBAR_Initial);		new LModelDirector(this);						ForceTargetSwitch(this);		UCursor::InitTheCursor();	}		catch (...) {			SignalStringLiteral_("App Initialization failed.");	}		::RunApplicationEventLoop();}// ---------------------------------------------------------------------------//	¥ StartUp													   [protected]// ---------------------------------------------------------------------------//	Perform actions at application start up when launched without any//	documents.////	Override if you wish to perform some default action, such as//	creating a new, untitled documentvoidLCarbonApp::StartUp(	bool	/* inWithDocument */){}// ---------------------------------------------------------------------------//	¥ DoReopenApp												   [protected]// ---------------------------------------------------------------------------//	Respond to Reopen Application AppleEvent////	The system sends the reopen application AppleEvent when the user//	resumes an application that has no open windows.voidLCarbonApp::DoReopenApp(){}	// Do nothing#pragma mark -// ---------------------------------------------------------------------------//	¥ DoQuit														  [public]// ---------------------------------------------------------------------------voidLCarbonApp::DoQuit(	SInt32	inSaveOption){	if (AttemptQuit(inSaveOption)) {		::QuitApplicationEventLoop();	}}// ---------------------------------------------------------------------------//	¥ ObeyCommand													  [public]// ---------------------------------------------------------------------------//	Respond to commandsBooleanLCarbonApp::ObeyCommand(	CommandT	inCommand,	void*		ioParam){	Boolean		cmdHandled = true;		switch (inCommand) {			case cmd_About:			::Alert(ALRT_About, nil);			break;					case cmd_Quit:			DoQuit();			break;					default:			cmdHandled = LCommander::ObeyCommand(inCommand, ioParam);			break;	}		return cmdHandled;}// ---------------------------------------------------------------------------//	¥ FindCommandStatus												  [public]// ---------------------------------------------------------------------------//	Pass back whether a Command is enabled and/or marked (in a Menu)voidLCarbonApp::FindCommandStatus(	CommandT	inCommand,	Boolean&	outEnabled,	Boolean&	outUsesMark,	UInt16&		outMark,	Str255		outName){	switch (inCommand) {			case cmd_About:		case cmd_Quit:		case SyntheticCommandForMenu_(MENU_Apple):			outEnabled = true;			break;					case cmd_Undo:			outEnabled = false;			::GetIndString(outName, STRx_UndoEdit, str_CantRedoUndo);			break;					default:			LCommander::FindCommandStatus(inCommand, outEnabled,									outUsesMark, outMark, outName);			break;	}}#pragma mark -// ===========================================================================// ¥ Apple Event Handlers								Apple Event Handlers ¥// ===========================================================================// ---------------------------------------------------------------------------//	¥ HandleAppleEvent												  [public]// ---------------------------------------------------------------------------voidLCarbonApp::HandleAppleEvent(	const AppleEvent&	inAppleEvent,	AppleEvent&			outAEReply,	AEDesc&				outResult,	long				inAENumber){	switch (inAENumber) {			case ae_OpenApp:			StartUp(false);			break;					case ae_ReopenApp:			DoReopenApp();			break;					case ae_Quit: {			DescType	theType;			Size		theSize;			SInt32		saveOption = kAEAsk;			OSErr	err = ::AEGetParamPtr(&inAppleEvent, keyAESaveOptions,						typeEnumeration, &theType, &saveOption,						sizeof(SInt32), &theSize);										// We'll ignore the error here. Just proceeding with the				// default of kAEAsk is reasonable.			DoQuit(saveOption);			break;		}				case ae_GetData:		case ae_GetDataSize:		case ae_SetData:								// If we reach this point, no other object has handled				// this get/set event. That means whatever thing the				// event is trying to get/set doesn't exist or isn't				// supported.					Throw_(errAEEventNotHandled);			break;					default:			LModelObject::HandleAppleEvent(inAppleEvent, outAEReply,								outResult, inAENumber);			break;	}}// ---------------------------------------------------------------------------//	¥ MakeSelfSpecifier											   [protected]// ---------------------------------------------------------------------------//	Make an Object Specifier for an ApplicationvoidLCarbonApp::MakeSelfSpecifier(	AEDesc&		/* inSuperSpecifier */,	AEDesc&		outSelfSpecifier) const{	outSelfSpecifier.descriptorType = typeNull;	outSelfSpecifier.dataHandle = nil;}PP_End_Namespace_PowerPlant
/* ================================================================================================== * GoliathSSLCertCallback.cpp															    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#ifndef __GoliathSSLCertCallback_h__#include "GoliathSSLCertCallback.h"#endif#ifndef __SSLCertificateDialog_h__#include "SSLCertificateDialog.h"#endif#ifndef __SSLCertificateCallback_h__#include "SSLCertificateCallback.h"#endif#ifndef __SSLClientCertDialog_h__#include "SSLClientCertDialog.h"#endif#include "CDAVTableAppConstants.h"#include "CDAVTableApp.h"#include <LEditText.h>#include <LCheckBox.h>#include <assert.h>std::auto_ptr<GoliathSSLCertCallback>	GoliathSSLCertCallback::sCallBack;std::auto_ptr<GoliathSSLClientCertCallback> GoliathSSLClientCertCallback::sCallBack;// ---------------------------------------------------------------------------//		¥ RegisterSSLCertCallback// ---------------------------------------------------------------------------//void GoliathSSLCertCallback::RegisterSSLCertCallback() {	assert(sCallBack.get() == NULL);	if (sCallBack.get() != NULL)		return;		sCallBack = std::auto_ptr<GoliathSSLCertCallback>(new GoliathSSLCertCallback());	DAVLibSSLCertificateCallback::InstallDAVLibSSLCertCallback(sCallBack.get());}// ---------------------------------------------------------------------------//		¥ GoliathSSLCertCallback// ---------------------------------------------------------------------------//GoliathSSLCertCallback::GoliathSSLCertCallback() {}// ---------------------------------------------------------------------------//		¥ ~GoliathSSLCertCallback// ---------------------------------------------------------------------------//GoliathSSLCertCallback::~GoliathSSLCertCallback() {}// ---------------------------------------------------------------------------//		¥ OnCertificateReceived// ---------------------------------------------------------------------------//bool GoliathSSLCertCallback::OnCertificateReceived(const std::map<std::string, std::string>& inOwnerInfo,										const std::map<std::string, std::string>& inIssuerInfo,										const std::string& inValidFromDate,										const std::string& inValidToDate,										const std::string& inFingerprint,										bool& outAcceptOnce) {	PP_PowerPlant::StDialogHandler dialog(1404, NULL);	Assert_(dialog.GetDialog() != nil);	dialog.GetDialog()->Show();	LCheckBox* cb = dynamic_cast<LCheckBox*>(dialog.GetDialog()->FindPaneByID('INST'));	while (true) {		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			return false;		else if (hitMessage == PP_PowerPlant::msg_OK) {			outAcceptOnce = (cb->GetValue() == 0);			return true;		} else if (hitMessage == 'VCRT') {	    	DisplaySSLCertificateDialog(dialog.GetDialog(), inOwnerInfo, inIssuerInfo, inValidFromDate,	    						inValidToDate, inFingerprint);	    }	}}// ---------------------------------------------------------------------------//		¥ GoliathSSLClientCertCallback// ---------------------------------------------------------------------------//void GoliathSSLClientCertCallback::RegisterSSLCertCallback() {	assert(sCallBack.get() == NULL);	if (sCallBack.get() != NULL)		return;		sCallBack = std::auto_ptr<GoliathSSLClientCertCallback>(new GoliathSSLClientCertCallback());	DAVLibClientCertificateCallback::InstallDAVLibSSLClientCertCallback(sCallBack.get());}// ---------------------------------------------------------------------------//		¥ GoliathSSLClientCertCallback// ---------------------------------------------------------------------------//GoliathSSLClientCertCallback::GoliathSSLClientCertCallback() {}// ---------------------------------------------------------------------------//		¥ GetPassword// ---------------------------------------------------------------------------//bool GoliathSSLClientCertCallback::GetPassword(std::string& outPassword) {	PP_PowerPlant::StDialogHandler dialog(CLIENTCERTPASSWORDDLOG, GetApplicationInstance());	LDialogBox* dlog = dynamic_cast<LDialogBox*>(dialog.GetDialog());	Assert_(dlog != nil);		if (!dlog)		return false;		LEditText* pass = dynamic_cast<LEditText*>(dlog->FindPaneByID('pass'));	Assert_(pass != nil);	if (!pass)		return false;	dlog->Show();	while (true) {		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			return false;		else if (hitMessage == PP_PowerPlant::msg_OK)			break;	}    LStr255 valText;    pass->GetText(valText);	outPassword.append(valText.ConstTextPtr(), valText.Length());	return true;}// ---------------------------------------------------------------------------//		¥ OnSupplyClientCert// ---------------------------------------------------------------------------//bool GoliathSSLClientCertCallback::OnSupplyClientCert(std::string& outTheCertData, std::string& outPassword) {	if (GetClientCertificate(outTheCertData)) {		return GetPassword(outPassword);	}	return false;}
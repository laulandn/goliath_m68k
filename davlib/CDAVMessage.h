/* =========================================================================== *	CDAVMessage.h			    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2000  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com *//*!   @header DAVLib	This library implements HTTP 1.1 and the WebDAV (RFC 2518) extensions to HTTP.   This program is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.    This program is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.*/#pragma once#ifndef __CDAVMESSAGE_H__#define __CDAVMESSAGE_H__#include <LHeaderField.h>#include <LHeaderFieldList.h>#include <LHTTP11Message.h>#include <LDynamicBuffer.h>#include "DAVTypes.h"#include <string>// ---------------------------------------------------------------------------/*!  @class CDAVMessage  @discussion an object that contains information to be sent in an HTTP request  and methods to formulate the body and headers of that request.  This is a sublass of the PowerPlant chass LHTTPMessage; consult the CodeWarrior documentation on their Internet Classes for more background on this class. */class	CDAVMessage: public LHTTP11Message {public:  /*! 	 @function CDAVMessage	 @discussion object constructor  */  CDAVMessage();  /*! 	 @function CDAVMessage	 @discussion object constructor	 @param inMessage the actual data to be sent as the HTTP request body  */  CDAVMessage(const char * inMessage);   /*! 	  @function ~CDAVMessage	  @discussion object destructor   */	virtual 			~CDAVMessage();    /*!		@function SetDepth	 */    void SetDepth(DAVTypes::PropertyDepth depth);    /*!		@function GetDepth	 */    DAVTypes::PropertyDepth GetDepth();    /*!		@function GetHasDepth	 */    Boolean GetHasDepth();        /*!		@function SetDestination	 */    void SetDestination(ConstStr255Param destination);    /*!		@function SetDestination	 */    void SetDestination(const char* destination);    /*!		@function GetDestination	 */    const char *GetDestination();    /*!		@function GetHasDestination	 */    Boolean GetHasDestination();        /*!		@function SetOvwewrite	 */    void SetOverwrite(DAVTypes::Overwrite destination);    /*!		@function GetOverwrite	 */    DAVTypes::Overwrite GetOverwrite();    /*!		@function GetHasOverwrite	 */    Boolean GetHasOverwrite();    /*!		@function SetTimeout	 */    void SetTimeout(const char* timeout);    /*!		@function GetTimeoue	 */    const char* GetTimeout();    /*!		@function GetHasTimeout	 */    Boolean GetHasTimeout();        /*!		@function SetLockToken	 */    void SetLockToken(const char* lockToken);    /*!		@function GetLockToken	 */    const char* GetLockToken();    /*!		@function GetHasLockToken	 */    Boolean GetHasLockToken();        /*!		@function SetIfHeader	 */    void SetIfHeader(const char* ifhdr);    /*!		@function GetIfHeader	 */    const char* GetIfHeader();    /*!		@function GetHasIfHeader	 */    Boolean GetHasIfHeader();        /*!		@function SetProxyPassword	 */    void SetProxyPassword(const char * inPassword);    /*!		@function GetProxyPassword	 */    const char* GetProxyPassword();    /*!		@function SetProxyUserName	 */    void SetProxyUserName(const char * inUserName);    /*!		@function GetProxyUserName	 */    const char* GetProxyUserName();    protected:	virtual void		BuildHeader(LDynamicBuffer * outHeader);		Boolean mHasDepth;	DAVTypes::PropertyDepth  mDepth;	    Boolean     mHasDestination;    std::string     mDestination;          DAVTypes::Overwrite mOverwrite;    Boolean     mHasOverwrite;        Boolean     mHasTimeout;    std::string mTimeout;        Boolean     mHasLockToken;    std::string mLockToken;        Boolean     mHasIfHeader;    std::string mIfHeader;    std::string mProxyPassword;    std::string mProxyUserName;};#endif
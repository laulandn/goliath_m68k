// ===========================================================================//	LProgressBar.cp				PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LProgressBar.h>#include <LControlImp.h>#include <LStream.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LProgressBar							Stream Constructor		  [public]// ---------------------------------------------------------------------------LProgressBar::LProgressBar(	LStream*	inStream,	ClassIDT	inImpID)	: LControlPane(inStream, inImpID){	mNextIdleTick = 0;	Boolean	indeterminate;	*inStream >> indeterminate;	if (indeterminate) {		SetIndeterminateFlag(indeterminate);	}}// ---------------------------------------------------------------------------//	¥ LProgressBar							Parameterized Constructor [public]// ---------------------------------------------------------------------------LProgressBar::LProgressBar(	const SPaneInfo&	inPaneInfo,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue,	Boolean				inIsIndeterminate,	ClassIDT			inImpID)	: LControlPane(inPaneInfo, inImpID, kControlProgressBarProc,						Str_Empty, 0, inValueMessage, inValue, inMinValue,						inMaxValue){	mNextIdleTick = 0;	if (inIsIndeterminate) {		SetIndeterminateFlag(inIsIndeterminate);	}}// ---------------------------------------------------------------------------//	¥ ~LProgressBar							Destructor				  [public]// ---------------------------------------------------------------------------LProgressBar::~LProgressBar(){}// ---------------------------------------------------------------------------//	¥ SetIndeterminateFlag											  [public]// ---------------------------------------------------------------------------//	Change progress bar to be or not be indeterminate////	If making the progress bar indeterminate, inStartNow specifies whether//	to starting idling (animating) now. If you pass false, you must call//	Start() yourself to begin animating the progress bar.voidLProgressBar::SetIndeterminateFlag(	Boolean		inIsIndeterminate,	Boolean		inStartNow){	mControlImp->SetDataTag(kControlNoPart,			kControlProgressBarIndeterminateTag,			sizeof(Boolean), &inIsIndeterminate);	if (inIsIndeterminate) {		// Indeterminate ProgressBar uses		if (inStartNow) {			//   idle time to animate			StartIdling();		}	} else {		StopIdling();	}}// ---------------------------------------------------------------------------//	¥ IsIndeterminate												  [public]// ---------------------------------------------------------------------------boolLProgressBar::IsIndeterminate() const{	Boolean	indeterminate;	mControlImp->GetDataTag(kControlNoPart,			kControlProgressBarIndeterminateTag,			sizeof(Boolean), &indeterminate);	return indeterminate;}// ---------------------------------------------------------------------------//	¥ Start															  [public]// ---------------------------------------------------------------------------voidLProgressBar::Start(){	if (IsIndeterminate()) {		StartIdling();	}}// ---------------------------------------------------------------------------//	¥ Stop															  [public]// ---------------------------------------------------------------------------voidLProgressBar::Stop(){	if (IsIndeterminate()) {		StopIdling();	}}// ---------------------------------------------------------------------------//	¥ SpendTime														  [public]// ---------------------------------------------------------------------------//	Animate indeterminate progress barvoidLProgressBar::SpendTime(	const EventRecord&	/* inMacEvent */){		// Regulate "speed" of animation by idling at most		// once every 5 ticks	if (::TickCount() >= mNextIdleTick) {		mControlImp->Idle();		mNextIdleTick = ::TickCount() + 5;	}}PP_End_Namespace_PowerPlant
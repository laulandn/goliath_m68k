// ===========================================================================//	USessionPrinting.cp			PowerPlant 2.1			 ©2000 Metrowerks Inc.// ===========================================================================////	Implementation of UPrinting module using the Carbon Print Session APIs////	NOTE: This implmenetation requires Carbon 1.1 or later. It will NOT//	work with CarbonLib 1.0.x.#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <UPrinting.h>#if PP_Target_Classic		// You must use UClassicPrinting for Classic targets.		// Remove this file from Classic targets.	#error "Classic target does not support USessionPrinting"#elif !PM_USE_SESSION_APIS		// You must turn on the Toolbox flag PM_USE_SESSION_APIS		// to use USessionPrinting. However, the session APIs reguire		// Carbon 1.1 or later. Use UCarbonPrinting if you wish to		// support Carbon 1.0.x.	#error "Turn on the PM_USE_SESSION_APIS flag to use USessionPrinting"	#endifPP_Begin_Namespace_PowerPlant// ===========================================================================//	LPrintSpec Class// ===========================================================================//	Wrapper class for Toolbox print information data structures://		THPrint			- Classic printing info//		PMPageFormat	- Info from Print Dialog [Carbon]//		PMPrintSettings	- Info from Page Setup [Carbon]// ---------------------------------------------------------------------------//	¥ LPrintSpec							Default Constructor		  [public]// ---------------------------------------------------------------------------LPrintSpec::LPrintSpec(){	mPageFormat		= nil;	mPrintSettings	= nil;	mPrintSession	= nil;}// ---------------------------------------------------------------------------//	¥ ~LPrintSpec							Destructor				  [public]// ---------------------------------------------------------------------------LPrintSpec::~LPrintSpec(){	if (mPageFormat != nil) {		::PMRelease(mPageFormat);	}		if (mPrintSettings != nil) {		::PMRelease(mPrintSettings);	}			// Print Session should be nil since client is supposed to		// balance calls to BegingSession() and EndSession(). But		// it doesn't do any harm to clean up here just in case.		if (mPrintSession != nil) {		::PMRelease(mPrintSession);	}}// ---------------------------------------------------------------------------//	¥ BeginSession// ---------------------------------------------------------------------------//	Start a print session////	When a session is open, LPrintSpec members have the following state:////		mPrintSession		Validated Reference//		mPageFormat			Validated Reference//		mPrintSettings		Validated Reference//		mFlatPageFormat		nil Handle//		mFlatPrintSettings	nil Handle//		mPrintRecordH		Initially nil, but will be allocated if//								GetPrintRecord() is called during the sessionvoidLPrintSpec::BeginSession(	PMPrintSession	inSession){	SignalIf_( IsInSession() );		// Session already open		OSStatus	status;			// The goal here is to obtain valid PageFormat and PrintSettings		// objects. There are 4 possibilities, which we consider in order:		//		//		(1) Object already exists. Just validate it.		//		(2) Flattened version exists. Unflatten and validate.		//		(3) Convert a Classic PrintRecord		//		(4) Create a new one with default values		//		// Note that we  use a Classic PrintRecord only if both the PageFormat		// and PrintSettings are not present.		if ((mPageFormat == nil) && mFlatPageFormat.IsValid()) {									// Restore PageFormat from flattened data		status = ::PMUnflattenPageFormat(mFlatPageFormat, &mPageFormat);	}		mFlatPageFormat.Adopt(nil);		// Clear flattened data. PageFormat may									//   change and we don't want stale data.		if (mPageFormat != nil) {		// Validate PageFormat. This will validate									//   a PageFormat created in a previous									//   session, or one created above from									//   flattened data.		status = ::PMSessionValidatePageFormat(inSession, mPageFormat, nil);	}		if ((mPrintSettings == nil) && mFlatPrintSettings.IsValid()) {									// Restore PrintSettings from flattened data		status = ::PMUnflattenPrintSettings(mFlatPrintSettings, &mPrintSettings);	}		mFlatPrintSettings.Adopt(nil);	// Clear flattened data		if (mPrintSettings != nil) {	// Validate PrintSettings		status = ::PMSessionValidatePrintSettings(inSession, mPrintSettings, nil);	}			if ( (mPageFormat == nil) &&		 (mPrintSettings == nil) &&		 mPrintRecordH.IsValid() ) {		 							// Both PageFormat and PrintSettings are		 							//   undefined. Create them from a saved		 							//   Classic PrintRecord.		status = ::PMSessionConvertOldPrintRecord(									inSession,									mPrintRecordH,									&mPrintSettings,									&mPageFormat );	}		mPrintRecordH.Adopt(nil);		// Clear saved PrintRecord		if (mPageFormat == nil) {		// After checking all saved data, we									//   still don't have a PageFormat.									//   Create and new one with default									//   values.		status = ::PMCreatePageFormat(&mPageFormat);		status = ::PMSessionDefaultPageFormat(inSession, mPageFormat);	}		if (mPrintSettings == nil) {	// Similarly, create a new PrintSettings									//   with default values		status = ::PMCreatePrintSettings(&mPrintSettings);		status = ::PMSessionDefaultPrintSettings(inSession, mPrintSettings);	}	::PMRetain(inSession);			// Retain and store Session reference	mPrintSession = inSession;}// ---------------------------------------------------------------------------//	¥ EndSession// ---------------------------------------------------------------------------//	End a print session////	After a session ends, the LPrintSpec members have the following state:////		mPrintSession		nil//		mPageFormat			Reference//		mPrintSettings		Reference//		mFlatPageFormat		Handle with saved PageFormat data//		mFlatPrintSettings	Handle with saved PrintSettings data//		mPrintRecordH		Handle with converted Format and Settings datavoidLPrintSpec::EndSession(){	SignalIfNot_( IsInSession() );		// Session should be open		if ( (mPrintSettings != nil)  &&	// Save PrintRecord using current		 (mPageFormat != nil) ) {		//   PageFormat and PrintSettings		 		 Handle		printRecH = nil;		OSStatus	status = ::PMSessionMakeOldPrintRecord(													mPrintSession,													mPrintSettings,													mPageFormat,													&printRecH);				mPrintRecordH.Adopt(printRecH);	}	::PMRelease(mPrintSession);	mPrintSession = nil;}// ---------------------------------------------------------------------------//	¥ IsInSession													  [public]// ---------------------------------------------------------------------------boolLPrintSpec::IsInSession() const{	return (mPrintSession != nil);}// ---------------------------------------------------------------------------//	¥ GetError														  [public]// ---------------------------------------------------------------------------OSStatusLPrintSpec::GetError() const{	OSStatus	status = kPMNoError;		if (IsInSession()) {		status = ::PMSessionError(mPrintSession);	}		return status;}// ---------------------------------------------------------------------------//	¥ GetPrintRecord												  [public]// ---------------------------------------------------------------------------//	Return classic Print Record Handle////	Handle will be nil if printing isn't in progress, and no previous//	printing operation occurred.////	Treat the Handle as read-only. Do NOT dispose it.THPrintLPrintSpec::GetPrintRecord(){	if (IsInSession()) {				// Print operation is in progress.										//   Create a Print Record from										//   the PrintSettings and										//   PageFormat information.		Handle	printRecH = nil;		if ( (mPrintSettings != nil) && (mPageFormat != nil) ) {			ThrowIfOSStatus_( ::PMSessionMakeOldPrintRecord(											mPrintSession,											mPrintSettings,											mPageFormat,											&printRecH) );		}				mPrintRecordH.Adopt(printRecH);	}	return (THPrint) mPrintRecordH.Get();}// ---------------------------------------------------------------------------//	¥ SetPrintRecord												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetPrintRecord(	THPrint		inPrintRecordH){	SignalIf_( IsInSession() );			// Error: Session is open	mPrintRecordH.Adopt((Handle) inPrintRecordH);}#pragma mark -// ---------------------------------------------------------------------------//	¥ GetPrintSession												  [public]// ---------------------------------------------------------------------------PMPrintSessionLPrintSpec::GetPrintSession() const{	return mPrintSession;}// ---------------------------------------------------------------------------//	¥ GetPageFormat													  [public]// ---------------------------------------------------------------------------PMPageFormatLPrintSpec::GetPageFormat() const{	return mPageFormat;}// ---------------------------------------------------------------------------//	¥ GetPageFlatFormat												  [public]// ---------------------------------------------------------------------------//	Return Handle with saved PageFormat data////	Handle will be nil if printing is in progress or if no print session//	has ever successfully started and ended.////	Do NOT dispose the Handle.HandleLPrintSpec::GetFlatPageFormat() const{	return mFlatPageFormat.Get();}// ---------------------------------------------------------------------------//	¥ SetFlatPageFormat												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetFlatPageFormat(	Handle	inFlatPageFormat){	SignalIf_( IsInSession() );			// Error: Session is open	mFlatPageFormat.Adopt(inFlatPageFormat);}// ---------------------------------------------------------------------------//	¥ GetPrintSettings												  [public]// ---------------------------------------------------------------------------PMPrintSettingsLPrintSpec::GetPrintSettings() const{	return mPrintSettings;}// ---------------------------------------------------------------------------//	¥ GetFlatPrintSettings											  [public]// ---------------------------------------------------------------------------//	Return Handle with saved PrintSettings data////	Handle will be nil if printing is in progress or if no print session//	has ever successfully started and ended.////	Do NOT dispose the Handle.HandleLPrintSpec::GetFlatPrintSettings() const{	return mFlatPrintSettings.Get();}// ---------------------------------------------------------------------------//	¥ SetFlatPrintSettings											  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetFlatPrintSettings(	Handle	inFlatPrintSettings){	SignalIf_( IsInSession() );			// Error: Session is open	mFlatPrintSettings.Adopt(inFlatPrintSettings);}#pragma mark -// ---------------------------------------------------------------------------//	¥ GetPrintJobParams												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPrintJobParams(	UInt32&		outFirstPage,	UInt32&		outLastPage,	UInt32&		outNumCopies){	SignalIfNot_( IsInSession() );		// Print Session must be open	if (mPrintSettings != nil) {		::PMGetFirstPage(mPrintSettings, &outFirstPage);		::PMGetLastPage (mPrintSettings, &outLastPage);		::PMGetCopies   (mPrintSettings, &outNumCopies);	}}// ---------------------------------------------------------------------------//	¥ SetPrintJobParams												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetPrintJobParams(	UInt32		inFirstPage,	UInt32		inLastPage,	UInt32		inNumCopies){	SignalIfNot_( IsInSession() );		// Print Session must be open	if (mPrintSettings != nil) {		::PMSetFirstPage(mPrintSettings, inFirstPage, false);		::PMSetLastPage (mPrintSettings, inLastPage, false);		::PMSetCopies   (mPrintSettings, inNumCopies, false);	}}// ---------------------------------------------------------------------------//	¥ GetPaperRect													  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPaperRect(	Rect&	outPaperRect){	THPrint		printRecH = GetPrintRecord();		if (printRecH != nil) {		outPaperRect = (**printRecH).rPaper;	} else {		outPaperRect = Rect_0000;	}}// ---------------------------------------------------------------------------//	¥ GetPageRect													  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPageRect(	Rect&	outPageRect){	THPrint		printRecH = GetPrintRecord();	if (printRecH != nil) {		outPageRect = (**printRecH).prInfo.rPage;	} else {		outPageRect = Rect_0000;	}}#pragma mark -// ===========================================================================//	StPrintContext Class// ===========================================================================////	Constructor opens printing for a document//	Destructor closes printing for a document////	A Print Session must be open before using any functions of this class.// ---------------------------------------------------------------------------//	¥ StPrintContext						Constructor// ---------------------------------------------------------------------------StPrintContext::StPrintContext(	LPrintSpec&		ioPrintSpec)		: mPrintSpec(ioPrintSpec){								// Print Session must be open	SignalIfNot_( ioPrintSpec.IsInSession() );	OSStatus	status = ::PMSessionBeginDocument(										mPrintSpec.GetPrintSession(),										mPrintSpec.GetPrintSettings(),										mPrintSpec.GetPageFormat() );	ThrowIfOSStatus_(status);}// ---------------------------------------------------------------------------//	¥ ~StPrintContext						Destructor// ---------------------------------------------------------------------------StPrintContext::~StPrintContext(){	::PMSessionEndDocument(mPrintSpec.GetPrintSession());}// ---------------------------------------------------------------------------//	¥ GetGrafPtr// ---------------------------------------------------------------------------//	Return GrafPtr being used for printing////	Note: The GrafPtr is valid only while printing a page. That is, after//	BeginPage() is called and before EndPage() is called.GrafPtrStPrintContext::GetGrafPtr() const{	GrafPtr		printerPort = nil;	OSStatus	status = ::PMSessionGetGraphicsContext(									mPrintSpec.GetPrintSession(),									nil,									(void**) &printerPort );		// Signal here instead of throwing. If there's an error, it's		// most likely programmer error (haven't called BeginPage() yet)		// rather than a printing or memory problem.	SignalIf_( status != noErr );	return printerPort;}// ---------------------------------------------------------------------------//	¥ BeginPage// ---------------------------------------------------------------------------//	Begin printing a new page////	Each BeginPage() call must be balanced by a following EndPage() callvoidStPrintContext::BeginPage(){	OSStatus	status = ::PMSessionBeginPage(								mPrintSpec.GetPrintSession(),								mPrintSpec.GetPageFormat(),								nil );	ThrowIfOSStatus_(status);}// ---------------------------------------------------------------------------//	¥ EndPage// ---------------------------------------------------------------------------//	End printing a new page////	Each EndPage() call must be balanced by a preceding BeginPage() callvoidStPrintContext::EndPage(){	::PMSessionEndPage(mPrintSpec.GetPrintSession());}#pragma mark -// ===========================================================================//	StPrintSession Class// ===========================================================================////	Constructor begins a print session//	Destructor ends a print session// ---------------------------------------------------------------------------//	¥ StPrintSession						Constructor// ---------------------------------------------------------------------------//	Open a Print Session////	You need to open a Print Session before performing any print operationsStPrintSession::StPrintSession(	LPrintSpec&		inPrintSpec)	: mPrintSpec(inPrintSpec){	PMPrintSession	session;			// Check if the Print Session API exists. It won't if		// running on Carbon 1.0.x. To support Carbon 1.0.x, you		// should use UCarbonPrinting.cp.	OSStatus	status = kPMNotImplemented;		if (PMCreateSession != (void*) kUnresolvedCFragSymbolAddress) {		status = ::PMCreateSession(&session);	}	ThrowIfOSStatus_(status);	mPrintSpec.BeginSession(session);		::PMRelease(session);}// ---------------------------------------------------------------------------//	¥ ~StPrintSession						Destructor// ---------------------------------------------------------------------------//	Close a Print SessionStPrintSession::~StPrintSession(){	mPrintSpec.EndSession();}#pragma mark -// ===========================================================================//	UPrinting Class// ===========================================================================// ---------------------------------------------------------------------------//	Class VariablesLPrintSpec	UPrinting::sAppPrintSpec;// ---------------------------------------------------------------------------//	¥ AskPageSetup// ---------------------------------------------------------------------------//	Display the standard Page Setup dialog.////	If the user OK's the settings, the ioPrintSpec is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintSpec is unchanged and this function returns false.////	You must open a Print Session before calling this function.boolUPrinting::AskPageSetup(	LPrintSpec&	ioPrintSpec){								// Print Session must be open	SignalIfNot_( ioPrintSpec.IsInSession() );	Boolean	setUpOK = false;	OSStatus	status = ::PMSessionPageSetupDialog(								ioPrintSpec.GetPrintSession(),								ioPrintSpec.GetPageFormat(),								&setUpOK );	return setUpOK;}// ---------------------------------------------------------------------------//	¥ AskPrintJob// ---------------------------------------------------------------------------//	Display the standard Print Job Dialog.////	If the user OK's the job, the ioPrintSpec is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintSpec is unchanged and this function returns false.////	You must open a Print Session before calling this function.boolUPrinting::AskPrintJob(	LPrintSpec&	ioPrintSpec){								// Print Session must be open	SignalIfNot_( ioPrintSpec.IsInSession() );	Boolean		printOK = false;	OSStatus	status = ::PMSessionPrintDialog(							ioPrintSpec.GetPrintSession(),							ioPrintSpec.GetPrintSettings(),					 		ioPrintSpec.GetPageFormat(),					 		&printOK );	return printOK;}PP_End_Namespace_PowerPlant
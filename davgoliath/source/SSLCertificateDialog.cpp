/* ================================================================================================== * SSLCertificateDialog.cpp												    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#ifndef __SSLCertificateDialog_h__#include "SSLCertificateDialog.h"#endif#ifndef _H_UModalDialogs#include <UModalDialogs.h>#endif#ifndef _H_LMultiPanelView#include <LMultiPanelView.h>#endif#ifndef _H_LEditText#include <LEditText.h>#endif#ifndef __CDAVLIBUTILS_H__#include "CDAVLibUtils.h"#endif#ifndef __CDAVTableApp_h__#include "CDAVTableApp.h"#endif#ifndef __CDAVTABLECONSTANTS_H__#include "CDAVTableAppConstants.h"#endif#include "CStringDisplayTable.h"#include "CDAVHeadingTable.h"#include <LTextEditView.h>#include <string.h>#include <assert.h>static bool gRegisteredSSLCertDlog = false;class SSLListView : public LView {public:	enum { class_ID = FOUR_CHAR_CODE('SSLL') };	SSLListView(LStream* inStream);	virtual ~SSLListView() {;};		void SetTableData(const std::map<std::string, std::string>& inTableData);protected:	virtual void	FinishCreateSelf();		std::string		GetUIStringForCode(const std::string&);	CStringDisplayTable*	mTable;};class SSLMiscView : public LView {public:	enum { class_ID = FOUR_CHAR_CODE('SSLM') };	SSLMiscView(LStream* inStream);	virtual ~SSLMiscView() {;};		void SetTableData(const std::string& inValidFrom, const std::string& inValidTo, const std::string& inFingerprint);	};const char *sPartCodes[] =	{"/CN=", "/Email=", "/O=", "/OU=", "/L=", "/ST=", "/C="};const ResIDT sPartUINameIDs[] = 	{6, 7, 3, 4, 5, 1, 2};class SSLCertificateDialog : public LDialogBox {public:	enum { class_ID = FOUR_CHAR_CODE('SSLC') };	SSLCertificateDialog(LStream* inStream);	virtual ~SSLCertificateDialog() {;};	};// ---------------------------------------------------------------------------------//		¥ SSLListView// ---------------------------------------------------------------------------------//	SSLListView::SSLListView(LStream* inStream):LView(inStream)  {}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	void SSLListView::FinishCreateSelf() {    mTable = dynamic_cast<CStringDisplayTable*>(FindPaneByID('flvt'));    Assert_(mTable != nil);	if (!mTable)		return;	CDAVHeadingTable *heading = reinterpret_cast<CDAVHeadingTable*>(FindPaneByID( EDITPROPSDLOGTBLTHDR ));     	LBevelButton *button = reinterpret_cast<LBevelButton*>(FindPaneByID('sort'));	std::map<MessageT, int> colMsgMap;	colMsgMap[kPropNameColMessage] = 1;	colMsgMap[kPropValColMessage] = 2;    mTable->Setup(button, heading, colMsgMap);        heading->InsertCols(2, 0, nil, nil, false);	heading->SetColumnHeading( 1, LStr255("\p"), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(155,  1,  1);	heading->SetColumnHeadingValueMessage(1, kPropNameColMessage);	heading->SetColumnListener(1, mTable);			heading->SetColumnHeading( 2, LStr255("\p"), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(180,  2,  2);	heading->SetColumnHeadingValueMessage(2, kPropValColMessage);	heading->SetColumnListener(2, mTable);	}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	void SSLListView::SetTableData(const std::map<std::string, std::string>& inTableData) {	if (!mTable)		return;		std::map<std::string, std::string>::const_iterator iter;	for (iter = inTableData.begin(); iter!= inTableData.end(); ++iter) {		std::vector<std::string> items;		items.push_back(GetUIStringForCode((*iter).first));		items.push_back((*iter).second);		mTable->AddListItem(items);	}}// ---------------------------------------------------------------------------------//		¥ GetUIStringForCode// ---------------------------------------------------------------------------------//std::string SSLListView::GetUIStringForCode(const std::string& inCode) {	int sz = 0;	sz = sizeof(sPartCodes)/sizeof(char*);	assert(sz == (sizeof(sPartUINameIDs)/sizeof(ResIDT)));	for (int i=0; i<sz; i++) {		if (strcmp(sPartCodes[i], inCode.c_str()) == 0) {			LStr255 codeUIStr(1004, sPartUINameIDs[i]);			std::string retStr;			retStr.assign(codeUIStr.ConstTextPtr(), codeUIStr.Length());			return retStr;		}	}	return std::string(inCode);}// ---------------------------------------------------------------------------------//		¥ SSLMiscView// ---------------------------------------------------------------------------------//	SSLMiscView::SSLMiscView(LStream* inStream):LView(inStream)  {}// ---------------------------------------------------------------------------------//		¥ SetTableData// ---------------------------------------------------------------------------------//	void SSLMiscView::SetTableData(const std::string& inValidFrom, 										const std::string& inValidTo, 										const std::string& inFingerprint) {		LTextEditView *tev;	tev = reinterpret_cast<LTextEditView*>(FindPaneByID('vfrm'));	if (tev)		tev->SetTextPtr(inValidFrom.c_str(), inValidFrom.size());	tev = reinterpret_cast<LTextEditView*>(FindPaneByID('vto '));	if (tev)		tev->SetTextPtr(inValidTo.c_str(), inValidTo.size());	tev = reinterpret_cast<LTextEditView*>(FindPaneByID('fprt'));	if (tev)		tev->SetTextPtr(inFingerprint.c_str(), inFingerprint.size());}// ---------------------------------------------------------------------------------//		¥ SSLCertificateDialog// ---------------------------------------------------------------------------------//	SSLCertificateDialog::SSLCertificateDialog(LStream* inStream) : LDialogBox(inStream) {}// ---------------------------------------------------------------------------------//		¥ DisplaySSLCertificateDialog// ---------------------------------------------------------------------------------//	void DisplaySSLCertificateDialog(	LWindow* pntWindow,									const std::map<std::string, std::string>& inOwnerInfo,									const std::map<std::string, std::string>& inIssuerInfo,									const std::string& inValidFromDate,									const std::string& inValidToDate,									const std::string& inFingerprint) {	if (!gRegisteredSSLCertDlog) {		RegisterClass_(SSLListView);		RegisterClass_(SSLMiscView);		RegisterClass_(SSLCertificateDialog);		gRegisteredSSLCertDlog = true;	}		PP_PowerPlant::StDialogHandler dialog(1406, pntWindow);	SSLCertificateDialog* prefDlog = dynamic_cast<SSLCertificateDialog*>(dialog.GetDialog());	Assert_(prefDlog != nil);		LMultiPanelView* mpv = dynamic_cast<LMultiPanelView*>(prefDlog->FindPaneByID('MULT'));	if (mpv) {		mpv->CreateAllPanels();		SSLListView* sslListView = dynamic_cast<SSLListView*>(mpv->GetPanel( 1 ));		if (sslListView)			sslListView->SetTableData(inOwnerInfo);		sslListView = dynamic_cast<SSLListView*>(mpv->GetPanel( 2 ));		if (sslListView)			sslListView->SetTableData(inIssuerInfo);		SSLMiscView* sslMiscView = dynamic_cast<SSLMiscView*>(mpv->GetPanel(3));		if (sslMiscView)			sslMiscView->SetTableData(inValidFromDate, inValidToDate, inFingerprint);										//***teb - hack to fix updating and focus bugs in LMultiPanelView		mpv->SwitchToPanel(3);		mpv->SwitchToPanel(2);		mpv->SwitchToPanel(1);	}		prefDlog->Show();		while (true) {		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			break;		else if (hitMessage == PP_PowerPlant::msg_OK)			break;	}		}
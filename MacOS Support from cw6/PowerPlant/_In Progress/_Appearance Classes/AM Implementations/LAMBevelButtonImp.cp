// ===========================================================================//	LAMBevelButtonImp.cp		PowerPlant 2.1		©1997-2000 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LAMBevelButtonImp.h>#include <LBevelButton.h>#include <PP_Resources.h>#include <UTBAccessors.h>PP_Begin_Namespace_PowerPlant// ===========================================================================//	StBevelMenuSetter// ===========================================================================//	Constructor sets MenuHandle for underlying Control//	Destructor clears MenuHandleclass StBevelMenuSetter {public:		StBevelMenuSetter(			ControlHandle	inControlH,			MenuHandle		inMenuH,			SInt16			inMenuValue);		~StBevelMenuSetter();protected:	ControlHandle	mControlH;	MenuHandle		mMenuH;};StBevelMenuSetter::StBevelMenuSetter(	ControlHandle	inControlH,	MenuHandle		inMenuH,	SInt16			inMenuValue){	mMenuH    = inMenuH;	mControlH = inControlH;	if (inMenuH != nil) {		::SetControlData(inControlH, 0, kControlBevelButtonMenuHandleTag,					sizeof(MenuHandle), (Ptr) &inMenuH);		::SetControlData(inControlH, 0, kControlBevelButtonMenuValueTag,					sizeof(SInt16), (Ptr) &inMenuValue);	}}StBevelMenuSetter::~StBevelMenuSetter(){	if (mMenuH != nil) {			// Install dummmy menu with no items		MenuHandle	emptyMenuH = LMenuController::GetEmptyMenuH();		::SetControlData(mControlH, 0, kControlBevelButtonMenuHandleTag,					sizeof(MenuHandle), (Ptr) &emptyMenuH);			// Remove real MenuHandle from the Toolbox MenuList		::MacDeleteMenu( ::GetMenuID(mMenuH) );	}}#pragma mark -// ---------------------------------------------------------------------------//	¥ LAMBevelButtonImp					Stream/Default Constructor	  [public]// ---------------------------------------------------------------------------//	Do not access inStream. It may be nil. Read Stream data in Init()LAMBevelButtonImp::LAMBevelButtonImp(	LStream*	inStream)	: LAMControlImp(inStream){		// This class requires the special empty MENU resource in order		// to prevent the Toolbox from mucking with the real MenuHandle.		// Signal and throw if we can't find this menu.	MenuHandle	emptyMenuH = LMenuController::GetEmptyMenuH();	if (emptyMenuH == nil) {		SignalStringLiteral_("LAMBevelButtonImp requires MENU 12345. "							 "Add EmptyMenu.rsrc to your project.");		Throw_(resNotFound);	}}// ---------------------------------------------------------------------------//	¥ ~LAMBevelButtonImp					Destructor				  [public]// ---------------------------------------------------------------------------LAMBevelButtonImp::~LAMBevelButtonImp(){}#pragma mark -// ---------------------------------------------------------------------------//	¥ SetValue														  [public]// ---------------------------------------------------------------------------voidLAMBevelButtonImp::SetValue(	SInt32		inValue){	StBevelMenuSetter	setMenu(mMacControlH, GetMacMenuH(), GetMenuValue());	LAMControlImp::SetValue(inValue);}// ---------------------------------------------------------------------------//	¥ TrackHotSpot													  [public]// ---------------------------------------------------------------------------BooleanLAMBevelButtonImp::TrackHotSpot(	SInt16		inHotSpot,	Point		inPoint,	SInt16		inModifiers){	StBevelMenuSetter	setMenu(mMacControlH, GetMacMenuH(), GetMenuValue());	return LAMControlImp::TrackHotSpot(inHotSpot, inPoint, inModifiers);}// ---------------------------------------------------------------------------//	¥ DrawSelf														  [public]// ---------------------------------------------------------------------------voidLAMBevelButtonImp::DrawSelf(){	StBevelMenuSetter	setMenu(mMacControlH, GetMacMenuH(), GetMenuValue());	LAMControlImp::DrawSelf();}#pragma mark -// ---------------------------------------------------------------------------//	¥ GetMacMenuH												   [protected]// ---------------------------------------------------------------------------MenuHandleLAMBevelButtonImp::GetMacMenuH() const{	MenuHandle		menuH = nil;	LBevelButton*	button = dynamic_cast<LBevelButton*>(mControlPane);	if (button != nil) {		menuH = button->GetMacMenuH();	}	return menuH;}// ---------------------------------------------------------------------------//	¥ GetMenuValue												   [protected]// ---------------------------------------------------------------------------SInt16LAMBevelButtonImp::GetMenuValue() const{	SInt16			menuValue = 0;	LBevelButton*	button = dynamic_cast<LBevelButton*>(mControlPane);	if (button != nil) {		menuValue = button->GetCurrentMenuItem();	}	return menuValue;}PP_End_Namespace_PowerPlant
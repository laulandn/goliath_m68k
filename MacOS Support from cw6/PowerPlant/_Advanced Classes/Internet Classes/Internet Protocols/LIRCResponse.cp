// ===========================================================================//	LIRCResponse.cp				PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================//// Class for handling IRC style responses.#include <LIRCResponse.h>#include <cstring>#include <cstdlib>#include <UInternet.h>#include <IRC_Constants.h>PP_Begin_Namespace_PowerPlant// ===========================================================================#pragma mark === LIRCResponse ===// ---------------------------------------------------------------------------//		¥ LIRCResponse()// ---------------------------------------------------------------------------//	ConstructorLIRCResponse::LIRCResponse(){	mResponseCode = IRC_UNDEFINED;}// ---------------------------------------------------------------------------//		¥ LIRCResponse()// ---------------------------------------------------------------------------//	Alternate ConstructorLIRCResponse::LIRCResponse(char * inData){	SetResponse(inData);}// ---------------------------------------------------------------------------//		¥ LIRCResponse()// ---------------------------------------------------------------------------//	Copy ConstructorLIRCResponse::LIRCResponse(const LIRCResponse& copyResponse)	:LInternetResponse(copyResponse){	mPrefix = copyResponse.mPrefix;	mCommandText = copyResponse.mCommandText;	mParams = copyResponse.mParams;}// ---------------------------------------------------------------------------//		¥ ~LIRCResponse// ---------------------------------------------------------------------------//	DestructorLIRCResponse::~LIRCResponse(){}// ---------------------------------------------------------------------------//		¥ SetResponse// ---------------------------------------------------------------------------//voidLIRCResponse::SetResponse(const char * inResponse){	StPointerBlock tempResponse((SInt32) (PP_STD::strlen(inResponse) + 1), true);	PP_STD::strcpy(tempResponse, inResponse);	char * p;	//Since IRC is so loosely defined, this contains the full	//	text of the response so that others can parse the message	//	themselves via a "unknown" broadcast	mResponseText = inResponse;	p = PP_STD::strtok(tempResponse, " ");	//Get the prefix	if (*p == ':') {		mPrefix = ++p;		p = PP_STD::strtok(nil, " ");	} else {		mPrefix = "";	}	//Determine if command is textual or numeric	if (PP_STD::isalpha(*p)) {		mCommandText = p;		mResponseCode = IRC_UNDEFINED;	} else {		mResponseCode = PP_STD::atol(p);		//Skip over the users nick following the numeric command...		p = PP_STD::strtok(nil, " ");	}	//Grab the rest as params...	p = PP_STD::strtok(nil, "");	//step over the leading colon if there is one	if (*p == ':')		p++;	mParams = p;}PP_End_Namespace_PowerPlant
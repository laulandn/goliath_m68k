/* * This file was generated by the SOM Compiler. * FileName: somcls.xh. * Generated using: *     SOM Precompiler somipc: 2.18 *     SOM Emitter emitxh.dll: 2.33 *//* *  *  	Copyright:	© 1994,1995 by Apple Computer, Inc. *  				All rights reserved. *  *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994 *    All Rights Reserved *    Licensed Materials - Property of IBM *    US Government Users Restricted Rights - Use, duplication or *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp. *  *   SOMObject: System Object Model root class */#ifndef SOM_SOMClass_xh#define SOM_SOMClass_xhclass SOMClass;/* *  *   This is the SOM metaclass.  That is, the instances of this class *   are class objects.  When the SOM environment is created an instance *   of SOMClass is created which is unique in that it is its own class *   object. I.e., somClassObj == _somGetClass(somClassObj). *   SOMClass can be subclassed just like any SOM class. The subclasses *   of SOMClass are new metaclasses and can generate class objects with *   different implementations than those produced by the kernel instance. *  *   An important rule for metaclass programming is that no methods *   introduced by SOMClass should ever be overridden. While this *   limits the utility of metaclass programming in SOM, it guarantees *   that SOM will operate correctly. Special class frameworks may be *   available to alleviate this restriction. *  */#define SOMClass_MajorVersion 70#define SOMClass_MinorVersion 1/* C++ SOM defs */#include <som.xh>/* C++ parent defs */#ifndef SOM_SOMObject_xh#include <somobj.xh>#endif#ifndef SOMClass_API#define SOMClass_API/* * -- The Class API *//* * Start of user-defined types: */class SOMClass;class SOMObject;#ifndef _IDL_SEQUENCE_SOMClass_defined#define _IDL_SEQUENCE_SOMClass_definedtypedef struct {    unsigned long _maximum;    unsigned long _length;    SOMClass **_buffer;} _IDL_SEQUENCE_SOMClass;#endif /* _IDL_SEQUENCE_SOMClass_defined */ typedef_IDL_SEQUENCE_SOMClass SOMClass_SOMClassSequence;/* *  a sequence of classes *  These methods are expected to be invoked by SOM clients */#ifndef SOM_DONT_USE_SHORT_NAMES#ifndef SOM_DONT_USE_SHORT_NAMES#ifndef SOMTGD_SOMClassSequence    #ifdef SOMClassSequence        #undef SOMClassSequence        #define SOMTGD_SOMClassSequence 1    #else        #define SOMClassSequence SOMClass_SOMClassSequence    #endif /* SOMClassSequence */#endif /* SOMTGD_SOMClassSequence */#endif /* SOM_DONT_USE_SHORT_NAMES */#endif /* SOM_DONT_USE_SHORT_NAMES *//* * End of user-defined types. */#ifdef OLDIBMSOMAPISUPPORT#define SOMClassCClassData SOMClassClassData#define SOMClassNewClass(major,minor) somNewVersionedClassReference(SOMClass,major,minor)#endif/* define xxxMetaClass macro to facilitate (cls ## MetaClass) */#define SOMClassMetaClass SOMClass#if PRAGMA_ALIGN_SUPPORTED#  pragma options align=power#endif/* The API to the SOMClass class object, and the methods it introduces. */SOMEXTERN struct SOMClassClassDataStructure {#ifdef OLDIBMSOMAPISUPPORT	SOMClass			*classObject;	/* always zero, use somNewClassReference instead */#else	long zero;#endif	somStaticClassInfo *sci;	somDToken		instanceDataToken;	long reserved [3];	somMToken somNew;	somMToken somRenew;	somMToken somClassReady;	somMToken somGetName;	somMToken somDescendedFrom;	somMToken somCheckVersion;	somMToken somFindMethod;	somMToken somFindMethodOk;	somMToken somSupportsMethod;	somMToken somGetNumMethods;	somMToken somGetInstanceSize;	somMToken somGetInstancePartSize;	somMToken somGetMethodIndex;	somMToken somGetNumStaticMethods;	somMToken somAddDynamicMethod;	somMToken somFindSMethod;	somMToken somFindSMethodOk;	somMToken somGetMethodDescriptor;	somMToken somGetNthMethodInfo;	somMToken somNewNoInit;	somMToken somRenewNoInit;	somMToken somGetInstanceToken;	somMToken somGetMethodData;	somMToken somGetMethodToken;	somMToken somGetParents;	somMToken somGetVersionNumbers;	somMToken somLookupMethod;	somMToken somRenewNoZero;	somMToken somRenewNoInitNoZero;	somMToken somAllocate;	somMToken somDeallocate;	somMToken somGetNthMethodData;	somMToken somMakeDynamicClassReference;} SOMDLINK SOMClassClassData;#if PRAGMA_ALIGN_SUPPORTED#  pragma options align=reset#endif#if !defined(SOMClass_Class_Source) && !defined(SOM_Module_somcls_Source)#if PRAGMA_IMPORT_SUPPORTED#pragma import list SOMClassClassData#endif#endif/* * -- Typedefs and inline method declarations for left path inherited methods * -- are omitted because this compilation had -museinheritedmethods in effect *//* * -- Typedefs for SOMClass Method Procedures */SOMEXTERN {typedef SOMObject*   (* SOMLINK somTD_SOMClass_somNew)(SOMClass *somSelf);typedef boolean   (* SOMLINK somTD_SOMClass_somMakeDynamicClassReference)(SOMClass *somSelf);typedef long   (* SOMLINK somTD_SOMClass_somGetInstancePartSize)(SOMClass *somSelf);typedef long   (* SOMLINK somTD_SOMClass_somGetInstanceSize)(SOMClass *somSelf);typedef corbastring   (* SOMLINK somTD_SOMClass_somGetName)(SOMClass *somSelf);typedef somDToken   (* SOMLINK somTD_SOMClass_somGetInstanceToken)(SOMClass *somSelf);typedef long   (* SOMLINK somTD_SOMClass_somGetNumMethods)(SOMClass *somSelf);typedef long   (* SOMLINK somTD_SOMClass_somGetNumStaticMethods)(SOMClass *somSelf);typedef boolean   (* SOMLINK somTD_SOMClass_somGetMethodData)(SOMClass *somSelf,		somId methodId,		somMethodData* md);typedef somKernelId   (* SOMLINK somTD_SOMClass_somGetMethodDescriptor)(SOMClass *somSelf,		somId methodId);typedef somMToken   (* SOMLINK somTD_SOMClass_somGetMethodToken)(SOMClass *somSelf,		somId methodId);typedef void   (* SOMLINK somTD_SOMClass_somAddDynamicMethod)(SOMClass *somSelf,		somId methodId,		somId methodDescriptor,		somMethodPtr method,		somMethodPtr applyStub);typedef long   (* SOMLINK somTD_SOMClass_somGetMethodIndex)(SOMClass *somSelf,		somId id);typedef boolean   (* SOMLINK somTD_SOMClass_somGetNthMethodData)(SOMClass *somSelf,		long n,		somMethodData* md);typedef somKernelId   (* SOMLINK somTD_SOMClass_somGetNthMethodInfo)(SOMClass *somSelf,		long n,		somKernelId* descriptor);typedef boolean   (* SOMLINK somTD_SOMClass_somFindMethod)(SOMClass *somSelf,		somId methodId,		somMethodPtr* m);typedef boolean   (* SOMLINK somTD_SOMClass_somFindMethodOk)(SOMClass *somSelf,		somId methodId,		somMethodPtr* m);typedef somMethodPtr   (* SOMLINK somTD_SOMClass_somFindSMethod)(SOMClass *somSelf,		somId methodId);typedef somMethodPtr   (* SOMLINK somTD_SOMClass_somFindSMethodOk)(SOMClass *somSelf,		somId methodId);typedef somMethodPtr   (* SOMLINK somTD_SOMClass_somLookupMethod)(SOMClass *somSelf,		somId methodId);typedef corbastring   (* SOMLINK somTD_SOMClass_somAllocate)(SOMClass *somSelf,		long size);typedef void   (* SOMLINK somTD_SOMClass_somDeallocate)(SOMClass *somSelf,		corbastring memptr);typedef void   (* SOMLINK somTD_SOMClass_somClassReady)(SOMClass *somSelf);typedef void   (* SOMLINK somTD_SOMClass_somGetVersionNumbers)(SOMClass *somSelf,		long* majorVersion,		long* minorVersion);typedef boolean   (* SOMLINK somTD_SOMClass_somCheckVersion)(SOMClass *somSelf,		long majorVersion,		long minorVersion);typedef boolean   (* SOMLINK somTD_SOMClass_somDescendedFrom)(SOMClass *somSelf,		SOMClass* aClassObj);typedef boolean   (* SOMLINK somTD_SOMClass_somSupportsMethod)(SOMClass *somSelf,		somId mId);typedef SOMObject*   (* SOMLINK somTD_SOMClass_somNewNoInit)(SOMClass *somSelf);typedef SOMObject*   (* SOMLINK somTD_SOMClass_somRenew)(SOMClass *somSelf,		void* memptr);typedef SOMObject*   (* SOMLINK somTD_SOMClass_somRenewNoInit)(SOMClass *somSelf,		void* memptr);typedef SOMObject*   (* SOMLINK somTD_SOMClass_somRenewNoZero)(SOMClass *somSelf,		void* memptr);typedef SOMObject*   (* SOMLINK somTD_SOMClass_somRenewNoInitNoZero)(SOMClass *somSelf,		void* memptr);typedef SOMClass_SOMClassSequence   (* SOMLINK somTD_SOMClass_somGetParents)(SOMClass *somSelf);}#endif /* SOMClass_API *//* * -- This emitter treats Method Tokens as Thunks by default. * -- Use the sc modifier "nothunks" to change this default */#undef somresolve_#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))/* * -- The C++ Wrapper Class for SOMClass */class SOMClass : public SOMObject{public:// SOMClass::new registers use of the class object, and then uses somNew// to allocate memory and load the object method table pointer. void *operator new(size_t size){    SOM_IgnoreWarning(size);    // Allocate memory using the default allocator for SOMClass, and    // clear mem & set method table pointer, call basic initialization    return (void*) somNewObject(SOMClass);}// SOMClass::delete uses the default deallocator for the object's class.void operator delete(void * obj){    if (obj) {        SOM_Resolve(obj,SOMObject,somFree)           ( (SOMObject*) obj );    }}/* method: somNew */SOMObject*   somNew(){   return SOM_ResolveD(this,SOMClass,SOMClass,somNew)	(this);}/* method: somMakeDynamicClassReference */boolean   somMakeDynamicClassReference(){   return SOM_ResolveD(this,SOMClass,SOMClass,somMakeDynamicClassReference)	(this);}/* method: somGetInstancePartSize */long   somGetInstancePartSize(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstancePartSize)	(this);}/* method: somGetInstanceSize */long   somGetInstanceSize(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceSize)	(this);}/* method: somGetName */corbastring   somGetName(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetName)	(this);}/* method: somGetInstanceToken */somDToken   somGetInstanceToken(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceToken)	(this);}/* method: somGetNumMethods */long   somGetNumMethods(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNumMethods)	(this);}/* method: somGetNumStaticMethods */long   somGetNumStaticMethods(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNumStaticMethods)	(this);}/* method: somGetMethodData */boolean   somGetMethodData(somId methodId,		somMethodData* md){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodData)	(this,methodId,md);}/* method: somGetMethodDescriptor */somKernelId   somGetMethodDescriptor(somId methodId){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodDescriptor)	(this,methodId);}/* method: somGetMethodToken */somMToken   somGetMethodToken(somId methodId){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodToken)	(this,methodId);}/* method: somAddDynamicMethod */void   somAddDynamicMethod(somId methodId,		somId methodDescriptor,		somMethodPtr method,		somMethodPtr applyStub){   SOM_ResolveD(this,SOMClass,SOMClass,somAddDynamicMethod)	(this,methodId,methodDescriptor,method,applyStub);}/* method: somGetMethodIndex */long   somGetMethodIndex(somId id){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodIndex)	(this,id);}/* method: somGetNthMethodData */boolean   somGetNthMethodData(long n,		somMethodData* md){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNthMethodData)	(this,n,md);}/* method: somGetNthMethodInfo */somKernelId   somGetNthMethodInfo(long n,		somKernelId* descriptor){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNthMethodInfo)	(this,n,descriptor);}/* method: somFindMethod */boolean   somFindMethod(somId methodId,		somMethodPtr* m){   return SOM_ResolveD(this,SOMClass,SOMClass,somFindMethod)	(this,methodId,m);}/* method: somFindMethodOk */boolean   somFindMethodOk(somId methodId,		somMethodPtr* m){   return SOM_ResolveD(this,SOMClass,SOMClass,somFindMethodOk)	(this,methodId,m);}/* method: somFindSMethod */somMethodPtr   somFindSMethod(somId methodId){   return SOM_ResolveD(this,SOMClass,SOMClass,somFindSMethod)	(this,methodId);}/* method: somFindSMethodOk */somMethodPtr   somFindSMethodOk(somId methodId){   return SOM_ResolveD(this,SOMClass,SOMClass,somFindSMethodOk)	(this,methodId);}/* method: somLookupMethod */somMethodPtr   somLookupMethod(somId methodId){   return SOM_ResolveD(this,SOMClass,SOMClass,somLookupMethod)	(this,methodId);}/* method: somAllocate */corbastring   somAllocate(long size){   return SOM_ResolveD(this,SOMClass,SOMClass,somAllocate)	(this,size);}/* method: somDeallocate */void   somDeallocate(corbastring memptr){   SOM_ResolveD(this,SOMClass,SOMClass,somDeallocate)	(this,memptr);}/* method: somClassReady */void   somClassReady(){   SOM_ResolveD(this,SOMClass,SOMClass,somClassReady)	(this);}/* method: somGetVersionNumbers */void   somGetVersionNumbers(long* majorVersion,		long* minorVersion){   SOM_ResolveD(this,SOMClass,SOMClass,somGetVersionNumbers)	(this,majorVersion,minorVersion);}/* method: somCheckVersion */boolean   somCheckVersion(long majorVersion,		long minorVersion){   return SOM_ResolveD(this,SOMClass,SOMClass,somCheckVersion)	(this,majorVersion,minorVersion);}/* method: somDescendedFrom */boolean   somDescendedFrom(SOMClass* aClassObj){   return SOM_ResolveD(this,SOMClass,SOMClass,somDescendedFrom)	(this,aClassObj);}/* method: somSupportsMethod */boolean   somSupportsMethod(somId mId){   return SOM_ResolveD(this,SOMClass,SOMClass,somSupportsMethod)	(this,mId);}/* method: somNewNoInit */SOMObject*   somNewNoInit(){   return SOM_ResolveD(this,SOMClass,SOMClass,somNewNoInit)	(this);}/* method: somRenew */SOMObject*   somRenew(void* memptr){   return SOM_ResolveD(this,SOMClass,SOMClass,somRenew)	(this,memptr);}/* method: somRenewNoInit */SOMObject*   somRenewNoInit(void* memptr){   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoInit)	(this,memptr);}/* method: somRenewNoZero */SOMObject*   somRenewNoZero(void* memptr){   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoZero)	(this,memptr);}/* method: somRenewNoInitNoZero */SOMObject*   somRenewNoInitNoZero(void* memptr){   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoInitNoZero)	(this,memptr);}/* method: somGetParents */SOMClass_SOMClassSequence   somGetParents(){   return SOM_ResolveD(this,SOMClass,SOMClass,somGetParents)	(this);}};   /* SOMClass */#endif       /* SOM_SOMClass_xh */
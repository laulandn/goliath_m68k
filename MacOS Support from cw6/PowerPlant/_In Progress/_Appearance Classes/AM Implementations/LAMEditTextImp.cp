// ===========================================================================//	LAMEditTextImp.cp			PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================////	Implementation for Appearance Manager EditText item.////	The class does not create a ControlHandle and it inherits from//	LControlImp rather than LAMControlImp.////	The LEditText ControlPane handles everything related to the text.//	The only thing this class does is draw the frame and focus ring//	around the text area.#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LAMEditTextImp.h>#include <LEditText.h>#include <UDrawingState.h>#include <Appearance.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LAMEditTextImp						Constructor				  [public]// ---------------------------------------------------------------------------LAMEditTextImp::LAMEditTextImp(	LControlPane*	inControlPane)	: LControlImp(inControlPane){}// ---------------------------------------------------------------------------//	¥ LAMEditTextImp						Stream Constructor		  [public]// ---------------------------------------------------------------------------//	Do not access inStream. It may be nil. Read Stream data in Init()LAMEditTextImp::LAMEditTextImp(	LStream*	inStream)	: LControlImp(inStream){}// ---------------------------------------------------------------------------//	¥ ~LAMEditTextImp						Destructor				  [public]// ---------------------------------------------------------------------------LAMEditTextImp::~LAMEditTextImp(){}#pragma mark -// ---------------------------------------------------------------------------//	¥ DrawSelf														  [public]// ---------------------------------------------------------------------------voidLAMEditTextImp::DrawSelf(){	Rect	frame;	CalcLocalFrameRect(frame);	ThemeDrawState	state = kThemeStateInactive;	if (IsActive() && IsEnabled()) {		state = kThemeStateActive;	}	mControlPane->ApplyForeAndBackColors();	::PenNormal();		// The Toolbox routines for drawing the 3D border and focus		// ring take a Rect that should be the same as the inner		// border around the edit field. This is 3 pixels inset		// from our Frame, which encloses the focus ring surrounding		// the inner border.	::MacInsetRect(&frame, 3, 3);		// The focus ring draws over the outer edge of the 3D		// border. Thus, we must draw the ring after the border		// if the ring is visible. But, when the ring is not		// visible, we must draw it first so that it erases the		// area that would have been covered by a ring.	if (((LEditText*) mControlPane)->HasFocusRing()) {		::DrawThemeEditTextFrame(&frame, state);		::DrawThemeFocusRect(&frame, true);	} else {		::DrawThemeFocusRect(&frame, false);		::DrawThemeEditTextFrame(&frame, state);	}}PP_End_Namespace_PowerPlant
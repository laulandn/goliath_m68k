/*  Metrowerks Standard Library  *//*  $Date: 2000/08/09 20:18:28 $  *  $Revision: 1.8.18.9.2.2 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. */#ifndef	_UNISTD#define	_UNISTD #include <ansi_parms.h>  /* m.f. 042898 */#include <size_t.h>     /* mm 000607  */#pragma options align=native#ifndef __stdio__	/* macros for whence parameter of lseek() (taken from <stdio.h> */	#define SEEK_SET	0	#define SEEK_CUR	1	#define SEEK_END	2#endif#if !defined(__dest_os)               	#error __dest_os undefined                                               /*MW-mm 960927a*/#endif#ifdef __cplusplusextern "C" {#endif /* The following are symbolic constants for access() */		/* mm 991216 *//* See Posix 2.9.1 */ 										/* mm 991216 */#define F_OK	0		/* Test for existence of file */	/* mm 991216 */#define W_OK	2		/* Test for write permission  */	/* mm 991216 */#define R_OK	4		/* Test for read permission   */	/* mm 991216 */#define X_OK	0		/* Test for execute permission--temporary--don't know what                           value this should have --m.f. 000403   */	_MSL_IMP_EXP_C int   			_chdir(const char*);_MSL_IMP_EXP_C int   			_close(int);_MSL_IMP_EXP_C char*        	_cuserid(char* );_MSL_IMP_EXP_C int         	_exec(const char*,...);/* need to make these common after Pro6 */#if (__dest_os == __mac_os) 	#ifdef _POSIX			#define execl			_exec		#define execv			_exec		#define execle			_exec		#define execle			_exec		#define execve			_exec		#define execlp			_exec		#define execvp			_exec	#endif  /* POSIX */#endif_MSL_IMP_EXP_C char* 			_getcwd(char *, int);_MSL_IMP_EXP_C char*        	_getlogin(void);_MSL_IMP_EXP_C long 			_lseek(int, long, int);_MSL_IMP_EXP_C int  			_isatty(int);_MSL_IMP_EXP_C int   			_read(int , void*, __std(size_t));			/* mm 000607  */_MSL_IMP_EXP_C int  			_rmdir(const char*);_MSL_IMP_EXP_C unsigned int 	_sleep(unsigned int);_MSL_IMP_EXP_C char*        	_ttyname(int );_MSL_IMP_EXP_C int   			_unlink(const char*);_MSL_IMP_EXP_C int   			_write(int , const void*, __std(size_t));	/* mm 000607  */_MSL_IMP_EXP_C int   			_access(const char*, int);#if (__dest_os	== __win32_os)	_MSL_IMP_EXP_C int 			_getpid(void);#else  	__inline  int 			_getpid() {return((int) 9000);}	#endif#ifdef _POSIX__inline  int  			chdir(const char *_a)     {return  _chdir(_a)    ;} __inline  char*  	    cuserid(char *_a ) {return _cuserid(_a )  ;} __inline  int     	    exec(const char *_a,...)  {return _exec(_a) ;} __inline  char* 		getcwd(char *_a, int _b)  {return  _getcwd(_a,_b);} __inline  char*    	    getlogin(void)     {return _getlogin()    ;} __inline  int  			isatty(int _tmp ){ return _isatty(_tmp);}#if __BUILDING_MPW__ && __MC68K__/* JWW - These items cannot be inlined since they're part of the 68K MPW runtime library */int close(int);long lseek(int, long, int);int read(int, void *, __std(size_t));int write(int, void *, __std(size_t));int access(const char, int);int unlink(const char);#else__inline  int 			close(int _a)             {return  _close( _a)   ;} __inline  long 			lseek(int _a, long _b, int _c ){ return _lseek( _a,  _b,  _c );}__inline  int  			read(int _a, void *_b, __std(size_t) _c ){ return _read( _a, _b,  _c ); }    /* mm 000607  */__inline  int  			write(int _a, void *_b, __std(size_t) _c) {return _write( _a,  _b,  _c ); }__inline  int  			access(const char *_a, int _b)  {return _access(_a,  _b);} __inline  int  			unlink(const char *_a)     {return  _unlink(_a)   ;} #endif /* __BUILDING_MPW__ && __MC68K__ */__inline  int  			rmdir(const char *_a)     {return  _rmdir(_a)    ;} __inline  unsigned int 	sleep(unsigned int _a )  {return _sleep( _a ) ;} __inline  char*     		ttyname(int _a)    {return _ttyname(_a)   ;} __inline  int 			getpid() {return _getpid();}		/* bc 990317 */__inline  int 			getppid() {return((int) 8000);}	/* mm 990106 */__inline  int 			getuid() {return((int) 200);}	/* mm 990106 */__inline  int 			geteuid() {return((int) 200);}	/* mm 990106 */__inline  int 			getgid() {return((int) 100);}	/* mm 990106 */__inline  int 			getegid() {return((int) 100);}	/* mm 990106 */__inline  int 			getpgrp() {return((int) 9000);}	/* mm 990106 */#endif  /* POSIX */#ifdef __cplusplus}#endif#pragma options align=reset#endif  /* unistd.h *//*     Change record * MW-mm 960927a Inserted setting of __dest_os to __mac_os when not otherwise set. *  mf 980428 included ansi_parms.h and use #error instead of mac_os by default * vss 990115 removed powerTV *  cc 000320 moved common functions here from unistd.win.h and unistd.mac.h *  cc 000502 dest_os _getpid() *  mm 000607 Changed definitions of read and write to accord with POSIX Standard. * JWW 000727 Uninlined various routines when compiling for 68K MPW *  cc 000809 added execl and other defines to mac only.  It is too late to add to win  			  will fix after pro6*/
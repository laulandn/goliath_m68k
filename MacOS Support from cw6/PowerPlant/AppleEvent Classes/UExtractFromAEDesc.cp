// ===========================================================================//	UExtractFromAEDesc.cp	  	PowerPlant 2.1		©1993-1999 Metrowerks Inc.// ===========================================================================////	Functions for extracting data from AppleEvent Descriptor (AEDesc) records#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UExtractFromAEDesc.h>#include <AERegistry.h>PP_Begin_Namespace_PowerPlant#pragma once off// ---------------------------------------------------------------------------#define		Extractor_Name		TheInt16#define		C_DataType			SInt16#define		AE_DataType			typeShortInteger#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheInt32#define		C_DataType			SInt32#define		AE_DataType			typeLongInteger#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		ThePoint#define		C_DataType			Point#define		AE_DataType			typeQDPoint#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheRect#define		C_DataType			Rect#define		AE_DataType			typeQDRectangle#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheBoolean#define		C_DataType			Boolean#define		AE_DataType			typeBoolean#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheType#define		C_DataType			OSType#define		AE_DataType			typeType#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheEnum#define		C_DataType			OSType#define		AE_DataType			typeEnumerated#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheRGBColor#define		C_DataType			RGBColor#define		AE_DataType			typeRGBColor#include <AEDescExtractor.t>// ---------------------------------------------------------------------------voidUExtractFromAEDesc::ThePString (	const AEDesc	&inDesc,	Str255			outString){#if ACCESSOR_CALLS_ARE_FUNCTIONS	AEDesc	coerceDesc = {typeNull, nil};	if (::AECoerceDesc(&inDesc, typeChar, &coerceDesc) == noErr) {		SInt32	strLength = ::AEGetDescDataSize(&coerceDesc);		if (strLength > 255) strLength = 255;		outString[0] = (UInt8) strLength;		OSErr err = ::AEGetDescData(&coerceDesc, outString + 1, 255);		::AEDisposeDesc(&coerceDesc);		ThrowIfOSErr_(err);	} else {						// Coercion failed		ThrowOSErr_(errAETypeError);	}#else	Handle	dataH;	AEDesc	coerceDesc = {typeNull, nil};	if (inDesc.descriptorType == typeChar) {		dataH = inDesc.dataHandle;		// Descriptor is the type we want	} else {							// Try to coerce to the desired type		if (::AECoerceDesc(&inDesc, typeChar, &coerceDesc) == noErr) {										// Coercion succeeded			dataH = coerceDesc.dataHandle;		} else {						// Coercion failed			ThrowOSErr_(errAETypeError);		}	}	SInt32	strLength = ::GetHandleSize(dataH);	if (strLength > 255) strLength = 255;	::BlockMoveData(*dataH, outString+1, strLength);	outString[0] = (UInt8) strLength;	if (coerceDesc.dataHandle != nil) {		::AEDisposeDesc(&coerceDesc);	}#endif}PP_End_Namespace_PowerPlant
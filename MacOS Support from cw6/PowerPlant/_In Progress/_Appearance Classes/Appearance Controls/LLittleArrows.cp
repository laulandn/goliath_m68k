// ===========================================================================//	LLittleArrows.cp			PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LLittleArrows.h>#include <LControlImp.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LLittleArrows							Stream Constructor		  [public]// ---------------------------------------------------------------------------LLittleArrows::LLittleArrows(	LStream*	inStream,	ClassIDT	inImpID)	: LControlPane(inStream, inImpID){}// ---------------------------------------------------------------------------//	¥ LLittleArrows							Parameterized Constructor [public]// ---------------------------------------------------------------------------LLittleArrows::LLittleArrows(	const SPaneInfo&	inPaneInfo,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue,	ClassIDT			inImpID)	: LControlPane(inPaneInfo, inImpID, kControlLittleArrowsProc,						Str_Empty, 0, inValueMessage, inValue,						inMinValue, inMaxValue){}// ---------------------------------------------------------------------------//	¥ InitLittleArrows						Initializer				 [private]// ---------------------------------------------------------------------------voidLLittleArrows::InitLittleArrows(){	if (mValue < mMinValue) {		// Enforce min/max range		mValue = mMinValue;	} else if (mValue > mMaxValue) {		mValue = mMaxValue;	}	mControlImp->SetValue(mValue);}// ---------------------------------------------------------------------------//	¥ ~LLittleArrows						Destructor				  [public]// ---------------------------------------------------------------------------LLittleArrows::~LLittleArrows(){}// ---------------------------------------------------------------------------//	¥ DoTrackAction													  [public]// ---------------------------------------------------------------------------voidLLittleArrows::DoTrackAction(	SInt16		inHotSpot,	SInt32		/* inValue */){	if (inHotSpot == kControlUpButtonPart) {		SetValue(mValue + 1);	} else if (inHotSpot == kControlDownButtonPart) {		SetValue(mValue - 1);	}}// ---------------------------------------------------------------------------//	¥ SimulateHotSpotClick											  [public]// ---------------------------------------------------------------------------//	Simulate a mouse click within the up or down arrow////	Provide the same visual feedback and result as if the user clicked//	inside an arrow. This function may be used to implement keystroke//	equivalents for arrow clicks.voidLLittleArrows::SimulateHotSpotClick(	SInt16	inHotSpot){	if (IsEnabled()) {		unsigned long	ticks;		HotSpotAction(inHotSpot, true, false);	// Do action for click inside		::Delay(delay_Feedback, &ticks);		// Wait so user can see effect		HotSpotAction(inHotSpot, false, true);	// Undo visual effect		DoTrackAction(inHotSpot, mValue);	}}PP_End_Namespace_PowerPlant
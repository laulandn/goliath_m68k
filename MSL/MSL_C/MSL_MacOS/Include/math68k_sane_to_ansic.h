/*  Metrowerks Standard Library  *//*  $Date: 1999/01/30 02:58:28 $  *  $Revision: 1.3 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//* *	math68k_sane_to_ansic.h *//* note: Sane is not strictly ansi c compliant.  One important way SANE         deviates from ANSI/ISO C is that the C standard specifies that all math functions take and return         double arguments. SANE is centered around the IEEE 10 byte extended type.         all math functions as documented by SANE take and return the extended type.           This in general will be benificial to floating point calculation on 68K.                             This header file provides prototypes to wrapper functions that will first call the corresponding SANE          routine but will then return a demoted 8 byte double instead of an equivalent 80 floating point value.          This is detrimental to performance as the overhead of an additional function call is         required. Do not include this header directly as it relies on settings in the standard math.h header. Also,         do not call these functions directly(they are implementation details of the library and not general purpose         functions).         There is a known problem. the prototypes in the universal header fp.h on 68K match those specified by SANE         and thus conflict with the names in the C standard and in ourstandard header math.h.  math.h is protected          from this by using __FP wrappers, but fp.h is not.  So if you include fp.h first you shouldn't have this problem.         We are working with Apple on resolving this issue                */  double cosd(double);  double sind(double);  double tand(double);  double acosd(double);  double asind(double);  double atand(double);  double atan2d(double, double);  double coshd(double);  double sinhd(double);  double tanhd(double);  double expd(double);  double fabsd(double);  double frexpd(double, int *);  double ldexpd(double, int);  double logd(double);  double log10d(double);  double modfd(double, double *);  double powd(double, double);  double sqrtd(double);  double ceild(double);  double floord(double);  double fmodd(double, double);  /* C9X stuff */	 	 double __acoshd ( double x );    double __asinhd ( double x ); 	 double __atanhd ( double x );  	 double __exp2d  ( double x );	 double __expm1d ( double x );  	 double __log1pd ( double x ); 	 double __log2d  ( double x );	 double __logbd  ( double x );	 double __scalbd ( double x, double y );   	 double __hypotd ( double x, double y );	 double __erfd ( double x );		 double __erfcd ( double x );	 double __gammad ( double x );	 double __lgammad ( double x );	 double __rintd ( double x );   double __roundd ( double x );	 double __remainderd ( double x, double y );	 double __remquod ( double x, double y, int);  	 double __copysignd ( double x, double y );	 double __nand  ( const char *tagp );	 double __fdimd ( double x, double y );	 double __fmaxd ( double x, double y );	 double __fmind ( double x, double y );	 #ifndef __cplusplus #define  cos       cosd #define  sin       sind  #define  tan       tand  #define  acos      acosd  #define  asin      asind  #define  atan      atand  #define  atan2     atan2d #define  cosh      coshd  #define  sinh      sinhd  #define  tanh      tanhd  #define  exp       expd  #define  frexp     frexpd #define  ldexp     ldexpd #define  log       logd  #define  log10     log10d  #define  modf      modfd #define  fabs      fabsd  #define  pow       powd #define  sqrt      sqrtd  #define  ceil      ceild  #define  floor     floord  #define  fmod      fmodd#else #ifdef _MSL_USING_NAMESPACE		namespace std { #endif     inline double acos (double x)			{return (double)acosd((long double)x);}					inline double asin (double x)			{return (double)asind((long double)x);}					inline double atan (double x)					{return (double)atand((long double)x);}							inline double atan2(double x, double y)			{return (double)atan2d((long double)x,(long double)y);}					inline double ceil (double x)			{return (double)ceild((long double)x);}					inline double cos  (double x)			{return (double)cosd((long double)x);}					inline double cosh (double x)			{return (double)coshd((double)x);}					inline double exp  (double x)			{return (double)expd((long double)x);}					inline double fabs (double x)			{return (double)fabsd((long double)x);}					inline double floor(double x)			{return (double)floord((long double)x);}					inline double fmod (double x, double y)			{return (double)fmodd((long double)x, (long double)y);}					inline double frexp(double x, int* y)			{return (double)frexpd((long double)x, y);}					inline double ldexp(double x, int y)			{return (double)ldexpd((long double)x, y);}					inline double log  (double x)			{return (double)logd((long double)x);}					inline double log10(double x)			{return (double)log10d((long double)x);}					inline double modf (double x, double* y)			{return (double)modfl((long double)x, (long double*)y);}					inline double pow  (double x, double y)			{return (double)powd(x,y);}				inline double sin  (double x)			{return (double)sind((long double)x);}					inline double sinh (double x)			{return (double)sinhd((long double)x);}					inline double sqrt (double x)			{return (double)sqrtd((long double)x);}					inline double tan  (double x)			{return (double)tand((long double)x);}					inline double tanh (double x)			{return (double)tanhd((long double)x);}			#ifdef _MSL_USING_NAMESPACE		} /* end namespace std */	#endif			#endif /* #ifndef __cplusplus *//* Change Record: mf-- 062198  -- the "d" macros completely broke the entire library for C++ */
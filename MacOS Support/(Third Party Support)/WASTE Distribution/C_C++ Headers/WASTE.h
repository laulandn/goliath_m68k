/* *	WASTE.h * *	C/C++ interface to the WASTE text engine * *	version 2.1a8 (May 2002) * *	Copyright (c) 1993-2002 Marco Piovanelli *	All Rights Reserved * *	<http://www.merzwaren.com/waste/> *	<mailto:waste@merzwaren.com> * */#ifndef __WASTE__#define __WASTE__#ifdef __MACH__/* framework-style #includes */#ifdef __MWERKS__#ifndef __CF_USE_FRAMEWORK_INCLUDES__#define __CF_USE_FRAMEWORK_INCLUDES__#endif/* Carbon Core */#ifndef __CONDITIONALMACROS__#include <CarbonCore/ConditionalMacros.h>#endif#ifndef __MACTYPES__#include <CarbonCore/MacTypes.h>#endif/* Quickdraw */#ifndef __QUICKDRAWTEXT__#include <QD/QuickdrawText.h>#endif#ifndef __QUICKDRAW__#include <QD/Quickdraw.h>#endif/* HI Toolbox */#ifndef __TEXTEDIT__#include <HIToolbox/TextEdit.h>#endif#ifndef __DRAG__#include <HIToolbox/Drag.h>#endif#ifndef __CARBONEVENTS__#include <HIToolbox/CarbonEvents.h>#endif#else/* Carbon Master Include */#ifndef __CARBON__#include <Carbon/Carbon.h>#endif#endif#else/* flat #includes */#ifndef __CONDITIONALMACROS__#include <ConditionalMacros.h>#endif#if !defined(UNIVERSAL_INTERFACES_VERSION) || (UNIVERSAL_INTERFACES_VERSION < 0x340)#error "You need Universal Headers version 3.4 or newer to use WASTE.h"#endif#ifndef __MACTYPES__#include <MacTypes.h>#endif#ifndef __QUICKDRAWTEXT__#include <QuickdrawText.h>#endif#ifndef __QUICKDRAW__#include <Quickdraw.h>#endif#ifndef __TEXTEDIT__#include <TextEdit.h>#endif#ifndef __DRAG__#include <Drag.h>#endif#ifndef __CARBONEVENTS__#include <CarbonEvents.h>#endif#ifndef __SCRAP__#include <Scrap.h>#endif#endif /*defined(__MACH__)*/#ifdef __cplusplusextern "C" {#endif#ifndef __LONGCOORDINATES__#ifndef _LongCoords_#define _LongCoords_typedef struct LongPt{	SInt32 v;	SInt32 h;} LongPt;typedef struct LongRect{	SInt32 top;	SInt32 left;	SInt32 bottom;	SInt32 right;} LongRect;#endif /*_LongCoords_*/#endif /*__LONGCOORDINATES__*/#if PRAGMA_STRUCT_ALIGN#pragma options align=mac68k#endif#if PRAGMA_IMPORT#pragma import on#endif/*	The macro WASTE_VERSION expands to the current version of WASTE,	*//*	expressed in standard NumVersion format (see <MacTypes.h>)			*/#define WASTE_VERSION	0x02104008		/* 2.1a8 *//*	Set the macro WASTE_DEPRECATED to 0 before #including WASTE.h		*//*	to prevent the definition of deprecated APIs and data types			*/#ifndef WASTE_DEPRECATED#define WASTE_DEPRECATED		1#endif/*	result codes */enum{	weCantUndoErr				=	-10015,	/* undo buffer is clear (= errAECantUndo) */	weEmptySelectionErr			=	-10013,	/* selection range is empty (= errAENoUserSelection) */	weUnknownObjectTypeErr		=	-9478,	/* specified object type is not registered */	weObjectNotFoundErr			=	-9477,	/* no object found at specified offset */	weReadOnlyErr				=	-9476,	/* instance is read-only */	weTextNotFoundErr			=	-9474,	/* search string not found */	weInvalidTextEncodingErr	=	-9473,	/* specified text encoding is invalid or unsupported */	weDuplicateAttributeErr		=	-9472,	/* one of the attribute selectors was specified more than once */	weInvalidAttributeSizeErr	=	-9471,	/* attribute value size is invalid */	weReadOnlyAttributeErr		=	-9470,	/* attribute is read-only */	weOddByteCountErr			=	-9469,	/* expected an even number of bytes */	weHandlerNotFoundErr		=	-1717,	/* couldn't find specified handler (= errAEHandlerNotFound) */	weNotHandledErr				=	-1708,	/* please use default behavior (= errAEEventNotHandled) */	weNewerVersionErr			=	-1706,	/* version of formatting scrap is too new (= errAENewerVersion) */	weCorruptDataErr			=	-1702,	/* malformed formatting scrap (= errAECorruptData) */	weProtocolErr				=	-603,	/* improper call order (= protocolErr) */	weUndefinedSelectorErr		=	-50		/* unknown selector (= paramErr) */};#if WASTE_DEPRECATED/*	alignment styles */enum{	weFlushLeft 		=	-2,		/* flush left */	weFlushRight		=	-1,		/* flush right */	weFlushDefault		=	 0,		/* flush according to system direction */	weCenter			=	 1,		/* centered */	weJustify			=	 2		/* fully justified */};/*	primary line direction */enum{	weDirDefault		=	 1,		/* according to system direction */	weDirRightToLeft	=	-1,		/* force right-to-left */	weDirLeftToRight	=	 0		/* force left-to-right */};/*	values for the inMode parameter in WESetStyle and the ioMode parameter in WEContinuousStyle */enum{	weDoFont				=	0x0001,	weDoFace				=	0x0002,	weDoSize				=	0x0004,	weDoColor				=	0x0008,	weDoAll					=	weDoFont | weDoFace | weDoSize | weDoColor,	weDoAddSize				=	0x0010,	weDoToggleFace			=	0x0020,	weDoReplaceFace			=	0x0040,	weDoPreserveScript		=	0x0080,	weDoExtractSubscript	=	0x0100,	weDoFaceMask			=	0x0200};/*	values for the inMode parameter in WESetRuler and the ioMode parameter in WEContinuousRuler */enum{	weDoDirection			=	0x00000001,	weDoAlignment			=	0x00000002,	weDoLeftIndent			=	0x00000004,	weDoRightIndent			=	0x00000008,	weDoFirstLineIndent		=	0x00000010,	weDoLineSpacing			=	0x00000020,	weDoSpaceBefore			=	0x00000040,	weDoSpaceAfter			=	0x00000080,	weDoBottomBorderStyle	=	0x00000400};#endif /*WASTE_DEPRECATED*//*	values for the outEdge parameter in WEGetOffset etc. */enum{	kLeadingEdge			=	-1,		/* point is on the leading edge of a glyph */	kTrailingEdge			=	 0,		/* point is on the trailing edge of a glyph */	kObjectEdge				=	 2		/* point is in the middle of an embedded object */};/*	values for the inFeature parameter in WEFeatureFlag */enum{	weFAutoScroll			=	0,		/* automatically scroll the selection range into view */	weFAutoIdle				=	1,		/* automatically blink the caret (Carbon only) */	weFOutlineHilite		=	2,		/* frame selection when deactivated */	weFReadOnly				=	5,		/* disallow modifications */	weFUndo					=	6,		/* support WEUndo() */	weFIntCutAndPaste		=	7,		/* use intelligent cut-and-paste rules */	weFDragAndDrop			=	8,		/* support drag-and-drop text editing */	weFInhibitRecal			=	9,		/* don't recalculate line starts and don't redraw text */	weFUseTempMem			=	10,		/* use temporary memory for main data structures */	weFDrawOffscreen		=	11,		/* draw text offscreen for smoother visual results */	weFInhibitRedraw		=	12,		/* don't redraw text */	weFMonoStyled			=	13,		/* disallow style changes */	weFMultipleUndo			=	14,		/* enable multiple undo/redo */	weFLeftMarginClick		=	16,		/* enable single-click selection of lines */	weFNoKeyboardSync		=	29,		/* disable automatic font/keyboard synchronization */	weFInhibitICSupport		=	30,		/* don't process command-clicks with Internet Config */	weFInhibitColor			=	31		/* ignore color information; draw in black & white only */};/*	values for the inOptions parameter in WENew */enum{	weDoAutoScroll			=	1UL << weFAutoScroll,	weDoAutoIdle			=	1UL << weFAutoIdle,	weDoOutlineHilite		=	1UL << weFOutlineHilite,	weDoReadOnly			=	1UL << weFReadOnly,	weDoUndo				=	1UL << weFUndo,	weDoIntCutAndPaste		=	1UL << weFIntCutAndPaste,	weDoDragAndDrop			=	1UL << weFDragAndDrop,	weDoInhibitRecal		=	1UL << weFInhibitRecal,	weDoUseTempMem			=	1UL << weFUseTempMem,	weDoDrawOffscreen		=	1UL << weFDrawOffscreen,	weDoInhibitRedraw		=	1UL << weFInhibitRedraw,	weDoMonoStyled			=	1UL << weFMonoStyled,	weDoMultipleUndo		=	1UL << weFMultipleUndo,	weDoLeftMarginClick		=	1UL << weFLeftMarginClick,	weDoNoKeyboardSync		=	1UL << weFNoKeyboardSync,	weDoInhibitICSupport	=	1UL << weFInhibitICSupport,	weDoInhibitColor		=	1UL << weFInhibitColor};/*	values for the inAction parameter in WEFeatureFlag */enum{	weBitToggle				=	-2,		/* toggles the specified feature */	weBitTest				=	-1,		/* returns the current setting of the specified feature */	weBitClear				=	 0,		/* disables the specified feature */	weBitSet				=	 1		/* enables the specified feature */};/*	values for the inCase parameter in WEChangeCase */enum{	weLowerCase				=	0,		/* lowercase text */	weUpperCase				=	1		/* uppercase text */};/*	additional values for the WETSMHiliteStyle data type *//*	the basic values for this can be found in <AERegistry.h>: kRawText, kSelectedRawText, etc. */enum{	weRedWigglyUnderline	=	29303,	/* ('rw') red wiggly underline commonly used to mark misspelled words */	weGreenWigglyUnderline	=	26487,	/* ('gw') green wiggly underline commonly used to mark syntax/grammar errors */	weOrangeWigglyUnderline	=	28535	/* ('ow') orange wiggly underline */};/*	values for the inMatchOptions parameter in WEFind */enum{	weFindWholeWords				=	0x00000001,		/* match whole words only */	weFindCaseInsensitive			=	0x00000002,		/* ignore case differences */	weFindDiacriticalInsensitive	=	0x00000004		/* ignore diacritical marks */};/*	values for the inPutOptions parameter in WEPut */enum{	wePutIntCutAndPaste				=	0x00000001,		/* apply intelligent cut & paste rules */	wePutAddToTypingSequence		=	0x00000002,		/* don't break current typing sequence */	wePutDetectUnicodeBOM			=	0x00000200		/* detect Unicode byte-order mark */};/*	values for the inStreamOptions parameter in WEStreamRange */enum{	weStreamDestinationKindMask		=	0x000000FF,		/* the low byte in inStreamOptions is passed on to */														/* the inDestinationKind parameter of object streaming handlers */														/* (valid option for the kTypeSoup and kTypeStyleScrap flavor types) */	weStreamIncludeObjects			=	0x00000100		/* include descriptions of embedded objects */														/* (valid option for the kTypeStyleScrap flavor type) */};/*	values for the inCopyOptions parameters in WECopyToScrap */enum{	weCopyPromiseFlavors			=	0x00000001		/* install a promise keeper but don't actually copy data to scrap just yet */};/*	values for the inGetOptions parameter in WEGetTextRangeAsUnicode */enum{	weGetAddUnicodeBOM				=	0x00000200,		/* prepend a Unicode byte-order mark to the text stream */	weGetLittleEndian				=	0x00000400		/* use little-endian (Intel) byte-order */};/*	values for the inSaveOptions parameter in WESave */enum{	weSaveAddResources				=	0x00000001,		/* save formatting resources to the resource fork */	weSaveCompatibilityResources	=	0x00000002,		/* save additional resources (styl, FISH, SOUP) for compatibility with TextEdit and WASTE 1.x */	weSaveLittleEndian				=	0x00000004		/* use little-endian (Intel) byte-order (only significant for 'utxt' files) */};/*	WASTE creator *//*	Pass this value in the propertyCreator parameter of SetMenuItemProperty to set values of attributes to be processed by WASTE. *//*	For example, if you have a Font menu, call SetMenuItemProperty passing kWASTECreator in propertyCreator, weTagFontFamily in *//*	propertyTag, and the correct font family number in properyData. Later, when the user selects an item in the Font menu, you *//*	can call WEProcessHICommand and WASTE will extract the correct attribute tag and value and change the selection accordingly. */enum{	kWASTECreator				=	FOUR_CHAR_CODE('OEDE')} ;/*	selectors for WESetAttributes, WEGetAttributes, WEMatchAttributes, etc. */enum{/*	character-level attributes: font, size, colors, basic styles */	weTagFontFamily				=	FOUR_CHAR_CODE('font'),	/* font family number (FMFontFamily) */	weTagFontSize				=	FOUR_CHAR_CODE('ptsz'),	/* font size (Fixed) */	weTagPlain					=	FOUR_CHAR_CODE('plan'), /* plain text (Boolean) */	weTagBold					=	FOUR_CHAR_CODE('bold'), /* bold (Boolean) */	weTagItalic					=	FOUR_CHAR_CODE('ital'), /* italic (Boolean) */	weTagUnderline				=	FOUR_CHAR_CODE('undl'),	/* underline (Boolean) */	weTagOutline				=	FOUR_CHAR_CODE('outl'), /* outline (Boolean) */	weTagShadow					=	FOUR_CHAR_CODE('shad'), /* shadow (Boolean) */	weTagCondensed				=	FOUR_CHAR_CODE('cond'), /* condensed (Boolean) */	weTagExtended				=	FOUR_CHAR_CODE('pexp'), /* extended (Boolean) */	weTagStrikethrough			=	FOUR_CHAR_CODE('strk'), /* strikethrough (Boolean) */	weTagHidden					=	FOUR_CHAR_CODE('hidn'), /* hidden (Boolean) */	weTagAllCaps				=	FOUR_CHAR_CODE('alcp'), /* all caps (Boolean) */	weTagAllLowercase			=	FOUR_CHAR_CODE('lowc'), /* all lowercase (Boolean) */	weTagTextColor				=	FOUR_CHAR_CODE('colr'),	/* text color (RGBColor) */	weTagBackgroundColor		=	FOUR_CHAR_CODE('pbcl'), /* background color (RGBColor) */	weTagTransferMode			=	FOUR_CHAR_CODE('pptm'), /* QuickDraw text transfer mode (SInt16) */	weTagVerticalShift			=	FOUR_CHAR_CODE('xshf'),	/* vertical shift (Fixed) */	weTagLanguage				=	FOUR_CHAR_CODE('lang'), /* language tag (TEXT; availability: Mac OS 8.6 and later) *//*	character-level attributes: additional styles -- these are used for RTF roundtripping but not currently rendered */	weTagUnderlineStyle			=	FOUR_CHAR_CODE('unds'), /* underline style (enumeration: deft/word/dubl/etc.) */	weTagSmallCaps				=	FOUR_CHAR_CODE('smcp'), /* small caps (Boolean) */	weTagDoubleStrikethrough	=	FOUR_CHAR_CODE('dstr'), /* double strikethrough (Boolean) */	weTagEmbossed				=	FOUR_CHAR_CODE('embo'), /* embossed (Boolean) */	weTagEngraved				=	FOUR_CHAR_CODE('engr'), /* engraved (Boolean) *//*	paragraph-level attributes: alignment, direction, line spacing, indents, tabs and borders */	weTagAlignment				=	FOUR_CHAR_CODE('pjst'),	/* alignment (enumeration; can be one of deft/left/cent/rght/full) */	weTagDirection				=	FOUR_CHAR_CODE('LDIR'), /* primary line direction (enumeration; can be one of deft/L->R/R->L) */	weTagLineSpacing			=	FOUR_CHAR_CODE('ledg'), /* line spacing (WELineSpacing) */	weTagLeftIndent				=	FOUR_CHAR_CODE('lein'), /* left indent (Fixed) */	weTagRightIndent			=	FOUR_CHAR_CODE('riin'),	/* right indent (Fixed) */	weTagFirstLineIndent		=	FOUR_CHAR_CODE('fidt'), /* first line indent (Fixed) */	weTagSpaceBefore			=	FOUR_CHAR_CODE('spbe'), /* space before (Fixed) */	weTagSpaceAfter				=	FOUR_CHAR_CODE('spaf'), /* space after (Fixed) */	weTagTabList				=	FOUR_CHAR_CODE('tabs'), /* tab list (WETabList) */	weTagBottomBorderStyle		=	FOUR_CHAR_CODE('BBRD'), /* bottom border style (enumeration; can be one of NONE/SLDL/DTDL/THKL) *//*	paragraph-level attributes: pagination control and other flags -- for future use */	weTagKeepTogether			= 	FOUR_CHAR_CODE('keep'), /* keep lines together on the same page (Boolean) */	weTagKeepWithNext			= 	FOUR_CHAR_CODE('kepn'), /* keep this paragraph with the next one on the same page (Boolean) */	weTagPageBreakBefore		= 	FOUR_CHAR_CODE('pbrb'), /* this paragraph starts a new page (Boolean) */	weTagWidowOrphanOverride	= 	FOUR_CHAR_CODE('wdov'), /* override document-wide widow/orphan control (Boolean) */	weTagWidowOrphanControl		= 	FOUR_CHAR_CODE('wido'), /* enable or disable widow/orphan control for this paragraph only (Boolean) */	weTagNoLineNumbering		= 	FOUR_CHAR_CODE('!ln#'), /* disable document-wide line number for this paragraph only (Boolean) */	weTagNoHyphenation			= 	FOUR_CHAR_CODE('!hyp'), /* disable automatic hyphenation for this paragraph only (Boolean) */	weTagParagraphUserData		= 	FOUR_CHAR_CODE('pusr'), /* user-defined data (SInt32) *//*	the following meta-selectors are only valid in calls to WESetAttributes/WESetOneAttribute */	weTagForceFontFamily		=	FOUR_CHAR_CODE('ffnt'),	/* like weTagFontFamily, but may change text encoding */	weTagAddFontSize			=	FOUR_CHAR_CODE('+siz'),	/* like weTagFontSize, but value is added rather than replaced */	weTagAddVerticalShift		=	FOUR_CHAR_CODE('+shf'),	/* like weTagVerticalShift, but value is added rather than replaced */	weTagAddLeftIndent			=	FOUR_CHAR_CODE('+lei'),	/* like weTagLeftIndent, but value is added rather than replaced */	weTagAddRightIndent			=	FOUR_CHAR_CODE('+rii'), /* like weTagRightIndent, but value is added rather than replaced */	weTagAddFirstLineIndent		=	FOUR_CHAR_CODE('+fid'), /* like weTagFirstLineIndent, but value is added rather than replaced */	weTagAddSpaceBefore			=	FOUR_CHAR_CODE('+spb'), /* like weTagSpaceBefore, but value is added rather than replaced */	weTagAddSpaceAfter			=	FOUR_CHAR_CODE('+spa'), /* like weTagSpaceAfter, but value is added rather than replaced */	weTagAddLineSpacing			=	FOUR_CHAR_CODE('+led'), /* add this to line spacing (Fixed) *//*	selectors for read-only attributes, only valid in calls to WEGetAttributes/WEGetOneAttribute */	weTagTextEncoding			=	FOUR_CHAR_CODE('ptxe'),	/* text encoding */	weTagQDStyles				=	FOUR_CHAR_CODE('qdst'),	/* QuickDraw styles (Style) */	weTagTETextStyle			=	FOUR_CHAR_CODE('tets'),	/* TextEdit-compatibile TextStyle record */	weTagRunDirection			=	FOUR_CHAR_CODE('rdir')	/* true if character at specified offset belongs to a right-to-left script (Boolean) */};/*	underline style selectors (use in conjunction with weTagUnderlineStyle) */enum{	weTagUnderlineDefault		=	FOUR_CHAR_CODE('deft'),	weTagUnderlineWord			=	FOUR_CHAR_CODE('word'),	weTagUnderlineDouble		=	FOUR_CHAR_CODE('dubl'),	weTagUnderlineThick			=	FOUR_CHAR_CODE('thck'),	weTagUnderlineDash			=	FOUR_CHAR_CODE('-   '),	weTagUnderlineDot			=	FOUR_CHAR_CODE('.   '),	weTagUnderlineDotDash		=	FOUR_CHAR_CODE('.-  '),	weTagUnderlineDotDotDash	=	FOUR_CHAR_CODE('..- '),	weTagUnderlineWave			=	FOUR_CHAR_CODE('wave')};/*	alignment selectors (use in conjunction with weTagAlignment and weTagTabList) */enum{	weTagAlignmentDefault		=	FOUR_CHAR_CODE('deft'),	/* align according to system direction */	weTagAlignmentLeft			=	FOUR_CHAR_CODE('left'),	/* flush left */	weTagAlignmentCenter		=	FOUR_CHAR_CODE('cent'), /* center */	weTagAlignmentRight			=	FOUR_CHAR_CODE('rght'),	/* flush right */	weTagAlignmentFull			=	FOUR_CHAR_CODE('full'),	/* justify */	weTagAlignmentDecimal		=	FOUR_CHAR_CODE('decm')	/* decimal (tabs only) */};/*	direction selectors (use in conjunction with weTagDirection) */enum{	weTagDirectionDefault		=	FOUR_CHAR_CODE('deft'),	/* arrange bidi text according to system direction */	weTagDirectionLeftToRight	=	FOUR_CHAR_CODE('L->R'), /* primary line direction is left-to-right */	weTagDirectionRightToLeft	=	FOUR_CHAR_CODE('R->L')	/* primary line direction is right-to-left */};/*	tab leader selectors (use in conjunction with weTagTabList) */enum{	weTagLeaderNone				= 	FOUR_CHAR_CODE('NONE'),	/* no tab leader (default) */	weTagLeaderDots				= 	FOUR_CHAR_CODE('DOTS'),	/* dots */	weTagLeaderHyphens			= 	FOUR_CHAR_CODE('HYPH'),	/* hyphens */	weTagLeaderUnderline		= 	FOUR_CHAR_CODE('UNDL'), /* underline */	weTagLeaderThickLine		= 	FOUR_CHAR_CODE('THKL'), /* thick line */	weTagLeaderEqualSigns		= 	FOUR_CHAR_CODE('=   ')	/* equal signs */};/*	border style selectors (use in conjunction with weTagBottomBorderStyle) */enum{	weTagBorderStyleNone		=	FOUR_CHAR_CODE('NONE'), /* no border */	weTagBorderStyleThin		=	FOUR_CHAR_CODE('SLDL'), /* thin line */	weTagBorderStyleDotted		=	FOUR_CHAR_CODE('DTDL'), /* dotted line */	weTagBorderStyleThick		=	FOUR_CHAR_CODE('THKL')	/* thick line */};/*	line spacing mode selectors (possible values of the mode field of a WELineSpacing structure) */enum{	weTagLineSpacingAbsolute	=	FOUR_CHAR_CODE('abso'),	/* use specified value */	weTagLineSpacingAtLeast		=	FOUR_CHAR_CODE('atle'),	/* use specified value or height of tallest character, whichever is greater */	weTagLineSpacingRelative	=	FOUR_CHAR_CODE('rele')	/* multiple of natural height (0.0 = single spacing; 1.0 = double spacing; etc.) */} ;/*	commonly used values for the line spacing attribute (these are only significant when mode == weTagLineSpacingRelative) */enum{	weLineSpacingSingle			=	0x00000000,				/* single space */	weLineSpacingOneAndHalf		=	0x00008000,				/* one and half space */	weLineSpacingDouble			=	0x00010000				/* double space */};/*	selectors for WEGetInfo and WESetInfo */enum{	weAutoScrollDelay			=	FOUR_CHAR_CODE('ausd'), /* for use by the click loop callback (in ticks; Carbon only) */	weBusyProc					=	FOUR_CHAR_CODE('busy'), /* callback invoked during lengthy operations */	weBusyInterval				=	FOUR_CHAR_CODE('bzin'), /* minimum interval between calls to the busy proc (in ticks) */	weCharByteHook				=	FOUR_CHAR_CODE('cbyt'), /* CharByte hook */	weCharToPixelHook			=	FOUR_CHAR_CODE('c2p '),	/* CharToPixel hook */	weCharTypeHook				=	FOUR_CHAR_CODE('ctyp'), /* CharType hook */	weClickLoop					=	FOUR_CHAR_CODE('clik'),	/* click loop callback */	weCurrentDrag				=	FOUR_CHAR_CODE('drag'),	/* drag currently being tracked from WEClick() */	weDrawTextHook				=	FOUR_CHAR_CODE('draw'), /* text drawing hook */	weDrawTSMHiliteHook			=	FOUR_CHAR_CODE('dtsm'),	/* hook for drawing Text Services Manager underlines */	weEraseHook					=	FOUR_CHAR_CODE('eras'), /* background erasing hook */	weFontFamilyToNameHook		=	FOUR_CHAR_CODE('ff2n'), /* hook for mapping font family numbers to font names */	weFontNameToFamilyHook		=	FOUR_CHAR_CODE('fn2f'), /* hook for mapping font names to font family numbers */	weFluxProc					=	FOUR_CHAR_CODE('flux'), /* flux proc */	weHiliteDropAreaHook		=	FOUR_CHAR_CODE('hidr'), /* drop area highlighting hook */	weLineBreakHook				=	FOUR_CHAR_CODE('lbrk'),	/* line breaking hook */	wePixelToCharHook			=	FOUR_CHAR_CODE('p2c '), /* PixelToChar hook */	wePort						=	FOUR_CHAR_CODE('port'),	/* graphics port */	wePreTrackDragHook			=	FOUR_CHAR_CODE('ptrk'), /* pre-TrackDrag hook */	weRefCon					=	FOUR_CHAR_CODE('refc'),	/* reference constant for use by application */	weScrollProc				=	FOUR_CHAR_CODE('scrl'),	/* auto-scroll callback */	weText						=	FOUR_CHAR_CODE('text'),	/* text handle */	weTranslateDragHook 		=	FOUR_CHAR_CODE('xdrg'), /* drag translation callback */	weTranslucencyThreshold		=	FOUR_CHAR_CODE('tluc'), /* area threshold for translucent drags */	weTSMDocumentID				=	FOUR_CHAR_CODE('tsmd'),	/* Text Services Manager document ID */	weTSMPreUpdate				=	FOUR_CHAR_CODE('pre '),	/* Text Services Manager pre-update callback */	weTSMPostUpdate				=	FOUR_CHAR_CODE('post'),	/* Text Services Manager post-update callback */	weUndoProc					=	FOUR_CHAR_CODE('undo'), /* undo notification proc */	weURLHint					=	FOUR_CHAR_CODE('urlh'),	/* URL hint string for Internet Config */	weWordBreakHook				=	FOUR_CHAR_CODE('wbrk')	/* word breaking hook */};/*	values for the inHandlerSelector parameter in WEInstallObjectHandler */enum{	weNewHandler				=	FOUR_CHAR_CODE('new '),	/* new handler */	weDisposeHandler			=	FOUR_CHAR_CODE('free'),	/* dispose handler */	weDrawHandler				=	FOUR_CHAR_CODE('draw'),	/* draw handler */	weClickHandler				=	FOUR_CHAR_CODE('clik'),	/* click handler */	weStreamHandler				=	FOUR_CHAR_CODE('strm'),	/* stream handler */	weHoverHandler				=	FOUR_CHAR_CODE('hovr')	/* hover handler */};/*	values for the inRequestedType parameter in WEStreamRange */enum{	kTypeText					=	FOUR_CHAR_CODE('TEXT'),	/* raw text */	kTypeStyles 				=	FOUR_CHAR_CODE('styl'),	/* TextEdit-compatible style scrap */	kTypeSoup 					=	FOUR_CHAR_CODE('SOUP'),	/* "soup" of embedded objects */	kTypeFontTable				=	FOUR_CHAR_CODE('FISH'),	/* font table */	kTypeParaFormat				=	FOUR_CHAR_CODE('WEpf'),	/* WASTE 2.0 paragraph formatting */	kTypeRulerScrap				=	FOUR_CHAR_CODE('WEru'),	/* WASTE 2.0 ruler table */	kTypeCharFormat				=	FOUR_CHAR_CODE('WEcf'), /* WASTE 2.0 character formatting */	kTypeStyleScrap				=	FOUR_CHAR_CODE('WEst'),	/* WASTE 2.0 style table */	kTypeUnicodeText			=	FOUR_CHAR_CODE('utxt'),	/* raw text in UTF-16 Unicode */	kTypeUTF8Text				=	FOUR_CHAR_CODE('UTF8'),	/* raw text in UTF-8 Unicode */	kTypeStyledText				=	FOUR_CHAR_CODE('STXT'),	/* AppleScript-style styled text */	kTypeRTF					=	FOUR_CHAR_CODE('RTF '),	/* RTF (Rich Text Format) */	kTypeRTFD					=	FOUR_CHAR_CODE('RTFD')	/* RTFD (RTF with external attachments) */};/*	action kinds */enum{	weAKNone			=	0,		/* null action */	weAKUnspecified		=	1,		/* action of unspecified nature */	weAKTyping			=	2,		/* some text has been typed in */	weAKCut				=	3,		/* the selection range has been cut */	weAKPaste			=	4,		/* something has been pasted */	weAKClear			=	5,		/* the selection range has been deleted */	weAKDrag			=	6,		/* drag and drop operation */	weAKSetStyle		=	7,		/* some style has been applied to a text range */	weAKSetRuler		=	8,		/* some ruler has been applied to a text range */	weAKBackspace		=	9,		/* text deleted by backspace */	weAKFwdDelete		=	10,		/* text deleted by forward delete */	weAKCaseChange		=	11,		/* case transformation */	weAKObjectChange	=	12		/* an embedded object was resized */	/* values above 1023 are free for use by client applications */};/*	undo events passed to undo callback */enum{	weUndoNewAction		=	0,		/*	a new action is about to be pushed onto the undo or redo stack */	weUndoNewSubAction	=	1,		/*	a new action is about to be added to an open sequence */	weUndoBeginSequence	=	2		/*	an action sequence is starting */};/*	values for the inDestionationKind parameter passed to object streaming handlers */enum{	weToScrap			=	0,		/* called from WECopy to copy object to the desk scrap */	weToDrag			=	1,		/* called from WEClick to copy object to a drag */	weToSoup			=	2		/* called to create a private SOUP for internal use (e.g., for undo/redo) */	/* values above 127 are free for use by client applications */};/*	mouse actions passed to object "hover" handlers */enum{	weMouseEnter		=	0,		/*	mouse has entered object frame */	weMouseWithin		=	1,		/*	mouse is still within object frame */	weMouseLeave		=	2		/*	mouse has exited object frame */};/*	busy actions passed to busy callback */enum{	weBusyRecalBreaks	=	0		/*	busy recalculating line breaks */};/*	document property tags (these are currently only used by the RTF I/O module) */enum{	weCreatorDocumentInfo		= FOUR_CHAR_CODE('Info'),		/*	creator for the following property tags */	weTagDocumentTitle			= FOUR_CHAR_CODE('Titl'),	weTagDocumentSubject		= FOUR_CHAR_CODE('Subj'),	weTagDocumentAuthor			= FOUR_CHAR_CODE('Auth'),	weTagDocumentManager		= FOUR_CHAR_CODE('Mngr'),	weTagDocumentCompany		= FOUR_CHAR_CODE('Cmpy'),	weTagDocumentCategory		= FOUR_CHAR_CODE('Ctgy'),	weTagDocumentKeywords		= FOUR_CHAR_CODE('Keyw'),	weTagDocumentComments		= FOUR_CHAR_CODE('Cmnt'),	weTagDocumentOperator		= FOUR_CHAR_CODE('Oper'),	weTagDocumentBaseAddress	= FOUR_CHAR_CODE('Hlnk'),	weTagPageInfo				= FOUR_CHAR_CODE('Page'),	weTagMacPrintRecord			= FOUR_CHAR_CODE('PRec')};enum{/*	kCurrentSelection is a meta-value that can be passed to some calls, *//*	like WEStreamRange and WEGetHiliteRgn, to signify "use current selection range" */	kCurrentSelection	=	-1,/*	kNullStyle is a meta-value that can be passed to WEGetAttributes / WEGetOneAttribute *//*	to retrieve the "null" style (the style that would be applied to the next typed character) */	kNullStyle			=	-2,/*	kMaxTabCount is the maximum number of tabs that can be set for each paragraph */	kMaxTabCount		=	20,/*	kMaxLanguageTagSize is the maximum length of a language tag */	kMaxLanguageTagSize	=	32};typedef struct OpaqueWEReference *				WEReference;typedef struct OpaqueWEObjectReference *		WEObjectReference;typedef struct OpaqueWEPrintSession *			WEPrintSession;typedef struct OpaqueWEActionReference *		WEActionReference;typedef Handle									WESoupHandle;typedef Handle									WEFontTableHandle;typedef SInt16									WEActionKind;typedef SInt8									WEEdge;typedef FourCharCode							WESelector;typedef SInt16									WETSMHiliteStyle;#if WASTE_DEPRECATEDtypedef UInt16									WEStyleMode;typedef UInt32									WERulerMode;typedef SInt8									WEAlignment;typedef SInt16									WEDirection;typedef struct WERunInfo{	SInt32 				runStart;		/* byte offset to first character of style run */	SInt32 				runEnd;			/* byte offset past last character of style run */	SInt16 				runHeight;		/* line height (ascent + descent + leading) */	SInt16 				runAscent;		/* font ascent */	TextStyle 			runStyle;		/* text attributes */	WEObjectReference	runObject;		/* either nil or reference to embedded object */} WERunInfo;typedef struct WERuler{	SInt8			alignment;			/* alignment */	SInt8			direction;			/* primary line direction */	UInt8			reserved1;			/* reserved for future use */	UInt8			bottomBorderStyle;	/* bottom border style */	Fixed			leftIndent;			/* left margin (in fixed points) */	Fixed			rightIndent;		/* right margin (in fixed points) */	Fixed			firstLineIndent;	/* first line indent (in fixed points) */	Fixed			lineSpacing;		/* space between lines (0.0 = normal, 1.0 = double, etc.) */	Fixed			spaceBefore;		/* space before paragraph (in fixed points) */	Fixed			spaceAfter;			/* space after paragraph (in fixed points) */	SInt32			reserved2[57];		/* reserved for future use */} WERuler;typedef struct WEParaInfo{	SInt32			paraStart;			/* byte offset to first character of paragraph run */	SInt32			paraEnd;			/* byte offset to last character of paragraph run */	WERuler			paraRuler;			/* ruler associated with this paragraph run */} WEParaInfo;#endif /*WASTE_DEPRECATED*/typedef struct WEPrintOptions{	Rect			pageRect;			/* destination rectangle for printing */	SInt16			firstPageOffset;	/* pixel height of area to be left blank at top of first page */	char			reserved[54];		/* reserved for future use: set to zero! */} WEPrintOptions;/*	the first parameter to a 'new' embedded object handler is declared as a (Point *) for compatibility *//*	with older versions of WASTE, but is really a (WEObjectPlacement *) starting from WASTE 2.1a5 *//*	if the value of the objectBaseline field is set to a nonzero value, WASTE will place the bottom *//*	of the bounding rectangle of the object below (negative value) or above (positive value) the text baseline */typedef struct WEObjectPlacement{	SInt16			objectHeight;		/* height of embedded object */	SInt16			objectWidth;		/* width of embedded object */	SInt16			objectBaseline;		/* baseline (intrinsic vertical shift) of embedded object */} WEObjectPlacement;/*	WELineSpacing is used in conjunction with the weTagLineSpacing attribute */typedef struct WELineSpacing{	WESelector		mode;				/* one of weTagLineSpacingRelative (default), weTagLineSpacingAbsolute or weTagLineSpacingAtLeast */	Fixed			value;				/* absolute line height or multiplier (0.0 = auto) */} WELineSpacing;/*	WETab describes a single tab stop in a paragraph */typedef struct WETab{	Fixed			tabIndent;			/* indent from the left side of the destination rectangle */	WESelector		tabAlignment;		/* alignment (left, center, right or decimal); only left currently supported */	WESelector		tabLeader;			/* leader */} WETab;/*	WETabList describes the array of tabs associated with a paragraph */typedef struct WETabList{	ItemCount		tabCount;			/* actual number of valid tabs in this structure (0 to kMaxTabCount) */	WETab			tabArray[kMaxTabCount];} WETabList;/*	WASTE callbacks: prototypes */typedef CALLBACK_API ( Boolean,				WEClickLoopProcPtr )	(	WEReference			inWE ) ;typedef CALLBACK_API ( void,				WEScrollProcPtr )	(	WEReference			inWE ) ;typedef CALLBACK_API ( void,				WETSMPreUpdateProcPtr )	(	WEReference			inWE ) ;typedef CALLBACK_API ( void,				WETSMPostUpdateProcPtr )	(	WEReference			inWE,		SInt32				inFixLength,		SInt32				inInputAreaStart,		SInt32				inInputAreaEnd,		SInt32				inPinRangeStart,		SInt32				inPinRangeEnd ) ;typedef CALLBACK_API ( OSErr,				WEPreTrackDragProcPtr )	(	DragRef				inDrag,		WEReference			inWE ) ;typedef CALLBACK_API ( OSErr,				WETranslateDragProcPtr )	(	DragRef				inDrag,		DragItemRef			inDragItem,		FlavorType			inRequestedType,		Handle				outData,		SInt32				inDropOffset,		WEReference			inWE ) ;typedef CALLBACK_API ( OSErr,				WEHiliteDropAreaProcPtr )	(	DragRef				inDrag,		Boolean				inHiliteFlag,		WEReference			inWE ) ;typedef CALLBACK_API ( OSErr,				WEFontIDToNameProcPtr )	(	SInt16				inFontID,		Str255				ioFontName ) ;typedef CALLBACK_API ( OSErr,				WEFontNameToIDProcPtr )	(	ConstStr255Param	inFontName,		SInt16				inOldFontID,		SInt16 *			outNewFontID ) ;typedef CALLBACK_API ( OSErr,				WEBusyProcPtr )	(	SInt16				inBusyAction,		const Float32 *		inPercentDone,		WEReference			inWE ) ;typedef CALLBACK_API ( void,				WEDrawTextProcPtr )	(	const char *		inTextPtr,		SInt32				inTextLength,		Fixed				inSlop,		JustStyleCode		inStyleRunPosition,		WEReference			inWE ) ;typedef CALLBACK_API ( void,				WEDrawTSMHiliteProcPtr )	(	const Rect *		inSegmentRect,		WETSMHiliteStyle	inHiliteStyle,		WEReference			inWE ) ;typedef CALLBACK_API ( SInt32,				WEPixelToCharProcPtr )	(	const char *		inTextPtr,		SInt32				inTextLength,		Fixed				inSlop,		Fixed *				ioPixelWidth,		WEEdge *			outEdge,		JustStyleCode		inStyleRunPosition,		Fixed				inHorizontalPosition,		WEReference			inWE ) ;typedef CALLBACK_API ( SInt16,				WECharToPixelProcPtr )	(	const char *		inTextPtr,		SInt32				inTextLength,		Fixed				inSlop,		SInt32				inOffset,		SInt16				inDirection,		JustStyleCode		inStyleRunPosition,		SInt16				inHorizontalOffset,		WEReference			inWE ) ;typedef CALLBACK_API ( StyledLineBreakCode,	WELineBreakProcPtr )	(	const char *		inTextPtr,		SInt32				inTextLength,		SInt32				inTextStart,		SInt32				inTextEnd,		Fixed *				ioTextWidth,		SInt32 *			ioTextOffset,		WEReference			inWE ) ;typedef CALLBACK_API ( void,				WEWordBreakProcPtr )	(	const char *		inTextPtr,		SInt16				inTextLength,		SInt16				inOffset,		WEEdge				inEdge,		OffsetTable			outBreakOffsets,		ScriptCode			inScript,		WEReference			inWE ) ;typedef CALLBACK_API ( SInt16,				WECharByteProcPtr )	(	const char *		inTextPtr,		SInt16				inTextOffset,		ScriptCode			inScript,		WEReference			inWE ) ;typedef CALLBACK_API ( SInt16,				WECharTypeProcPtr )	(	const char *		inTextPtr,		SInt16				inTextOffset,		ScriptCode			inScript,		WEReference			inWE ) ;typedef CALLBACK_API ( void, 				WEEraseProcPtr )	(	const Rect *		inDirtyRect,		WEReference			inWE ) ;typedef CALLBACK_API ( void, 				WEFluxProcPtr )	(	SInt32				inOffset,		SInt32				inDelta,		WEReference			inWE ) ;typedef CALLBACK_API ( OSErr,				WENewObjectProcPtr )	(	Point *				outNaturalObjectSize,		WEObjectReference	inObject ) ;typedef CALLBACK_API ( OSErr,				WEDisposeObjectProcPtr )	(	WEObjectReference	inObject ) ;typedef CALLBACK_API ( OSErr,				WEDrawObjectProcPtr )	(	const Rect *		inDestRect,		WEObjectReference	inObject ) ;typedef CALLBACK_API ( Boolean,				WEClickObjectProcPtr )	(	Point				inHitPoint,		EventModifiers		inModifiers,		UInt32				inClickTime,		WEObjectReference	inObject ) ;typedef CALLBACK_API ( OSErr,				WEStreamObjectProcPtr )	(	SInt16				inDestinationKind,		FlavorType *		outStreamedFlavorType,		Handle				outStreamedData,		WEObjectReference	inObject ) ;typedef CALLBACK_API ( OSErr,				WEHoverObjectProcPtr )	(	SInt16				inMouseAction,		Point				inMouseLoc,		RgnHandle			inMouseRgn,		WEObjectReference	inObject ) ;typedef CALLBACK_API ( OSErr,				WEUndoProcPtr )	(	SInt16				inUndoEvent,		WEActionReference	inAction ) ;/*	WASTE callbacks: UPP types */typedef STACK_UPP_TYPE(WEClickLoopProcPtr)			WEClickLoopUPP;typedef STACK_UPP_TYPE(WEScrollProcPtr)				WEScrollUPP;typedef STACK_UPP_TYPE(WETSMPreUpdateProcPtr)		WETSMPreUpdateUPP;typedef STACK_UPP_TYPE(WETSMPostUpdateProcPtr)		WETSMPostUpdateUPP;typedef STACK_UPP_TYPE(WEPreTrackDragProcPtr)		WEPreTrackDragUPP;typedef STACK_UPP_TYPE(WETranslateDragProcPtr)		WETranslateDragUPP;typedef STACK_UPP_TYPE(WEHiliteDropAreaProcPtr)		WEHiliteDropAreaUPP;typedef STACK_UPP_TYPE(WEFontIDToNameProcPtr)		WEFontIDToNameUPP;typedef STACK_UPP_TYPE(WEFontNameToIDProcPtr)		WEFontNameToIDUPP;typedef STACK_UPP_TYPE(WEBusyProcPtr)				WEBusyUPP;typedef STACK_UPP_TYPE(WEDrawTextProcPtr)			WEDrawTextUPP;typedef STACK_UPP_TYPE(WEDrawTSMHiliteProcPtr)		WEDrawTSMHiliteUPP;typedef STACK_UPP_TYPE(WEPixelToCharProcPtr)		WEPixelToCharUPP;typedef STACK_UPP_TYPE(WECharToPixelProcPtr)		WECharToPixelUPP;typedef STACK_UPP_TYPE(WELineBreakProcPtr)			WELineBreakUPP;typedef STACK_UPP_TYPE(WEWordBreakProcPtr)			WEWordBreakUPP;typedef STACK_UPP_TYPE(WECharByteProcPtr)			WECharByteUPP;typedef STACK_UPP_TYPE(WECharTypeProcPtr)			WECharTypeUPP;typedef STACK_UPP_TYPE(WEEraseProcPtr)				WEEraseUPP;typedef STACK_UPP_TYPE(WEFluxProcPtr)				WEFluxUPP;typedef STACK_UPP_TYPE(WENewObjectProcPtr)			WENewObjectUPP;typedef STACK_UPP_TYPE(WEDisposeObjectProcPtr)		WEDisposeObjectUPP;typedef STACK_UPP_TYPE(WEDrawObjectProcPtr)			WEDrawObjectUPP;typedef STACK_UPP_TYPE(WEClickObjectProcPtr)		WEClickObjectUPP;typedef STACK_UPP_TYPE(WEStreamObjectProcPtr)		WEStreamObjectUPP;typedef STACK_UPP_TYPE(WEHoverObjectProcPtr)		WEHoverObjectUPP;typedef STACK_UPP_TYPE(WEUndoProcPtr)				WEUndoUPP;#if WASTE_DEPRECATED/*	WASTE callbacks: New*Proc macros *//*	These macros used to expand to NewRoutineDescriptor in WASTE 1.x *//*	In WASTE 2.0, they are still available for compatibility with old code, *//*	but they expand to New*UPP, which are real entry points, not macros */#define NewWEClickLoopProc							NewWEClickLoopUPP#define NewWEScrollProc								NewWEScrollUPP#define NewWETSMPreUpdateProc						NewWETSMPreUpdateUPP#define NewWETSMPostUpdateProc						NewWETSMPostUpdateUPP#define NewWEPreTrackDragProc						NewWEPreTrackDragUPP#define NewWETranslateDragProc						NewWETranslateDragUPP#define NewWEHiliteDropAreaProc						NewWEHiliteDropAreaUPP#define NewWEFontIDToNameProc						NewWEFontIDToNameUPP#define NewWEFontNameToIDProc						NewWEFontNameToIDUPP#define NewWEBusyProc								NewWEBusyUPP#define NewWEDrawTextProc							NewWEDrawTextUPP#define NewWEDrawTSMHiliteProc						NewWEDrawTSMHiliteUPP#define NewWEPixelToCharProc						NewWEPixelToCharUPP#define NewWECharToPixelProc						NewWECharToPixelUPP#define NewWELineBreakProc							NewWELineBreakUPP#define NewWEWordBreakProc							NewWEWordBreakUPP#define NewWECharByteProc							NewWECharByteUPP#define NewWECharTypeProc							NewWECharTypeUPP#define NewWEEraseProc								NewWEEraseUPP#define NewWEFluxProc								NewWEFluxUPP#define NewWENewObjectProc							NewWENewObjectUPP#define NewWEDisposeObjectProc						NewWEDisposeObjectUPP#define NewWEDrawObjectProc							NewWEDrawObjectUPP#define NewWEClickObjectProc						NewWEClickObjectUPP#define NewWEStreamObjectProc						NewWEStreamObjectUPP#define NewWEHoverObjectProc						NewWEHoverObjectUPP#define NewWEUndoProc								NewWEUndoUPP/*	WASTE callbacks: Call*Proc macros *//*	These macros used to expand to CallUniversalProc in WASTE 1.x *//*	In WASTE 2.0, they are still available for compatibility with old code, *//*	but they expand to Invoke*UPP, which are real entry points, not macros */#define CallWEClickLoopProc							InvokeWEClickLoopUPP#define CallWEScrollProc							InvokeWEScrollUPP#define CallWETSMPreUpdateProc						InvokeWETSMPreUpdateUPP#define CallWETSMPostUpdateProc						InvokeWETSMPostUpdateUPP#define CallWEPreTrackDragProc						InvokeWEPreTrackDragUPP#define CallWETranslateDragProc						InvokeWETranslateDragUPP#define CallWEHiliteDropAreaProc					InvokeWEHiliteDropAreaUPP#define CallWEFontIDToNameProc						InvokeWEFontIDToNameUPP#define CallWEFontNameToIDProc						InvokeWEFontNameToIDUPP#define CallWEBusyProc								InvokeWEBusyUPP#define CallWEDrawTextProc							InvokeWEDrawTextUPP#define CallWEDrawTSMHiliteProc						InvokeWEDrawTSMHiliteUPP#define CallWEPixelToCharProc						InvokeWEPixelToCharUPP#define CallWECharToPixelProc						InvokeWECharToPixelUPP#define CallWELineBreakProc							InvokeWELineBreakUPP#define CallWEWordBreakProc							InvokeWEWordBreakUPP#define CallWECharByteProc							InvokeWECharByteUPP#define CallWECharTypeProc							InvokeWECharTypeUPP#define CallWEEraseProc								InvokeWEEraseUPP#define CallWEFluxProc								InvokeWEFluxUPP#define CallWENewObjectProc							InvokeWENewObjectUPP#define CallWEDisposeObjectProc						InvokeWEDisposeObjectUPP#define CallWEDrawObjectProc						InvokeWEDrawObjectUPP#define CallWEClickObjectProc						InvokeWEClickObjectUPP#define CallWEStreamObjectProc						InvokeWEStreamObjectUPP#define CallWEHoverObjectProc						InvokeWEHoverObjectUPP#define CallWEUndoProc								InvokeWEUndoUPP#endif /*WASTE_DEPRECATED*//*	WASTE public calls *//*	getting the shared library version number */EXTERN_API ( UInt32 )WEVersion (						void ) ;/*	creating UPPs for callback functions */EXTERN_API ( WEClickLoopUPP )NewWEClickLoopUPP (				WEClickLoopProcPtr		inProcPtr ) ;EXTERN_API ( WEScrollUPP )NewWEScrollUPP (				WEScrollProcPtr			inProcPtr ) ;EXTERN_API ( WETSMPreUpdateUPP )NewWETSMPreUpdateUPP (			WETSMPreUpdateProcPtr	inProcPtr ) ;EXTERN_API ( WETSMPostUpdateUPP )NewWETSMPostUpdateUPP (			WETSMPostUpdateProcPtr	inProcPtr ) ;EXTERN_API ( WEPreTrackDragUPP )NewWEPreTrackDragUPP (			WEPreTrackDragProcPtr	inProcPtr ) ;EXTERN_API ( WETranslateDragUPP )NewWETranslateDragUPP (			WETranslateDragProcPtr	inProcPtr ) ;EXTERN_API ( WEHiliteDropAreaUPP )NewWEHiliteDropAreaUPP (		WEHiliteDropAreaProcPtr	inProcPtr ) ;EXTERN_API ( WEFontIDToNameUPP )NewWEFontIDToNameUPP (			WEFontIDToNameProcPtr	inProcPtr ) ;EXTERN_API ( WEFontNameToIDUPP )NewWEFontNameToIDUPP (			WEFontNameToIDProcPtr	inProcPtr ) ;EXTERN_API ( WEBusyUPP )NewWEBusyUPP (					WEBusyProcPtr			inProcPtr ) ;EXTERN_API ( WEDrawTextUPP )NewWEDrawTextUPP (				WEDrawTextProcPtr		inProcPtr ) ;EXTERN_API ( WEDrawTSMHiliteUPP )NewWEDrawTSMHiliteUPP (			WEDrawTSMHiliteProcPtr	inProcPtr ) ;EXTERN_API ( WEPixelToCharUPP )NewWEPixelToCharUPP (			WEPixelToCharProcPtr	inProcPtr ) ;EXTERN_API ( WECharToPixelUPP )NewWECharToPixelUPP (			WECharToPixelProcPtr	inProcPtr ) ;EXTERN_API ( WELineBreakUPP )NewWELineBreakUPP (				WELineBreakProcPtr		inProcPtr ) ;EXTERN_API ( WEWordBreakUPP )NewWEWordBreakUPP (				WEWordBreakProcPtr		inProcPtr ) ;EXTERN_API ( WECharByteUPP )NewWECharByteUPP (				WECharByteProcPtr		inProcPtr ) ;EXTERN_API ( WECharTypeUPP )NewWECharTypeUPP (				WECharTypeProcPtr		inProcPtr ) ;EXTERN_API ( WEEraseUPP )NewWEEraseUPP (					WEEraseProcPtr			inProcPtr ) ;EXTERN_API ( WEFluxUPP )NewWEFluxUPP (					WEFluxProcPtr			inProcPtr ) ;EXTERN_API ( WENewObjectUPP )NewWENewObjectUPP (				WENewObjectProcPtr		inProcPtr ) ;EXTERN_API ( WEDisposeObjectUPP )NewWEDisposeObjectUPP (			WEDisposeObjectProcPtr	inProcPtr ) ;EXTERN_API ( WEDrawObjectUPP )NewWEDrawObjectUPP (			WEDrawObjectProcPtr		inProcPtr ) ;EXTERN_API ( WEClickObjectUPP )NewWEClickObjectUPP (			WEClickObjectProcPtr	inProcPtr ) ;EXTERN_API ( WEStreamObjectUPP )NewWEStreamObjectUPP (			WEStreamObjectProcPtr	inProcPtr ) ;EXTERN_API ( WEHoverObjectUPP )NewWEHoverObjectUPP (			WEHoverObjectProcPtr	inProcPtr ) ;EXTERN_API ( WEUndoUPP )NewWEUndoUPP (					WEUndoProcPtr			inProcPtr ) ;/*	destroying UPPs for callback functions */EXTERN_API ( void )DisposeWEClickLoopUPP (			WEClickLoopUPP			inUPP ) ;EXTERN_API ( void )DisposeWEScrollUPP (			WEScrollUPP				inUPP ) ;EXTERN_API ( void )DisposeWETSMPreUpdateUPP (		WETSMPreUpdateUPP		inUPP ) ;EXTERN_API ( void )DisposeWETSMPostUpdateUPP (		WETSMPostUpdateUPP		inUPP ) ;EXTERN_API ( void )DisposeWEPreTrackDragUPP (		WEPreTrackDragUPP		inUPP ) ;EXTERN_API ( void )DisposeWETranslateDragUPP (		WETranslateDragUPP		inUPP ) ;EXTERN_API ( void )DisposeWEHiliteDropAreaUPP (	WEHiliteDropAreaUPP		inUPP ) ;EXTERN_API ( void )DisposeWEFontIDToNameUPP (		WEFontIDToNameUPP		inUPP ) ;EXTERN_API ( void )DisposeWEFontNameToIDUPP (		WEFontNameToIDUPP		inUPP ) ;EXTERN_API ( void )DisposeWEBusyUPP (				WEBusyUPP				inUPP ) ;EXTERN_API ( void )DisposeWEDrawTextUPP (			WEDrawTextUPP			inUPP ) ;EXTERN_API ( void )DisposeWEDrawTSMHiliteUPP (		WEDrawTSMHiliteUPP		inUPP ) ;EXTERN_API ( void )DisposeWEPixelToCharUPP (		WEPixelToCharUPP		inUPP ) ;EXTERN_API ( void )DisposeWECharToPixelUPP (		WECharToPixelUPP		inUPP ) ;EXTERN_API ( void )DisposeWELineBreakUPP (			WELineBreakUPP			inUPP ) ;EXTERN_API ( void )DisposeWEWordBreakUPP (			WEWordBreakUPP			inUPP ) ;EXTERN_API ( void )DisposeWECharByteUPP (			WECharByteUPP			inUPP ) ;EXTERN_API ( void )DisposeWECharTypeUPP (			WECharTypeUPP			inUPP ) ;EXTERN_API ( void )DisposeWEEraseUPP (				WEEraseUPP				inUPP ) ;EXTERN_API ( void )DisposeWEFluxUPP (				WEFluxUPP				inUPP ) ;EXTERN_API ( void )DisposeWENewObjectUPP (			WENewObjectUPP			inUPP ) ;EXTERN_API ( void )DisposeWEDisposeObjectUPP (		WEDisposeObjectUPP		inUPP ) ;EXTERN_API ( void )DisposeWEDrawObjectUPP (		WEDrawObjectUPP			inUPP ) ;EXTERN_API ( void )DisposeWEClickObjectUPP (		WEClickObjectUPP		inUPP ) ;EXTERN_API ( void )DisposeWEStreamObjectUPP (		WEStreamObjectUPP		inUPP ) ;EXTERN_API ( void )DisposeWEHoverObjectUPP (		WEHoverObjectUPP		inUPP ) ;EXTERN_API ( void )DisposeWEUndoUPP (				WEUndoUPP				inUPP ) ;/*	invoking callback functions through UPPs */EXTERN_API ( Boolean )InvokeWEClickLoopUPP (			WEReference				inWE,								WEClickLoopUPP			inUPP ) ;EXTERN_API ( void )InvokeWEScrollUPP (				WEReference				inWE,								WEScrollUPP				inUPP ) ;EXTERN_API ( void )InvokeWETSMPreUpdateUPP (		WEReference				inWE,								WETSMPreUpdateUPP		inUPP ) ;EXTERN_API ( void )InvokeWETSMPostUpdateUPP (		WEReference				inWE,								SInt32					inFixLength,								SInt32					inInputAreaStart,								SInt32					inInputAreaEnd,								SInt32					inPinRangeStart,								SInt32					inPinRangeEnd,								WETSMPostUpdateUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEPreTrackDragUPP (		DragRef					inDrag,								WEReference				inWE,								WEPreTrackDragUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWETranslateDragUPP (		DragRef					inDrag,								DragItemRef				inDragItem,								FlavorType				inRequestedType,								Handle					outData,								SInt32					inDropOffset,								WEReference				inWE,								WETranslateDragUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEHiliteDropAreaUPP (		DragRef					inDrag,								Boolean					inHiliteFlag,								WEReference				inWE,								WEHiliteDropAreaUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEFontIDToNameUPP (		SInt16					inFontID,								StringPtr				ioFontName,								WEFontIDToNameUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEFontNameToIDUPP (		ConstStr255Param		inFontName,								SInt16					inOldFontID,								SInt16 *				outNewFontID,								WEFontNameToIDUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEBusyUPP (				SInt16					inBusyAction,								const Float32 *			inPercentDone,								WEReference				inWE,								WEBusyUPP				inUPP ) ;EXTERN_API ( void )InvokeWEDrawTextUPP (			const char *			inTextPtr,								SInt32					inTextLength,								Fixed					inSlop,								JustStyleCode			inStyleRunPosition,								WEReference				inWE,								WEDrawTextUPP			inUPP ) ;EXTERN_API ( void )InvokeWEDrawTSMHiliteUPP (		const Rect *			inSegmentRect,								WETSMHiliteStyle		inHiliteStyle,								WEReference				inWE,								WEDrawTSMHiliteUPP		inUPP ) ;EXTERN_API ( SInt32 )InvokeWEPixelToCharUPP (		const char *			inTextPtr,								SInt32					inTextLength,								Fixed					inSlop,								Fixed *					ioPixelWidth,								WEEdge *				outEdge,								JustStyleCode			inStyleRunPosition,								Fixed					inHorizontalPosition,								WEReference				inWE,								WEPixelToCharUPP		inUPP ) ;EXTERN_API ( SInt16 )InvokeWECharToPixelUPP (		const char *			inTextPtr,								SInt32					inTextLength,								Fixed					inSlop,								SInt32					inOffset,								SInt16					inDirection,								JustStyleCode			inStyleRunPosition,								SInt16					inHorizontalPosition,								WEReference				inWE,								WECharToPixelUPP		inUPP ) ;EXTERN_API ( StyledLineBreakCode )InvokeWELineBreakUPP (			const char *			inTextPtr,								SInt32					inTextLength,								SInt32					inTextStart,								SInt32					inTextEnd,								Fixed *					ioTextWidth,								SInt32 *				ioTextOffset,								WEReference				inWE,								WELineBreakUPP			inUPP ) ;EXTERN_API ( void )InvokeWEWordBreakUPP (			const char *			inTextPtr,								SInt16					inTextLength,								SInt16					inOffset,								WEEdge					inEdge,								OffsetTable				outBreakOffsets,								ScriptCode				inScript,								WEReference				inWE,								WEWordBreakUPP			inUPP ) ;EXTERN_API ( SInt16 )InvokeWECharByteUPP (			const char *			inTextPtr,								SInt16					inTextOffset,								ScriptCode				inScript,								WEReference				inWE,								WECharByteUPP			inUPP ) ;EXTERN_API ( SInt16 )InvokeWECharTypeUPP (			const char *			inTextPtr,								SInt16					inTextOffset,								ScriptCode				inScript,								WEReference				inWE,								WECharTypeUPP			inUPP ) ;EXTERN_API ( void )InvokeWEEraseUPP (				const Rect *			inDirtyRect,								WEReference				inWE,								WEEraseUPP				inUPP ) ;EXTERN_API ( void )InvokeWEFluxUPP (				SInt32					inOffset,								SInt32					inDelta,								WEReference				inWE,								WEFluxUPP				inUPP ) ;EXTERN_API ( OSErr )InvokeWENewObjectUPP (			SInt32 *				outNaturalObjectSize,								WEObjectReference		inObject,								WENewObjectUPP			inUPP ) ;EXTERN_API ( OSErr )InvokeWEDisposeObjectUPP (		WEObjectReference		inObject,								WEDisposeObjectUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEDrawObjectUPP (			const Rect *			inDestRect,								WEObjectReference		inObject,								WEDrawObjectUPP			inUPP ) ;EXTERN_API ( Boolean )InvokeWEClickObjectUPP (		Point					inHitPoint,								EventModifiers			inModifiers,								UInt32					inClickTime,								WEObjectReference		inObject,								WEClickObjectUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEStreamObjectUPP (		SInt16					inDestinationKind,								FlavorType *			outStreamedFlavorType,								Handle					outStreamedData,								WEObjectReference		inObject,								WEStreamObjectUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEHoverObjectUPP (		SInt16					inMouseAction,								Point					inMouseLoc,								RgnHandle				inMouseRgn,								WEObjectReference		inObject,								WEHoverObjectUPP		inUPP ) ;EXTERN_API ( OSErr )InvokeWEUndoUPP (				SInt16					inUndoEvent,								WEActionReference		inAction,								WEUndoUPP				inUPP ) ;/*	creation and destruction */EXTERN_API ( OSErr )WENew (							const LongRect *		inDestRect,								const LongRect *		inViewRect,								OptionBits				inOptions,								WEReference *			outWE ) ;EXTERN_API ( void )WEDispose (						WEReference				inWE ) ;/*	getting variables */#if WASTE_DEPRECATED/*	WEGetText is deprecated in WASTE 2.0 -- please use WEStreamRange instead */EXTERN_API ( Handle )WEGetText (						WEReference 			inWE ) ;#endif /*WASTE_DEPRECATED*/EXTERN_API ( SInt16 )WEGetChar ( 					SInt32					inOffset,								WEReference 			inWE ) ;EXTERN_API ( SInt32 )WEGetTextLength ( 				WEReference 			inWE ) ;EXTERN_API ( void )WEGetSelection (				SInt32 *				outSelStart,								SInt32 *				outSelEnd,								WEReference				inWE ) ;EXTERN_API ( SInt32 )WEGetSelectionAnchor (			WEReference				inWE ) ;EXTERN_API ( void )WEGetDestRect (					LongRect *				outDestRect,								WEReference 			inWE ) ;EXTERN_API ( void )WEGetViewRect (					LongRect *				outViewRect,								WEReference 			inWE ) ;EXTERN_API ( Boolean )WEIsActive (					WEReference 			inWE ) ;EXTERN_API ( UInt16 )WEGetClickCount (				WEReference 			inWE ) ;EXTERN_API ( Fixed )WEGetDefaultTabWidth (			WEReference				inWE ) ;EXTERN_API ( void )WESetDefaultTabWidth (			Fixed					inDefaultTabWidth,								WEReference				inWE ) ;/*	setting variables */EXTERN_API ( void )WESetSelection (				SInt32					inSelStart,								SInt32					inSelEnd,								WEReference				inWE ) ;EXTERN_API ( void )WESetDestRect (					const LongRect *		inDestRect,								WEReference 			inWE ) ;EXTERN_API ( void )WESetViewRect (					const LongRect *		inViewRect,								WEReference				inWE ) ;/*	getting style attributes */EXTERN_API ( OSErr )WEGetAttributes (				SInt32					inOffset,								ItemCount				inAttributeCount,								const WESelector		inAttributeSelectors [ ],								void * const			outAttributeValues [ ],								const ByteCount			inAttributeValueSizes [ ],								WEReference				inWE ) ;EXTERN_API ( OSErr )WEGetOneAttribute (				SInt32					inOffset,								WESelector				inAttributeSelector,								void *					outAttributeValue,								ByteCount				inAttributeValueSize,								WEReference				inWE ) ;/*	determining which style attributes are continuous over the selection range */#if WASTE_DEPRECATED/*	WEContinuousStyle is deprecated in WASTE 2.0 -- please use WEMatchAttributes instead */EXTERN_API ( Boolean )WEContinuousStyle (				WEStyleMode *			ioMode,								TextStyle *				outTextStyle,								WEReference				inWE ) ;/*	determining which paragraph attributes are continuous over the selection range *//*	WEContinuousRuler is deprecated in WASTE 2.0 -- please use WEMatchAttributes instead */EXTERN_API ( Boolean )WEContinuousRuler (				WERulerMode *			ioMode,								WERuler *				outRuler,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*//*	matching attributes over a text range against an arbitrary set of values */EXTERN_API ( OSErr )WEMatchAttributes (				SInt32					inRangeStart,								SInt32					inRangeEnd,								WESelector				inAttributeSelector,								ByteCount				inAttributeValueSize,								ItemCount				inArraySize,								const void *			inValueArray,								Boolean					outWhichValuesArePresent [ ],								Boolean *				outIsContinuous,								WEReference				inWE ) ;/*	low-level access to style run information */EXTERN_API ( SInt32 )WECountRuns (					WEReference 			inWE ) ;EXTERN_API ( SInt32 )WEOffsetToRun (					SInt32					inOffset,								WEReference				inWE ) ;EXTERN_API ( void )WEGetRunRange (					SInt32					inStyleRunIndex,								SInt32 *				outStyleRunStart,								SInt32 *				outStyleRunEnd,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	WEGetRunInfo is deprecated in WASTE 2.0 -- please use WEGetAttributes instead */EXTERN_API ( void )WEGetRunInfo (					SInt32					inOffset,								WERunInfo *				outStyleRunInfo,								WEReference				inWE ) ;/*	WEGetIndRunInfo is deprecated in WASTE 2.0 -- please use WEOffsetToRun/WEGetAttributes instead */EXTERN_API ( void )WEGetIndRunInfo (				SInt32					inStyleRunIndex,								WERunInfo *				outStyleRunInfo,								WEReference				inWE ) ;/*	WEGetRunDirection is deprecated in WASTE 2.0 -- please use WEGetAttributes with the weTagRunDirection selector instead */EXTERN_API ( Boolean )WEGetRunDirection (				SInt32					inOffset,								WEReference 			inWE ) ;#endif /*WASTE_DEPRECATED*//*	low-level access to paragraph run information */EXTERN_API ( SInt32 )WECountParaRuns (				WEReference				inWE ) ;EXTERN_API ( SInt32 )WEOffsetToParaRun (				SInt32					inOffset,								WEReference				inWE ) ;EXTERN_API ( void )WEGetParaRunRange (				SInt32					inParagraphRunIndex,								SInt32 *				outParagraphRunStart,								SInt32 *				outParagraphRunEnd,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	WEGetParaInfo is deprecated in WASTE 2.0 -- please use WEGetAttributes instead */EXTERN_API ( void )WEGetParaInfo (					SInt32					inOffset,								WEParaInfo *			outParagraphRunInfo,								WEReference				inWE ) ;/*	WEGetIndParaInfo is deprecated in WASTE 2.0 -- please use WEOffsetToParaRun/WEGetAttributes instead */EXTERN_API ( void )WEGetIndParaInfo (				SInt32					inParagraphRunIndex,								WEParaInfo *			outPararaphRunInfo,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*//*	access to line layout information */EXTERN_API ( SInt32 )WECountLines (					WEReference 			inWE ) ;EXTERN_API ( SInt32 )WEOffsetToLine (				SInt32 					inOffset,								WEReference 			inWE ) ;EXTERN_API ( void )WEGetLineRange (				SInt32					inLineIndex,								SInt32 *				outLineStart,								SInt32 *				outLineEnd,								WEReference				inWE ) ;EXTERN_API ( SInt32 )WEGetHeight (					SInt32					inStartLineIndex,								SInt32					inEndLineIndex,								WEReference 			inWE ) ;EXTERN_API ( SInt32 )WEGetLineWidth (				SInt32					inLineIndex,								WEReference				inWE ) ;EXTERN_API ( SInt16 )WEGetLineAscent (				SInt32					inLineIndex,								WEReference				inWE ) ;/*	converting byte offsets to screen position and vice versa */EXTERN_API ( SInt32 )WEGetOffset (					const LongPt *			inPoint,								WEEdge *				outEdge,								WEReference				inWE ) ;EXTERN_API ( void )WEGetPoint (					SInt32					inOffset,								SInt16					inDirection,								LongPt *				outPoint,								SInt16 *				outLineHeight,								WEReference				inWE ) ;/*	finding words, lines and paragraphs */EXTERN_API ( void )WEFindWord (					SInt32					inOffset,								WEEdge					inEdge,								SInt32 *				outWordStart,								SInt32 *				outWordEnd,								WEReference				inWE ) ;EXTERN_API ( void )WEFindLine (					SInt32					inOffset,								WEEdge					inEdge,								SInt32 *				outLineStart,								SInt32 *				outLineEnd,								WEReference				inWE ) ;EXTERN_API ( void )WEFindParagraph (				SInt32					inOffset,								WEEdge					inEdge,								SInt32 *				outParagraphStart,								SInt32 *				outParagraphEnd,								WEReference				inWE ) ;/*	matching strings */EXTERN_API ( OSErr )WEFind (						const char *			inKey,								SInt32					inKeyLength,								TextEncoding			inKeyEncoding,								OptionBits				inMatchOptions,								SInt32					inRangeStart,								SInt32					inRangeEnd,								SInt32 *				outMatchStart,								SInt32 *				outMatchEnd,								WEReference				inWE ) ;/*	making a copy of a text range */EXTERN_API ( OSErr )WEStreamRange (					SInt32					inRangeStart,								SInt32					inRangeEnd,								FlavorType				inRequestedType,								OptionBits				inStreamOptions,								Handle					outData,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	WECopyRange is deprecated in WASTE 2.0 -- please use WEStreamRange instead */EXTERN_API ( OSErr )WECopyRange (					SInt32					inRangeStart,								SInt32					inRangeEnd,								Handle					outText,								StScrpHandle			outStyles,								WESoupHandle			outSoup,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*/EXTERN_API ( OSErr )WEGetTextRangeAsUnicode (		SInt32					inRangeStart,								SInt32					inRangeEnd,								Handle					outUnicodeText,								Handle					ioCharFormat,								Handle					ioParaFormat,								TextEncodingVariant		inUnicodeVariant,								TextEncodingFormat		inTransformationFormat,								OptionBits				inGetOptions,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	getting and setting the alignment style *//*	WEGetAlignment/WESetAlignment are deprecated in WASTE 2.0 -- please use WEGetOneAttribute/WESetOneAttribute with the weTagAlignment selector instead */EXTERN_API ( WEAlignment )WEGetAlignment (				WEReference				inWE ) ;EXTERN_API ( void )WESetAlignment (				WEAlignment				inAlignment,								WEReference				inWE ) ;/*	getting and setting the primary line direction *//*	WEGetDirection/WESetDirection are deprecated in WASTE 2.0 -- please use WEGetOneAttribute/WESetOneAttribute with the weTagDirection selector instead */EXTERN_API ( WEDirection )WEGetDirection (				WEReference				inWE ) ;EXTERN_API( void )WESetDirection (				WEDirection				inDirection,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*//*	recalculating line breaks, drawing and scrolling */EXTERN_API ( OSErr )WECalText (						WEReference 			inWE ) ;EXTERN_API ( void )WEUpdate (						RgnHandle				inUpdateRgn,								WEReference 			inWE ) ;EXTERN_API ( void )WEScroll (						SInt32					inHorizontalOffset,								SInt32					inVerticalOffset,								WEReference				inWE ) ;EXTERN_API ( void )WEPinScroll (					SInt32					inHorizontalOffset,								SInt32					inVerticalOffset,								WEReference				inWE ) ;EXTERN_API ( void )WESelView (						WEReference				inWE ) ;/*	handling activate / deactivate events */EXTERN_API ( void )WEActivate (					WEReference				inWE ) ;EXTERN_API ( void )WEDeactivate (					WEReference 			inWE ) ;/* 	handling key-down events */EXTERN_API ( void )WEKey (							CharParameter			inKey,								EventModifiers			inModifiers,								WEReference				inWE ) ;/*	handling mouse-down events and mouse tracking */EXTERN_API ( void )WEClick (						Point					inHitPoint,								EventModifiers			inModifiers,								UInt32					inClickTime,								WEReference				inWE ) ;/*	processing HI commands (Carbon only) */EXTERN_API ( OSStatus )WEProcessHICommand (			const HICommand *		inHICommand,								WEReference				inWE ) ;/*	adjusting the cursor shape */EXTERN_API ( Boolean )WEAdjustCursor (				Point					inMouseLoc,								RgnHandle				ioMouseRgn,								WEReference				inWE ) ;/*	blinking the caret (not needed in Carbon if you set the weFAutoIdle flag) */EXTERN_API ( void )WEIdle (						UInt32 *				outMaxSleep,								WEReference				inWE ) ;/*	modifying the text and the styles */EXTERN_API ( OSErr )WEPut (							SInt32					inRangeStart,								SInt32					inRangeEnd,								const void *			inTextPtr,								SInt32					inTextLength,								TextEncoding			inTextEncoding,								OptionBits				inPutOptions,								ItemCount				inFlavorCount,								const FlavorType *		inFlavorTypes,								const Handle *			inFlavorHandles,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	WEInsert and WEInsertFormattedText are deprecated in WASTE 2.0 -- please use WEPut instead */EXTERN_API ( OSErr )WEInsert (						const void *			inTextPtr,								SInt32					inTextLength,								StScrpHandle			inStyles,								WESoupHandle			inSoup,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEInsertFormattedText (			const void *			inTextPtr,								SInt32					inTextLength,								StScrpHandle			inStyles,								WESoupHandle			inSoup,								Handle					inParaFormat,								Handle					inRulerScrap,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*/EXTERN_API ( OSErr )WEDelete (						WEReference				inWE ) ;EXTERN_API ( OSErr )WEUseText (						Handle					inText,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEChangeCase (					SInt16					inCase,								WEReference				inWE ) ;/*	modifying text attributes */EXTERN_API ( OSErr )WESetAttributes (				SInt32					inRangeStart,								SInt32					inRangeEnd,								ItemCount				inAttributeCount,								const WESelector		inAttributeSelectors [ ],								const void * const		inAttributeValues [ ],								const ByteCount			inAttributeValueSizes [ ],								WEReference				inWE ) ;EXTERN_API ( OSErr )WESetOneAttribute (				SInt32					inRangeStart,								SInt32					inRangeEnd,								WESelector				inAttributeSelector,								const void *			inAttributeValue,								ByteCount				inAttributeValueSize,								WEReference				inWE ) ;#if WASTE_DEPRECATED/*	WESetStyle and WESetRuler are deprecated in WASTE 2.0 -- please use WESetAttributes instead */EXTERN_API ( OSErr )WESetStyle (					WEStyleMode				inMode,								const TextStyle *		inTextStyle,								WEReference				inWE ) ;EXTERN_API ( OSErr )WESetRuler (					WERulerMode				inMode,								const WERuler *			inRuler,								WEReference				inWE ) ;#endif /*WASTE_DEPRECATED*/EXTERN_API ( OSErr )WEUseStyleScrap (				StScrpHandle			inStyles,								WEReference				inWE ) ;/*	undo */EXTERN_API ( OSErr )WEUndo (						WEReference				inWE ) ;EXTERN_API ( OSErr )WERedo (						WEReference				inWE ) ;EXTERN_API ( void )WEClearUndo (					WEReference				inWE ) ;EXTERN_API ( WEActionKind )WEGetUndoInfo (					Boolean *				outRedoFlag,								WEReference 			inWE ) ;EXTERN_API ( WEActionKind )WEGetIndUndoInfo (				SInt32					inUndoLevel,								WEReference				inWE ) ;EXTERN_API ( Boolean )WEIsTyping (					WEReference				inWE ) ;EXTERN_API ( OSErr )WEBeginAction (					WEReference				inWE ) ;EXTERN_API ( OSErr )WEEndAction (					WEActionKind			inActionKind,								WEReference				inWE ) ;/*	undo action accessors */EXTERN_API ( WEActionKind )WEGetActionKind (				WEActionReference		inAction ) ;EXTERN_API ( Boolean )WEActionIsRedo (				WEActionReference		inAction ) ;EXTERN_API ( WEReference )WEGetActionOwner (				WEActionReference		inAction ) ;/*	keeping track of changes */EXTERN_API ( UInt32 )WEGetModCount (					WEReference				inWE ) ;EXTERN_API ( void )WEResetModCount (				WEReference				inWE ) ;/*	embedded objects */EXTERN_API ( OSErr )WEInstallObjectHandler (		FlavorType				inObjectType,								WESelector				inHandlerSelector,								UniversalProcPtr		inHandler,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEInstallStandardObjectHandlers (	FlavorType			inObjectType,								WEReference				inWE ) ;EXTERN_API ( OSErr )WERemoveObjectHandler (			FlavorType				inObjectType,								WESelector				inHandlerSelector,								UniversalProcPtr		inHandler,								WEReference				inWE ) ;EXTERN_API ( OSErr )WERemoveStandardObjectHandlers (	FlavorType			inObjectType,								WEReference				inWE ) ;EXTERN_API( OSErr )WEGetObjectHandler (			FlavorType				inObjecType,								WESelector				inHandlerSelector,								UniversalProcPtr *		outHandler,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEInsertObject (				FlavorType				inObjectType,								Handle					inObjectDataHandle,								Point					inObjectSize,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEGetSelectedObject (			WEObjectReference *		outObject,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEGetObjectAtOffset (			SInt32					inOffset,								WEObjectReference *		outObject,								WEReference				inWE ) ;EXTERN_API ( SInt32 )WEFindNextObject (				SInt32					inOffset,								WEObjectReference *		outObject,								WEReference				inWE ) ;EXTERN_API ( SInt32 )WEFindPreviousObject (			SInt32					inOffset,								WEObjectReference *		outObject,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEUseSoup (						WESoupHandle			inSoup,								WEReference				inWE ) ;/*	accessing embedded object attributes */EXTERN_API ( FlavorType )WEGetObjectType (				WEObjectReference		inObject ) ;EXTERN_API ( Handle )WEGetObjectDataHandle (			WEObjectReference		inObject ) ;EXTERN_API ( WEReference )WEGetObjectOwner (				WEObjectReference		inObject ) ;EXTERN_API ( SInt32 )WEGetObjectOffset (				WEObjectReference		inObject ) ;EXTERN_API ( Point )WEGetObjectSize (				WEObjectReference		inObject ) ;EXTERN_API ( OSErr )WESetObjectSize (				WEObjectReference		inObject,								Point					inObjectSize ) ;EXTERN_API ( OSErr )WEGetObjectFrame (				WEObjectReference		inObject,								LongRect *				outObjectFrame ) ;EXTERN_API ( SInt32 )WEGetObjectRefCon (				WEObjectReference		inObject ) ;EXTERN_API ( void )WESetObjectRefCon (				WEObjectReference		inObject,								SInt32					inRefCon ) ;EXTERN_API ( OSStatus )WEGetObjectProperty (			WEObjectReference		inObject,								OSType					inPropertyCreator,								OSType					inPropertyTag,								ByteCount				inPropertySize,								ByteCount *				outActualSize,		/* can be NULL */								void *					outPropertyBuffer ) ;EXTERN_API ( OSStatus )WESetObjectProperty (			WEObjectReference		inObject,								OSType					inPropertyCreator,								OSType					inPropertyTag,								ByteCount				inPropertySize,								const void *			inPropertyBuffer ) ;EXTERN_API ( OSStatus )WERemoveObjectProperty (		WEObjectReference		inObject,								OSType					inPropertyCreator,								OSType					inPropertyTag ) ;/*	clipboard operations */EXTERN_API ( OSErr )WECut (							WEReference				inWE ) ;EXTERN_API ( OSErr )WECopy (						WEReference				inWE ) ;EXTERN_API ( OSStatus )WECopyToScrap (					ScrapRef				inScrap,			/* can be NULL */								const ScrapFlavorType *	inScrapFlavors,		/* can be NULL */								OptionBits				inCopyOptions,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEPaste (						WEReference				inWE ) ;EXTERN_API ( OSStatus )WEPasteFromScrap (				ScrapRef				inScrap,								OptionBits				inPasteOptions,								WEReference				inWE ) ;EXTERN_API ( Boolean )WECanPaste (					WEReference				inWE ) ;/*	Drag Manager support */EXTERN_API ( RgnHandle )WEGetHiliteRgn (				SInt32					inRangeStart,								SInt32					inRangeEnd,								WEReference				inWE ) ;EXTERN_API( OSErr )WETrackDrag (					DragTrackingMessage		inMessage,								DragRef					inDrag,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEReceiveDrag (					DragRef					inDrag,								WEReference 			inWE ) ;EXTERN_API ( Boolean )WECanAcceptDrag (				DragRef					inDrag,								WEReference				inWE ) ;EXTERN_API ( Boolean )WEDraggedToTrash (				DragRef					inDrag ) ;/*	font tables */EXTERN_API ( OSErr )WEBuildFontTable (				WEFontTableHandle		outFontTable,								WEFontIDToNameUPP		inFontIDToNameProc,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEUpdateFontTable (				WEFontTableHandle		ioFontTable,								WEFontNameToIDUPP		inFontNameToIDProc,								Boolean *				outWasChanged ) ;EXTERN_API ( OSErr )WEUpdateStyleScrap (			StScrpHandle			ioStyles,								WEFontTableHandle		inFontTable ) ;/*	Script Manager utilities */EXTERN_API ( SInt16 )WECharByte (					SInt32					inOffset,								WEReference				inWE ) ;EXTERN_API( SInt16 )WECharType (					SInt32					inOffset,								WEReference				inWE ) ;/*	Text Services Manager support */EXTERN_API ( OSErr )WEInstallTSMHandlers ( 			void ) ;EXTERN_API ( OSErr )WERemoveTSMHandlers (			void ) ;EXTERN_API ( OSErr )WEHandleTSMEvent (				const AppleEvent *		inAppleEvent,								AppleEvent *			ioReply ) ;EXTERN_API ( void )WEStopInlineSession (			WEReference				inWE ) ;EXTERN_API ( OSStatus )WESetTSMHilite (				SInt32					inRangeStart,								SInt32					inRangeEnd,								WETSMHiliteStyle		inTSMHiliteStyle,								WEReference				inWE ) ;/*	printing support */EXTERN_API ( OSErr )WENewPrintSession (				const WEPrintOptions *	inPrintOptions,								WEReference				inWE,								WEPrintSession *		outPrintSession ) ;EXTERN_API ( void )WEDisposePrintSession (			WEPrintSession			inPrintSession ) ;EXTERN_API ( SInt32 )WECountPages (					WEPrintSession			inPrintSession ) ;EXTERN_API ( SInt32 )WEGetPageHeight (				SInt32					inPageIndex,								WEPrintSession			inPrintSession ) ;EXTERN_API ( OSErr )WEPrintPage (					SInt32					inPageIndex,								GrafPtr					inPrintPort,								const Rect *			inPageRect,								WEPrintSession			inPrintSession ) ;/*	filing (Mac OS 9.1 and later) */EXTERN_API ( OSStatus )WESave (						SInt32					inRangeStart,								SInt32					inRangeEnd,								const FSRef *			inFileRef,								OSType					inFileType,								TextEncoding			inTextEncoding,								OptionBits				inSaveOptions,								WEReference				inWE ) ;EXTERN_API ( OSStatus )WELoad (						SInt32					inRangeStart,								SInt32					inRangeEnd,								const FSRef *			inFileRef,								OSType *				ioFileType,								TextEncoding *			ioTextEncoding,								OptionBits *			ioLoadOptions,								WEReference				inWE ) ;/*	additional features */EXTERN_API ( SInt16 )WEFeatureFlag (					SInt16					inFeature,								SInt16					inAction,								WEReference				inWE ) ;EXTERN_API ( OSErr )WEGetInfo (						WESelector				inSelector,								void *					outInfo,								WEReference				inWE ) ;EXTERN_API ( OSErr )WESetInfo (						WESelector				inSelector,								const void *			inInfo,								WEReference				inWE ) ;/*	getting and setting user-defined info */EXTERN_API ( OSErr )WEGetUserInfo (					WESelector				inUserTag,								SInt32 *				outUserInfo,								WEReference				inWE ) ;EXTERN_API ( OSErr )WESetUserInfo (					WESelector				inUserTag,								SInt32					inUserInfo,								WEReference				inWE ) ;EXTERN_API ( OSErr )WERemoveUserInfo (				WESelector				inUserTag,								WEReference				inWE ) ;EXTERN_API ( OSStatus )WEGetProperty (					OSType					inPropertyCreator,								OSType					inPropertyTag,								ByteCount				inPropertySize,								ByteCount *				outActualSize,		/* can be NULL */								void *					outPropertyBuffer,								WEReference				inWE ) ;EXTERN_API ( OSStatus )WESetProperty (					OSType					inPropertyCreator,								OSType					inPropertyTag,								ByteCount				inPropertySize,								const void *			inPropertyBuffer,								WEReference				inWE ) ;EXTERN_API ( OSStatus )WERemoveProperty (				OSType					inPropertyCreator,								OSType					inPropertyTag,								WEReference				inWE ) ;/*	long coordinate utilities */EXTERN_API ( void )WELongPointToPoint (			const LongPt *			inLongPoint,								Point *					outPoint ) ;EXTERN_API ( void )WEPointToLongPoint (			Point					inPoint,								LongPt *				outLongPoint ) ;EXTERN_API ( void )WESetLongRect (					LongRect *				outLongRect,								SInt32					inLeft,								SInt32					inTop,								SInt32					inRight,								SInt32					inBottom ) ;EXTERN_API ( void )WELongRectToRect (				const LongRect *		inLongRect,								Rect *					outRect ) ;EXTERN_API ( void )WERectToLongRect (				const Rect *			inRect,								LongRect *				outLongRect ) ;EXTERN_API ( void )WEOffsetLongRect (				LongRect *				ioLongRect,								SInt32					inHorizontalOffset,								SInt32					inVerticalOffset ) ;EXTERN_API ( Boolean )WELongPointInLongRect (			const LongPt *			inLongPoint,								const LongRect *		inLongRect ) ;#if PRAGMA_IMPORT#pragma import off#endif#if PRAGMA_STRUCT_ALIGN#pragma options align=reset#endif#ifdef __cplusplus}#endif#endif	/*__WASTE__*/
/* =========================================================================== *	CDAVRequest.h			    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2000  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com *//*!   @header DAVLib	This library implements HTTP 1.1 and the WebDAV (RFC 2518) extensions to HTTP.   This program is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.    This program is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.*/#pragma once#ifndef __CDAVREQUEST_H__#define __CDAVREQUEST_H__#include <LThread.h>#include "DAVTypes.h"#include "CDAVConnection.h"#include "CDAVMessage.h"#include "CDAVInfo.h"#include "CDAVProperty.h"#include "CDAVItem.h"#include <OpenSSLGlue.h>#include <string>/*!   @class CDAVRequest   @discussion A higher level class, which builds on the DAV and HTTP connection classes.  This API    abstracts out a lot of the DAV protocol specifics.  **/class CDAVRequest {      public:      /*!         @enum DAV transaction response codes         @constant SUCCESS Transaction successful         @constant WARNING Transaction succeeded but with warnings         @constant FAILURE Transaction failed.         @constant CANCEL  Transaction canceled.         @constant XMLERROR Transport of the request succeeded, but there was an error in parsing                     the XML sent from the server.           @constant UNKNOWN  Unknown failure. Transaction not successful.      */      enum ReqStatus {         SUCCESS,         WARNING,         FAILURE,         CANCEL,         XMLERROR,         UNKNOWN      };      public:      //ctors & dtor      /*!         @function CDAVRequest         @discussion Constructs a CDAVRequest to operate against a particular DAV server.      */      CDAVRequest(class CDAVContext *ctx);            /*!         @function CDAVRequest		@discussion constructs a CDAVRequest using a persistent connection which operates in the given thread.	*/	CDAVRequest(LThread & inThread, CDAVContext *ctx);	/*!		@function CDAVRequest         @discussion copy constructor           */      CDAVRequest(const CDAVRequest &req);            /*!		   @function CancelTransaction         @discussion Cancel the current transaction; currently only works for PutResource          and GetResource      */      void CancelTransaction();            /*!		   @function ~CDAVRequest         @discussion Destructor      */      virtual ~CDAVRequest();            /*!		@function SetHeaderExtra		@discussion Sets any extra headers to be attached to the outgoing message	*/	void SetHeaderExtra (std::string inExtra) {m_headerExtra = inExtra;}	/*!		@function GetHeaderExtra		@discussion returns the current value of the extra headers to be sent with the outgoing message	*/	const std::string& GetHeaderExtra (void) {return m_headerExtra;}		/*!		   @function GetServerOptions         @discussion Query a server to determine if it supports various DAV and DASL operations         @param inThread the thread performing the operation         @param resource  the resource in question         @param outOptions a reference to a CDAVOptions object; output parameter         @param showDlog show a dialog on error, defaulted to false         @param listener  a listener on the event, defaulted to NULL         @result One of the enum ReqStatus      */      ReqStatus GetServerOptions(LThread& inThread,								const PP_STD::string& resource,								CDAVInfo &options,								Boolean showDlog = false,                                 LListener *listener = NULL);            /*!         @function GetResourceExists         @discussion Query server to see if a resource exists.  Implemented as a propfind.         @param inThread         the Thread performing the transaction         @param resource  the resource in question         @param inResourceIsCollection the resource in question is a collection         @param outExists output parameter         @param listener  a listener on the event, defaulted to NULL         @result One of the enum ReqStatus      */	ReqStatus GetResourceExists(LThread& inThread,								const PP_STD::string& resource,								Boolean  inResourceIsCollection,								Boolean& exists,								LListener *listener=NULL);            /*!		   @function FindAllProperties         @discussion Retrieve all known property definitions for a resource         @param inThread the Thread performing the transaction         @param resource  the resource in question         @param props     reference to return the property definitions         @param listener  a listener on the event, defaulted to NULL         @result One of the enum ReqStatus      */	ReqStatus FindAllProperties(LThread& inThread, const PP_STD::string& resource, CDAVPropertyVector &props,                                  LListener *listener = NULL);            /*!         @function GetItemProperties         @discussion For a given item, retrieve the specified set of properties         @param resource  the resource in question                  @param props     list of properties to retrieve         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus GetItemProperties(LThread& inThread,                                    CDAVItem &resource, CDAVPropertyVector &props,                                   LListener *listener=NULL);      /*!         @function SetItemProperty         @discussion For a given item, set the specified set of property         @param resource  the resource in question                  @param prop      the propertiy to set         @param propVal   the property's value; must be PCDATA or well formed XML         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus SetItemProperty(LThread& inThread, CDAVItem &resource,                                 CDAVProperty &prop, std::string &propVal,                                LListener *listener=NULL);                                      /*!         @function RemoveItemProperty         @discussion For a given item, set the specified set of property         @param resource  the resource in question                  @param prop      the propertiy to set         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus RemoveItemProperty(LThread& inThread, CDAVItem &resource,                                 CDAVProperty &prop, LListener *listener=NULL);      /*!         @function ListDirectory         @discussion get the contents of a collection         @param inThread  the Thread performing the transaction         @param resource  the resource in question         @param children  reference to return the collection members         @param props     list of properties to retrieve         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */                        	ReqStatus ListDirectory(LThread& inThread, const PP_STD::string& resource, CDAVItemVector &children,                               CDAVPropertyVector &props, class LListener *listener=NULL,                              DAVTypes::PropertyDepth depth = DAVTypes::ONE );                  /*!		   @function ListLocks         @discussion list all locks under a resource         @param inThread  the Thread performing the transaction         @param resource  the resource in question         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */                        	ReqStatus ListLocks(LThread& inThread, const PP_STD::string& resource, LListener *listener = NULL);	/*! 		@function CreateDirectory         @discussion Create a new collection on the DAV server         @param inThread  the Thread performing the transaction         @param resource  a resource specifying the location of the new collection                 @param lockToken  a lock token for the parent of the new collection.  If NULL                     no If header is sent.  Defaulted to NULL         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */	ReqStatus CreateDirectory(LThread& inThread, const PP_STD::string& resource,                                const char* lockToken = NULL, LListener *listener = NULL);        	  /*		 Remove a resource from the DAV server		 inThread - the Thread performing the transaction		 resource - the resource in question   	  */	ReqStatus DeleteResource(LThread& inThread, const PP_STD::string& resource, LListener *listener = NULL);             /*!		   @function DeleteResource         @discussion Remove a resource from the DAV server; if there is a lock owned by the current         user, the opaquelocktoken is sent to the server                  @param inThread  the Thread performing the transaction         @param item  the item to be deleted in question                     @param lockToken an optional Lock Token for resource specified by item.  Can be NULL                      (no lock will be sent to server)                  @param pntLockToken  an optional Lock Token for immedate parent of the resource specified by                        item.  Can be NULL (no lock will be sent to server)             @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus DeleteResource(LThread& inThread, CDAVItem& item, const char* lockToken=NULL,                               const char* pntLockToken=NULL, LListener *listener = NULL);            /*!         @function CopyResource         @discussion copy the contents of a resource.  If the resource is a collection, the members of the         collection are copied recursively by default.                  @param inThread  the Thread performing the transaction         @param source    the original resource         @param destination  the destination of the resource copy.  Must be fully qualified with                       protocol, host, etc, and already URL encoded.         @param overwrite  if set to DAVTypes::T, will overwrite a pre-existing resource.                            Defaulted to DAVTypes::F         @param propsOnly  if set to TRUE, only the directory is created and properties are copied.                     no recursive copy.  Defaulted to false         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */                        	ReqStatus CopyResource(LThread& inThread, const PP_STD::string& source, const PP_STD::string& destination,                        DAVTypes::Overwrite overwrite = DAVTypes::F,                         Boolean propsOnly = false,  LListener *listener = NULL);                              /*!         @function MoveResource         @discussion moves the contents of a resource.  If the resource is a collection, the members of the         collection are moved recursively.                  @param inThread  the Thread performing the transaction         @param source    the original resource         @param destination  the destination of the resource copy.  Must be fully qualified with                       protocol, host, etc.         @param overwrite  if set to DAVTypes::T, will overwrite a pre-existing resource.  Defaulted                           to DAVTypes::F         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */                        	ReqStatus MoveResource(LThread& inThread, const PP_STD::string& source , const PP_STD::string& destination, 					   DAVTypes::Overwrite overwrite = DAVTypes::F, LListener *listener = NULL);             /*!         @function PutResource         @discussion uploads a FSSpec to location specified on the DAV server                           @param inThread  the Thread performing the transaction         @param destination  the destination of the file         @param inputSpec  the FSSpec to upload         @param useMacBinary  true if the file is to be encoded in MacBinary format         @param locktoken  a Lock token to optionally use when uploading the file.  Can be NULL         @param pntLockToken  a Lock token on the parent URI to optionally use when uploading the file.                             Can be NULL.  Defaulted to NULL.         @param itemCreated  if a new resource was created as part of this transaction, this                       is set to true; otherwise (on an HTTP 204), it's set to false.                       Can be NULL.  Defaulted to NULL.         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */                         	ReqStatus PutResource(LThread& inThread, const PP_STD::string& destination, const FSSpec &inputSpec,							bool useMacBinary = false,							const char* locktoken = NULL, const char* pntLockToken = NULL,							Boolean *itemCreated=NULL, LListener *listener = NULL);            /*!         @function GetResource         @discussion downloads a resource on the DAV server to an FSSpec                         @param inThread the Thread performing the transaction         @param resource  the resource to download         @param outputSpec  the FSSpec specifying the resource's destination         @param useMacBinary  if true the file is assumed to be MacBinary and will be decoded         @param expectedSize  the size of the file to be uploaded, typically         	from the getcontentlength property. Used to get around MacBinary bug in IE explorer.         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus	*/                              	ReqStatus GetResource(LThread& inThread, const PP_STD::string& resource, const FSSpec &outputSpec,						bool isMacBinary = false, SInt32 expectedSize = 0, LListener *listener = NULL);           /*!         @function LockResource         @discussion Given an item, create a lock for the specified resource.  Implies a Depth of Zero         @param inThread         the Thread performing the transaction         @param item             the resource to be locked         @param lockScope        the scope of the lock (exclusive or shared)         @param timeout_seconds  number of seconds until lock times out.  If this is set to 0, then                           Infinite is requested.  Note that according to the DAV standard, a server                           is not required to honor this request.  Default is 0.         @param owner            a href to optionally identify the lock owner.  This may be NULL.                                 default is NULL.         @param lockType         the type of the lock.  At this time, DAV only specifies a WRITE lock,                                 hence the default value or WRITE         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus                                          */            ReqStatus LockResource(LThread& inThread, CDAVItem &item, CDAVItem::LockScope lockScope,                              const char* owner=NULL, SInt32 timeout_seconds=0,                             CDAVItem::LockType lockType = CDAVItem::WRITE,                             LListener *listener = NULL);            /*!         @function UnlockResource         @discussion              @param inThread         the Thread performing the transaction         @param item the item to unlock.         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus UnlockResource(LThread& inThread, CDAVItem &item, LListener *listener = NULL);            /*!         @function UnlockResource         @discussion         @param inThread         the Thread performing the transaction         @param uri  the resource to be unlocked         @param lockToken the lock token for the specified URL.         @param listener  a listener on the event, defaulted to NULL                  @result One of the enum ReqStatus      */      ReqStatus UnlockResource(LThread& inThread, const char* uri, const char* lockToken, LListener *listener = NULL);            /*!         @function DynBufferToFile         @discussion There is a bug in the function LDynamicBuffer::BufferToFile in the                     version of PowerPlant that shipped with CW5 where the resulting file                     is zero length if the buffer in the LDynamicBuffer object is a file                     and not a handle.  This function reimplemts that function and fixes the defect.      */            static Boolean DynBufferToFile(LDynamicBuffer *outBuf, LFile& outFile);            /*!         @function GetLastResponse         @discussion Returns the HTTP response code from the last request operation.      */      SInt32 GetLastResponse() {return mLastResponse;};            static void SetUserAgent(const char* userAgent);         protected:      // used to prepare HTTP header for possible use of a proxy server	void _PrepareHostFields(PP_STD::string &theHost, SInt32 &thePort, PP_STD::string &theResource, CDAVMessage &theMessage);            //virtual function called at the beginning of a transaction      virtual void _StartTransaction(CDAVConnection &connection);      //virtual function called at the end of a transaction      virtual void _EndTransaction(CDAVConnection &connection);         // a virtual function to handle any error reporting or logging	// base implementation does nothing.	Override in subclasses	virtual void _OnDavRequestError(LHTTPResponse &theResponse, const char* displayString=NULL);            // virtual function called whenever a CDAVItem is created      virtual void _OnDavItemCreated(CDAVItem& theItem);      // virtual function called whenever a CDAVItem is modified by a DAV transaction;      //  similar to _OnDavItemCreated, but for existing items.      virtual void _OnDavItemDataChange(CDAVItem& theItem);            void _NormalizeHREF(std::string &href, const std::string& parentResource);            Boolean _fillItemLockInfoFromElement(class CElement *activeLock, CDAVItem &item);  	  bool _getWasCanceled() { return mCancel;};	  	  virtual void _HandleSSLexception(LHTTPResponse &theResponse, LSSLException& e);            void _init();protected:	class CDAVContext *m_context;			// DAV Server context	class CDAVConnection *m_connection;		// Persistent connection			std::string		m_headerExtra;			// custom header additions	bool			mCancel;	SInt32			mLastResponse;	static std::string		mDefaultUserAgent;	static std::string 		mUserAgent;	bool			mAttemptRetry;	/*		StConnection either creates a new connection, or returns the current		persistent connection. If not persistent, the connection is destroyed		by ~StConnection.	*/	class StConnection;	friend class StConnection;	class StConnection	{	public:		StConnection (CDAVRequest *request, LThread& inThread, LListener *inListener = nil);		~StConnection ();				CDAVConnection &GetConnection (void) {return *mConnection;}		bool	IsPersistent() {return mPersistent;};			private:		bool 			mPersistent;		CDAVConnection *mConnection;		LListener		*mListener;		CDAVRequest		*mRequest;	};};#endif
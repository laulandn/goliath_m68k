// ===========================================================================//	LGADialog.cp				PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================//	Original Author: Robin Mair#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LGADialog.h>#include <LControlPane.h>#include <UGraphicUtils.h>#include <LStdControl.h>#include <LStream.h>#include <LString.h>#include <UKeyFilters.h>#include <PP_KeyCodes.h>#include <PP_Messages.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LGADialog								Default Constructor		  [public]// ---------------------------------------------------------------------------LGADialog::LGADialog(){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;}// ---------------------------------------------------------------------------//	¥ LGADialog								Stream Constructor		  [public]// ---------------------------------------------------------------------------LGADialog::LGADialog(	LStream*		inStream)	: LWindow(inStream){	*inStream >> mDefaultButtonID;	*inStream >> mCancelButtonID;}// ---------------------------------------------------------------------------//	¥ LGADialog								Parameterized Constructor [public]// ---------------------------------------------------------------------------LGADialog::LGADialog(	const SWindowInfo&	inWindowInfo)	: LWindow(inWindowInfo){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;}// ---------------------------------------------------------------------------//	¥ LGADialog								Parameterized Constructor [public]// ---------------------------------------------------------------------------LGADialog::LGADialog(	ResIDT			inWINDid,	UInt32			inAttributes,	LCommander*		inSuper)	: LWindow(inWINDid, inAttributes, inSuper){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID  = PaneIDT_Undefined;}// ---------------------------------------------------------------------------//	¥ LGADialog								Parameterized Constructor [public]// ---------------------------------------------------------------------------LGADialog::LGADialog(	LCommander*		inSuperCommander,	const Rect&		inGlobalBounds,	ConstStringPtr	inTitle,	SInt16			inProcID,	UInt32			inAttributes,	WindowPtr		inBehind,	PaneIDT			inDefaultButtonID,	PaneIDT			inCancelButtonID)	: LWindow(inSuperCommander, inGlobalBounds, inTitle, inProcID,					inAttributes, inBehind){	mDefaultButtonID = inDefaultButtonID;	mCancelButtonID	 = inCancelButtonID;}// ---------------------------------------------------------------------------//	¥ ~LGADialog							Destructor				  [public]// ---------------------------------------------------------------------------LGADialog::~LGADialog(){}// ---------------------------------------------------------------------------//	¥ FinishCreateSelf												  [public]// ---------------------------------------------------------------------------voidLGADialog::FinishCreateSelf(){	LControlPane* theButton;										// Set the Default Button	if (mDefaultButtonID != PaneIDT_Undefined) {		theButton = dynamic_cast<LControlPane*>									(FindPaneByID(mDefaultButtonID));		if (theButton != nil)  {			theButton->AddListener(this);			Boolean		defaultOn = true;			theButton->SetDataTag(0, kControlPushButtonDefaultTag,									sizeof(Boolean), (Ptr) &defaultOn);		}	}										// Set the Cancel Button	if (mCancelButtonID != PaneIDT_Undefined) {		theButton = dynamic_cast<LControlPane*>									(FindPaneByID(mCancelButtonID));		if (theButton != nil) {			theButton->AddListener(this);		}	}}#pragma mark -// ---------------------------------------------------------------------------//	¥ SetDefaultButton												  [public]// ---------------------------------------------------------------------------voidLGADialog::SetDefaultButton(	PaneIDT		inButtonID){	if (mDefaultButtonID != inButtonID) {		LControlPane* 	theButton;		Boolean			defaultOn;										// First we turn off the old										//   default button		theButton = dynamic_cast<LControlPane*>										(FindPaneByID(mDefaultButtonID));		if (theButton != nil) {			defaultOn = false;			theButton->SetDataTag(0, kControlPushButtonDefaultTag,										sizeof(Boolean), (Ptr) &defaultOn);			theButton->Refresh();		}		mDefaultButtonID = inButtonID;	// Set the reference to the new button										// Now we can setup the new outline		theButton = dynamic_cast<LControlPane*>										(FindPaneByID(inButtonID));		if (theButton != nil) {			theButton->AddListener(this);			defaultOn = true;			theButton->SetDataTag(0, kControlPushButtonDefaultTag,									sizeof(Boolean), (Ptr) &defaultOn);			theButton->Refresh();		}	}}// ---------------------------------------------------------------------------//	¥ SetCancelButton												  [public]// ---------------------------------------------------------------------------voidLGADialog::SetCancelButton(	PaneIDT		inButtonID){	if (mCancelButtonID != inButtonID) {		mCancelButtonID = inButtonID;		LControl*	theButton = dynamic_cast<LControl*>												(FindPaneByID(inButtonID));		if (theButton != nil) {			theButton->AddListener(this);		}	}}#pragma mark -// ---------------------------------------------------------------------------//	¥ HandleKeyPress												  [public]// ---------------------------------------------------------------------------////	LGADialog handles keyboard equivalents for hitting the Default and//	Cancel Buttons.////		Default Button: Enter, Return//		Cancel Button:  Escape, Command-PeriodBooleanLGADialog::HandleKeyPress(	const EventRecord&	inKeyEvent){	Boolean		keyHandled	= true;	LControl*	keyButton	= nil;	UInt8		theChar		= (UInt8) (inKeyEvent.message & charCodeMask);	if ( (theChar == char_Enter) || (theChar == char_Return) ) {		keyButton = dynamic_cast<LControl*>(FindPaneByID(mDefaultButtonID));	} else if ( UKeyFilters::IsEscapeKey(inKeyEvent) ||				UKeyFilters::IsCmdPeriod(inKeyEvent) ) {		keyButton = dynamic_cast<LControl*>(FindPaneByID(mCancelButtonID));	}	if (keyButton != nil) {		keyButton->SimulateHotSpotClick(kControlButtonPart);	} else {		keyHandled = LWindow::HandleKeyPress(inKeyEvent);	}	return keyHandled;}// ---------------------------------------------------------------------------//	¥ ListenToMessage												  [public]// ---------------------------------------------------------------------------voidLGADialog::ListenToMessage(	MessageT	inMessage,	void*		ioParam){	if ( inMessage == cmd_Close ) {		DoClose ();	} else if ( inMessage < 0 ) {										// Relay message to supercommander		if ( GetSuperCommander () != nil ) {			SLGADialogResponse	theResponse;			theResponse.dialogBox = this;			theResponse.messageParam = ioParam;			ProcessCommand ( inMessage, &theResponse );		}	}}PP_End_Namespace_PowerPlant
/* =========================================================================== *	CDAVProperty.cpp			    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2000  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */ #include <string.h>#include "CDAVProperty.h"#include <DAVTypes.h>CDAVProperty LastModified(DAVTypes::GETLASTMODIFIED);CDAVProperty ContentLength(DAVTypes::GETCONTENTLENGTH);CDAVProperty ResourceType(DAVTypes::RESOURCETYPE);CDAVProperty ContentType(DAVTypes::GETCONTENTTYPE);CDAVProperty CreationDate(DAVTypes::CREATIONDATE);CDAVProperty DisplayName(DAVTypes::DISPLAYNAME);CDAVProperty ETag(DAVTypes::GETETAG);CDAVProperty LockDiscovery(DAVTypes::LOCKDISCOVERY);CDAVProperty SupportedLock(DAVTypes::SUPPORTEDLOCK);CDAVProperty ContentLanguage(DAVTypes::GETCONTENTLANGUAGE);CDAVProperty Source(DAVTypes::SOURCE);CDAVProperty mod_davExecutable("executable", MODDAV_NAMESPACE);// Microsoft extensions// (www.ics.uci.edu/~ejw/authoring/props/draft-hopmann-collection-props-00.txt)CDAVProperty ChildCount(DAVTypes::CHILDCOUNT);CDAVProperty DefaultDocument(DAVTypes::DEFAULTDOCUMENT);CDAVProperty Id(DAVTypes::GETID);CDAVProperty IsCollection(DAVTypes::ISCOLLECTION);CDAVProperty IsHidden(DAVTypes::ISHIDDEN);CDAVProperty IsStructuredDocument(DAVTypes::ISSTRUCTUREDDOCUMENT);CDAVProperty HasSubs(DAVTypes::HASSUBS);CDAVProperty NoSubs(DAVTypes::NOSUBS);CDAVProperty ObjectCount(DAVTypes::OBJECTCOUNT);CDAVProperty Reserved(DAVTypes::RESERVED);CDAVProperty VisibleCount(DAVTypes::VISIBLECOUNT);                    // ---------------------------------------------------------------------------//		¥ CDAVProperty()// ---------------------------------------------------------------------------//	CDAVProperty::CDAVProperty() {}// ---------------------------------------------------------------------------//		¥ CDAVProperty()// ---------------------------------------------------------------------------//	CDAVProperty::CDAVProperty(const char* name, const char* space):   mPropertyName(name) {   if (NULL == space) {      mNamespace=DAV_NAMESPACE;      mInDavSpace = true;   } else {      mNamespace=space;      mInDavSpace = (strcmp(space, DAV_NAMESPACE)==0);   }}// ---------------------------------------------------------------------------//		¥ ~CDAVProperty()// ---------------------------------------------------------------------------//	CDAVProperty::~CDAVProperty() {}// ---------------------------------------------------------------------------//		¥ GetPropertyName()// ---------------------------------------------------------------------------//	std::string &CDAVProperty::GetPropertyName() {   return mPropertyName;}// ---------------------------------------------------------------------------//		¥ GetNamespace()// ---------------------------------------------------------------------------//	std::string &CDAVProperty::GetNamespace() {   return mNamespace;}// ---------------------------------------------------------------------------//		¥ getIsInDAVNamespace()// ---------------------------------------------------------------------------//	Boolean CDAVProperty::getIsInDAVNamespace() {   return mInDavSpace;}// ---------------------------------------------------------------------------//		¥ operator ==// ---------------------------------------------------------------------------//	bool CDAVProperty::operator == (CDAVProperty &rhs) const{	if (mInDavSpace && rhs.mInDavSpace || mNamespace == rhs.mNamespace)		return (mPropertyName == rhs.mPropertyName);	else		return false;};// ---------------------------------------------------------------------------//		¥ operator <// ---------------------------------------------------------------------------//	bool CDAVProperty::operator < (const CDAVProperty &rhs) const{	if (mInDavSpace && rhs.mInDavSpace || mNamespace == rhs.mNamespace)		return (mPropertyName.compare (rhs.mPropertyName) < 0);	else		return (mNamespace.compare (rhs.mNamespace) < 0);}
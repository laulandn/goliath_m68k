/* * This file was generated by the SOM Compiler. * FileName: somobj.xh. * Generated using: *     SOM Precompiler somipc: 2.18 *     SOM Emitter emitxh.dll: 2.33 *//* *  *  	Copyright:	© 1994,1995 by Apple Computer, Inc. *  				All rights reserved. *  *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994 *    All Rights Reserved *    Licensed Materials - Property of IBM *    US Government Users Restricted Rights - Use, duplication or *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp. *  *   SOMObject: System Object Model root class */#ifndef SOM_SOMObject_xh#define SOM_SOMObject_xhclass SOMObject;/* *  This is the SOM root class, all SOM classes must be descended from *  <SOMObject>. */#define SOMObject_MajorVersion 70#define SOMObject_MinorVersion 1/* C++ SOM defs */#include <som.xh>#ifndef SOMObject_API#define SOMObject_API/* * -- The Class API *//* * Start of user-defined types: */class SOMClass;class SOMObject;/* * End of user-defined types. */#ifdef OLDIBMSOMAPISUPPORT#define SOMObjectCClassData SOMObjectClassData#define SOMObjectNewClass(major,minor) somNewVersionedClassReference(SOMObject,major,minor)#endif/* define xxxMetaClass macro to facilitate (cls ## MetaClass) */#define SOMObjectMetaClass SOMClass#if PRAGMA_ALIGN_SUPPORTED#  pragma options align=power#endif/* The API to the SOMObject class object, and the methods it introduces. */SOMEXTERN struct SOMObjectClassDataStructure {#ifdef OLDIBMSOMAPISUPPORT	SOMClass			*classObject;	/* always zero, use somNewClassReference instead */#else	long zero;#endif	somStaticClassInfo *sci;	somDToken		instanceDataToken;	long reserved [3];	somMToken somInit;	somMToken somUninit;	somMToken somDuplicateReference;	somMToken somCompareReference;	somMToken somRelease;	somMToken somFree;	somMToken somCanDelete;	somMToken somGetClass;	somMToken somGetClassName;	somMToken somGetSize;	somMToken somIsA;	somMToken somRespondsTo;	somMToken somIsInstanceOf;	somMToken somDispatch;	somMToken somClassDispatch;	somMToken somCastObj;	somMToken somResetObj;	somMToken somDumpSelf;	somMToken somPrintSelf;	somMToken somDumpSelfInt;	somMToken p1;	somMToken p2;} SOMDLINK SOMObjectClassData;#if PRAGMA_ALIGN_SUPPORTED#  pragma options align=reset#endif#if !defined(SOMObject_Class_Source) && !defined(SOM_Module_somobj_Source)#if PRAGMA_IMPORT_SUPPORTED#pragma import list SOMObjectClassData#endif#endif/* * -- Typedefs and inline method declarations for left path inherited methods * -- are omitted because this compilation had -museinheritedmethods in effect *//* * -- Typedefs for SOMObject Method Procedures */SOMEXTERN {typedef void   (* SOMLINK somTD_SOMObject_somInit)(SOMObject *somSelf);typedef void   (* SOMLINK somTD_SOMObject_somUninit)(SOMObject *somSelf);typedef SOMObject*   (* SOMLINK somTD_SOMObject_somDuplicateReference)(SOMObject *somSelf);typedef boolean   (* SOMLINK somTD_SOMObject_somCompareReference)(SOMObject *somSelf,		SOMObject* anObject);typedef SOMObject*   (* SOMLINK somTD_SOMObject_somRelease)(SOMObject *somSelf);typedef void   (* SOMLINK somTD_SOMObject_somFree)(SOMObject *somSelf);typedef boolean   (* SOMLINK somTD_SOMObject_somCanDelete)(SOMObject *somSelf);typedef SOMClass*   (* SOMLINK somTD_SOMObject_somGetClass)(SOMObject *somSelf);typedef corbastring   (* SOMLINK somTD_SOMObject_somGetClassName)(SOMObject *somSelf);typedef long   (* SOMLINK somTD_SOMObject_somGetSize)(SOMObject *somSelf);typedef boolean   (* SOMLINK somTD_SOMObject_somIsA)(SOMObject *somSelf,		SOMClass* aClassObj);typedef boolean   (* SOMLINK somTD_SOMObject_somRespondsTo)(SOMObject *somSelf,		somId mId);typedef boolean   (* SOMLINK somTD_SOMObject_somIsInstanceOf)(SOMObject *somSelf,		SOMClass* aClassObj);typedef boolean   (* SOMLINK somTD_SOMObject_somDispatch)(SOMObject *somSelf,		somToken* retValue,		somId methodId,		va_list ap);typedef boolean   (* SOMLINK somTD_SOMObject_somClassDispatch)(SOMObject *somSelf,		SOMClass* clsObj,		somToken* retValue,		somId methodId,		va_list ap);typedef boolean   (* SOMLINK somTD_SOMObject_somCastObj)(SOMObject *somSelf,		SOMClass* cls);typedef boolean   (* SOMLINK somTD_SOMObject_somResetObj)(SOMObject *somSelf);typedef SOMObject*   (* SOMLINK somTD_SOMObject_somPrintSelf)(SOMObject *somSelf);typedef void   (* SOMLINK somTD_SOMObject_somDumpSelf)(SOMObject *somSelf,		long level);typedef void   (* SOMLINK somTD_SOMObject_somDumpSelfInt)(SOMObject *somSelf,		long level);}#endif /* SOMObject_API *//* * -- This emitter treats Method Tokens as Thunks by default. * -- Use the sc modifier "nothunks" to change this default */#undef somresolve_#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))// special somclass api for use in SOMObject.xh#include <somcls.api>/* * -- The C++ Wrapper Class for SOMObject */class SOMObject{public:// SOMObject::new registers use of the class object, and then uses somNew// to allocate memory and load the object method table pointer. void *operator new(size_t size){    SOM_IgnoreWarning(size);    // Allocate memory using the default allocator for SOMObject, and    // clear mem & set method table pointer, call basic initialization    return (void*) somNewObject(SOMObject);}// SOMObject::delete uses the default deallocator for the object's class.void operator delete(void * obj){    if (obj) {        SOM_Resolve(obj,SOMObject,somFree)           ( (SOMObject*) obj );    }}/* method: somInit */void   somInit(){   SOM_ResolveD(this,SOMObject,SOMObject,somInit)	(this);}/* method: somUninit */void   somUninit(){   SOM_ResolveD(this,SOMObject,SOMObject,somUninit)	(this);}/* method: somDuplicateReference */SOMObject*   somDuplicateReference(){   return SOM_ResolveD(this,SOMObject,SOMObject,somDuplicateReference)	(this);}/* method: somCompareReference */boolean   somCompareReference(SOMObject* anObject){   return SOM_ResolveD(this,SOMObject,SOMObject,somCompareReference)	(this,anObject);}/* method: somRelease */SOMObject*   somRelease(){   return SOM_ResolveD(this,SOMObject,SOMObject,somRelease)	(this);}/* method: somFree */void   somFree(){   SOM_ResolveD(this,SOMObject,SOMObject,somFree)	(this);}/* method: somCanDelete */boolean   somCanDelete(){   return SOM_ResolveD(this,SOMObject,SOMObject,somCanDelete)	(this);}/* method: somGetClass */SOMClass*   somGetClass(){   return SOM_ResolveD(this,SOMObject,SOMObject,somGetClass)	(this);}/* method: somGetClassName */corbastring   somGetClassName(){   return SOM_ResolveD(this,SOMObject,SOMObject,somGetClassName)	(this);}/* method: somGetSize */long   somGetSize(){   return SOM_ResolveD(this,SOMObject,SOMObject,somGetSize)	(this);}/* method: somIsA */boolean   somIsA(SOMClass* aClassObj){   return SOM_ResolveD(this,SOMObject,SOMObject,somIsA)	(this,aClassObj);}/* method: somRespondsTo */boolean   somRespondsTo(somId mId){   return SOM_ResolveD(this,SOMObject,SOMObject,somRespondsTo)	(this,mId);}/* method: somIsInstanceOf */boolean   somIsInstanceOf(SOMClass* aClassObj){   return SOM_ResolveD(this,SOMObject,SOMObject,somIsInstanceOf)	(this,aClassObj);}/* va_list method: somDispatch *//* the va_list invocation form */boolean   SOMObject_somDispatch(somToken* retValue,		somId methodId,		va_list ap){   return SOM_ResolveD(this,SOMObject,SOMObject,somDispatch)	(this,retValue,methodId,ap);}/* the varargs invocation form */boolean   somDispatch(somToken* retValue,		somId methodId,		...){   va_list ap;   va_start(ap, methodId);      boolean __somResult =       (boolean) SOM_ResolveD(this,SOMObject,SOMObject,somDispatch)	(this,retValue,methodId,ap);   va_end(ap);   return __somResult;}/* va_list method: somClassDispatch *//* the va_list invocation form */boolean   SOMObject_somClassDispatch(SOMClass* clsObj,		somToken* retValue,		somId methodId,		va_list ap){   return SOM_ResolveD(this,SOMObject,SOMObject,somClassDispatch)	(this,clsObj,retValue,methodId,ap);}/* the varargs invocation form */boolean   somClassDispatch(SOMClass* clsObj,		somToken* retValue,		somId methodId,		...){   va_list ap;   va_start(ap, methodId);      boolean __somResult =       (boolean) SOM_ResolveD(this,SOMObject,SOMObject,somClassDispatch)	(this,clsObj,retValue,methodId,ap);   va_end(ap);   return __somResult;}/* method: somCastObj */boolean   somCastObj(SOMClass* cls){   return SOM_ResolveD(this,SOMObject,SOMObject,somCastObj)	(this,cls);}/* method: somResetObj */boolean   somResetObj(){   return SOM_ResolveD(this,SOMObject,SOMObject,somResetObj)	(this);}/* method: somPrintSelf */SOMObject*   somPrintSelf(){   return SOM_ResolveD(this,SOMObject,SOMObject,somPrintSelf)	(this);}/* method: somDumpSelf */void   somDumpSelf(long level){   SOM_ResolveD(this,SOMObject,SOMObject,somDumpSelf)	(this,level);}/* method: somDumpSelfInt */void   somDumpSelfInt(long level){   SOM_ResolveD(this,SOMObject,SOMObject,somDumpSelfInt)	(this,level);}};   /* SOMObject */#endif       /* SOM_SOMObject_xh */
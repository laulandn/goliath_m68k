// ===========================================================================//	TEventHandler.h				PowerPlant 2.1			 ©2000 Metrowerks Inc.// ===========================================================================////	A Carbon Event handler template class where the Toolbox callback calls//	a member function of an object#ifndef _H_TEventHandler#define _H_TEventHandler#pragma once#include <LEventHandler.h>PP_Begin_Namespace_PowerPlanttemplate <class T> class TEventHandler : public LEventHandler {public:typedef	 OSStatus (T:: * HandlerFunc)(EventHandlerCallRef, EventRef);// ---------------------------------------------------------------------------//	¥ TEventHandler// ---------------------------------------------------------------------------TEventHandler(){	mHandlerObject	= nil;	mHandlerFunc	= nil;}// ---------------------------------------------------------------------------//	¥ TEventHandler// ---------------------------------------------------------------------------TEventHandler(	EventTargetRef			inTarget,	UInt32					inNumTypes,	const EventTypeSpec*	inTypeList,	T*						inHandlerObject,	HandlerFunc				inFunc){	Install(inTarget, inNumTypes, inTypeList, inHandlerObject, inFunc);}// ---------------------------------------------------------------------------//	¥ TEventHandler// ---------------------------------------------------------------------------TEventHandler(	EventTargetRef	inTarget,	EventClass		inEventClass,	EventType		inEventType,	T*				inHandlerObject,	HandlerFunc		inFunc){	Install(inTarget, inEventClass, inEventType, inHandlerObject, inFunc);}// ---------------------------------------------------------------------------//	¥ ~TEventHandler						Destructor// ---------------------------------------------------------------------------virtual~TEventHandler(){}// ---------------------------------------------------------------------------//	¥ Install// ---------------------------------------------------------------------------OSStatusInstall(	EventTargetRef			inTarget,	UInt32					inNumTypes,	const EventTypeSpec*	inTypeList,	T*						inHandlerObject,	HandlerFunc				inFunc){	mHandlerObject	= inHandlerObject;	mHandlerFunc	= inFunc;		if (sHandlerUPP == nil) {		sHandlerUPP = NewEventHandlerUPP(&EventHandlerCallback);	}		return LEventHandler::Install( inTarget,								   sHandlerUPP,								   inNumTypes,								   inTypeList,								   this );}// ---------------------------------------------------------------------------//	¥ Install// ---------------------------------------------------------------------------OSStatusInstall(	EventTargetRef	inTarget,	EventClass		inEventClass,	EventType		inEventType,	T*				inHandlerObject,	HandlerFunc		inFunc){	EventTypeSpec	typeSpec = { inEventClass, inEventType };		return Install(inTarget, 1, &typeSpec, inHandlerObject, inFunc);}// ---------------------------------------------------------------------------//	¥ GetHandlerObject// ---------------------------------------------------------------------------T*GetHandlerObject() const{	return mHandlerObject;}// ---------------------------------------------------------------------------//	¥ GetHandlerFunc// ---------------------------------------------------------------------------HandlerFuncGetHandlerFunc(){	return mHandlerFunc;}// ---------------------------------------------------------------------------//	¥ EventHandlerCallback// ---------------------------------------------------------------------------//	Toolbax event handler callback functionstatic pascalOSStatusEventHandlerCallback(	EventHandlerCallRef	inCallRef,	EventRef			inEventRef,	void*				inUserData){	TEventHandler<T>*	handler = static_cast<TEventHandler<T>*>(inUserData);	T*					handlerObject = handler->GetHandlerObject();	HandlerFunc			func = handler->GetHandlerFunc();		OSStatus			result = eventNotHandledErr;		try {		result = (handlerObject->*func)(inCallRef, inEventRef);	}		catch (...) { }				// Can't throw out of a Toolbox callback	return result;}// ===========================================================================//	Instance Variables// ===========================================================================private:	T*					mHandlerObject;	HandlerFunc			mHandlerFunc;		static EventHandlerUPP		sHandlerUPP;							};PP_End_Namespace_PowerPlant#endif
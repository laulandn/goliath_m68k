/* =========================================================================== *	SSLClientCertCache.h		    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2002  Thomas Bednarzär * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com */#ifndef __SSLClientCertCache_h__#define __SSLClientCertCache_h__#ifndef __SSLDistinguishedName_h__#include "SSLDistinguishedName.h"#endif#include <list>#include <map>class SSLClientCertCache {public:	SSLClientCertCache();	virtual ~SSLClientCertCache();		bool HaveCert(X509_NAME* inSubject);	void OutputCert(X509_NAME* inSubject, X509 **x509, EVP_PKEY **pkey);	void AddCert(X509_NAME* inSubject,  PKCS12* inPkcs12, const char*pass);	protected:	std::map<SSLDistinguishedName, std::pair<PKCS12*, std::string> > mClientCertCache;	std::list<PKCS12*>	mCachedCerts;};SSLClientCertCache::SSLClientCertCache() {}SSLClientCertCache::~SSLClientCertCache() {	for (std::list<PKCS12*>::iterator iter = mCachedCerts.begin(); iter != mCachedCerts.end(); ++iter) {	   PKCS12_free(*iter);	}}bool SSLClientCertCache::HaveCert(X509_NAME* inSubject) {	SSLDistinguishedName disName(inSubject);	std::map<SSLDistinguishedName, std::pair<PKCS12*, std::string> >::iterator iter = mClientCertCache.find(disName);	return (iter != mClientCertCache.end());	}void SSLClientCertCache::AddCert(X509_NAME* inSubject, PKCS12* inPkcs12, const char*pass) {	if (HaveCert(inSubject))		return;			SSLDistinguishedName disName(inSubject);   	std::pair<PKCS12*, std::string> disPair(inPkcs12, pass);	mClientCertCache[disName] = disPair;}void SSLClientCertCache::OutputCert(X509_NAME* inSubject, X509 **x509, EVP_PKEY **pkey) {	SSLDistinguishedName disName(inSubject);	std::map<SSLDistinguishedName, std::pair<PKCS12*, std::string> >::iterator iter = mClientCertCache.find(disName);	if (iter == mClientCertCache.end())		return;		int ret = PKCS12_parse(mClientCertCache[disName].first, mClientCertCache[disName].second.c_str(), pkey, x509, NULL);}#endif
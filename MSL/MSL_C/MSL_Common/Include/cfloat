/*  Metrowerks Standard Library  *//*  $Date: 2000/04/13 19:11:00 $  *  $Revision: 1.10.8.4 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//* *	cfloat        hh  971206  this file used to be float.h */ #ifndef __cfloat__#define __cfloat__#include <msl_t.h>	/* vss 990729 */#ifndef _No_Floating_Point							/* mm 981014 */#include <ansi_parms.h>#ifndef RC_INVOKED   /* hh 971230 */#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef __cplusplus      /*hh  971206  expanded _extern macro*/	extern "C" {#endif#ifndef __m56800__		/* mm 981028 *//*  vss 990218  added extern to following incomplete types */extern _MSL_IMP_EXP_C _INT32 __double_min[], __double_max[], __double_epsilon[], __double_huge[]; /*LS*/extern _MSL_IMP_EXP_C _INT32 __extended_min[],__extended_max[],__extended_epsilon[];#define FLT_ROUNDS					1  /* see fenv.h for changing rounding modes intel/mac only */#define FLT_RADIX					2#define FLT_MANT_DIG				24#define FLT_DIG						6#define FLT_MIN_EXP					(-125)#define FLT_MIN_10_EXP				(-37)#define FLT_MAX_EXP					128#define FLT_MAX_10_EXP				38#define FLT_MAX						3.402823466e+38F#define FLT_EPSILON					1.192092896e-07F#define FLT_MIN						1.175494351e-38F/*hh  971206  removed std() macro*/#if   __MC68K__ /* whether or not the format of a long double on 68K is                   10 or 12 bytes, the range of permissble values is the                    same.  Note that the extra 16 bits on 68881 are just for                   padding to keep data aligned along 32 bit boundaries,                   not for additional precision.  Therefore this has                   no effect on the constants in this file.                */#define LDBL_MANT_DIG				64#define LDBL_DIG					18#define LDBL_MIN_EXP				(-16381)#define LDBL_MIN_10_EXP				(-4931)#define LDBL_MAX_EXP				16384#define LDBL_MAX_10_EXP				4932 #if !(__option(IEEEdoubles))	/* doubles are >= 10 bytes when IEEE doubles is not specified */	  #define DBL_MANT_DIG				    LDBL_MANT_DIG  #define DBL_DIG						LDBL_DIG  #define DBL_MIN_EXP					LDBL_MIN_EXP  #define DBL_MIN_10_EXP				LDBL_MIN_10_EXP	  #define DBL_MAX_EXP					LDBL_MAX_EXP  #define DBL_MAX_10_EXP				LDBL_MAX_10_EXP #else   #define DBL_MANT_DIG					53  #define DBL_DIG						15  #define DBL_MIN_EXP					(-1021)  #define DBL_MIN_10_EXP				(-308)  #define DBL_MAX_EXP					1024  #define DBL_MAX_10_EXP				308 #endif /* IEEEdoubles */#else #define DBL_MANT_DIG					53 #define DBL_DIG						15 #define DBL_MIN_EXP					(-1021) #define DBL_MIN_10_EXP					(-308) #define DBL_MAX_EXP					1024 #define DBL_MAX_10_EXP					308 #define LDBL_MANT_DIG					DBL_MANT_DIG #define LDBL_DIG						DBL_DIG	 #define LDBL_MIN_EXP					DBL_MIN_EXP	 #define LDBL_MIN_10_EXP				DBL_MIN_10_EXP #define LDBL_MAX_EXP					DBL_MAX_EXP #define LDBL_MAX_10_EXP				DBL_MAX_10_EXP#endif /* __MC68K__ *//*hh  971206  removed std() macro*/#define DBL_MAX						(* (double *) __double_max)#define DBL_EPSILON					(* (double *) __double_epsilon)#define DBL_MIN						(* (double *) __double_min)#define LDBL_MAX					(* (long double*) __extended_max)#define LDBL_EPSILON				(* (long double*) __extended_epsilon)#define LDBL_MIN					(* (long double*) __extended_min)#else/* Target Specific for DSP56800 */			/* mm 981014 */#define FLT_DIG                      6#define DBL_DIG                      6#define LDBL_DIG                     6#define FLT_MIN_EXP               -126#define DBL_MIN_EXP               -126#define LDBL_MIN_EXP              -126#define FLT_MIN_10_EXP             -39#define DBL_MIN_10_EXP             -39#define LDBL_MIN_10_EXP            -39#define FLT_MAX_EXP                128#define DBL_MAX_EXP                128#define LDBL_MAX_EXP               128#define FLT_MAX_10_EXP              38#define DBL_MAX_10_EXP              38#define LDBL_MAX_10_EXP             38#define FLT_MAX          3.4028235e+38#define DBL_MAX          3.4028235e+38#define LDBL_MAX         3.4028235E+38#define FLT_EPSILON      1.1920929E-07#define DBL_EPSILON      1.1920929E-07#define LDBL_EPSILON     1.1920929E-07 #define FLT_MIN          5.8774717e-39#define DBL_MIN          5.8774717e-39#define LDBL_MIN         5.8774717e-39#define FLT_ROUNDS		 2#define FLT_MANT_DIG	 7#define DBL_MANT_DIG	 7#define LDBL_MANT_DIG	 7#define FLT_RADIX        2 #endif /* #ifndef __m56800__ */#ifdef __cplusplus	}#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif /* RC_INVOKED */#endif /* ndef _No_Floating_Point */#endif /* __cfloat__ *//*     Change record961212 KO	Added __extern_c wrapper to accomodate new x86 name mangling.970723 SCM	Wrapped entire file in #ifndef _No_Floating_Point970801 Matt Fassiotto- this header is now as platform independent as possible, for                       details on the platform dependent macros __double_max, etc...                        see the source file float.c in the MSL C common sources.971206 hh   minor namespace fixups. * hh 971230 added RC_INVOKED wrapper * rjk 980313 added_MSL_IMP_EXP macro * mm 981014  Added target specific settings for DSP56800 and wrapper for _No_Floating_Point * mm 981028  Changed __DSP568 wrappers to __m56800__ wrappers * vss 990218 Added extern to incomplete types for MRC and gcc * vss 990727 changed <cmath> to <msl_t.h> * hh 000126 Added FLT_RADIX to __m56800__. */
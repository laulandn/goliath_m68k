// ===========================================================================//	UAnimateColorCursor.h		PowerPlant 2.1		©1997-2000 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub#ifndef _H_UAnimateColorCursor#define _H_UAnimateColorCursor#pragma once#include <PP_Prefix.h>#include <LPeriodical.h>#include <TArray.h>#include <Quickdraw.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantclass	LStream;// ===========================================================================#pragma mark === UAnimateColorCursor ===class UAnimateColorCursor {public:							UAnimateColorCursor(								ResIDT		inFirstCrsrID,								UInt16		inNumCrsrs,								UInt32		inTickInterval = 10UL,								UInt32		inIntialDelay = 120UL );	virtual					~UAnimateColorCursor();	virtual	void			Suspend( ResIDT inNewCursorID = 0 );	virtual	void			Resume();	virtual	void			Reset();	virtual	void			Tick();protected:		ResIDT				mFirstCrsrID;		UInt16				mNumCrsrs;		UInt32				mTickInterval;		UInt32				mLastTick;		UInt32				mStartTick;		SInt32				mNextFrameIndex;		UInt32				mInitialDelay;		TArray<CCrsrHandle>	*mCursorTable;		Boolean				mIsRepeater;	virtual	void			InitAnimCursor();private:			// defensive programming							UAnimateColorCursor();							UAnimateColorCursor( const UAnimateColorCursor &inOriginal );							UAnimateColorCursor( LStream *inStream );			UAnimateColorCursor& operator=(const UAnimateColorCursor &inOriginal );};// ===========================================================================#pragma mark === UPeriodicalColorCursor ===class UPeriodicalColorCursor : public UAnimateColorCursor,							public LPeriodical{public:							UPeriodicalColorCursor(								ResIDT		inFirstCrsrID,								UInt16		inNumCrsrs,								UInt32		inTickInterval = 10UL,								UInt32		inIntialDelay = 120UL,								Boolean		inIsRepeater = true );	virtual					~UPeriodicalColorCursor();	virtual	void			Suspend( ResIDT inNewCursorID = 0 );	virtual	void			Resume();protected:	virtual	void			SpendTime( const EventRecord &inMacEvent );private:			// defensive programming							UPeriodicalColorCursor();							UPeriodicalColorCursor( const UPeriodicalColorCursor &inOriginal );							UPeriodicalColorCursor( LStream *inStream );			UPeriodicalColorCursor& operator=(const UPeriodicalColorCursor &inOriginal );};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
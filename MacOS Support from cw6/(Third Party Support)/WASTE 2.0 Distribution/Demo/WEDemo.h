/* *	WASTE Demo Project: *	WASTE Demo Header * *	Copyright © 1993-2000 Marco Piovanelli *	All Rights Reserved * *	C port by John C. Daub * *	<mailto:waste@merzwaren.com> *	<http://www.merzwaren.com/waste/> */#pragma once#ifndef __WEDEMO__#define __WEDEMO__//	#include the Mother Of All Includes#ifndef __CONDITIONALMACROS__#include <ConditionalMacros.h>#endif//	make sure TARGET_API_MAC_CARBON is #defined#ifndef TARGET_API_MAC_CARBON#define TARGET_API_MAC_CARBON	0#endif//	Check the version number of the Universal Interfaces we're using#if TARGET_API_MAC_CARBON	#if ((!defined(UNIVERSAL_INTERFACES_VERSION))||(UNIVERSAL_INTERFACES_VERSION<0x330))		#error "You need Universal Headers version 3.3 or newer to compile the WASTE Demo for Carbon"	#endif#else	#if ((!defined(UNIVERSAL_INTERFACES_VERSION))||(UNIVERSAL_INTERFACES_VERSION<0x320))		#error "You need Universal Headers version 3.2 or newer to compile the WASTE Demo"	#endif#endif//	#include other essential Mac OS headers#ifndef __MACTYPES__#include <MacTypes.h>#endif#ifndef __RESOURCES__#include <Resources.h>#endif#ifndef __QUICKDRAW__#include <QuickDraw.h>#endif#ifndef __MENUS__#include <Menus.h>#endif#ifndef __MACWINDOWS__#include <MacWindows.h>#endif#ifndef __CONTROLS__#include <Controls.h>#endif#if (UNIVERSAL_INTERFACES_VERSION > 0x320)	#ifndef __CONTROLDEFINITIONS__	#include <ControlDefinitions.h>	#endif#endif#ifndef __NAVIGATION__#include <Navigation.h>#endif#if TARGET_API_MAC_CARBON	#ifndef __PMAPPLICATION__	#include <PMApplication.h>	#endif#else	#ifndef __PRINTING__	#include <Printing.h>	#endif#endif//	#include other headers#ifndef __WASTE__#include "WASTE.h"#endif#ifndef __CARBONCOMPATIBILITY__#include "CarbonCompatibility.h"#endifenum{	//	WASTE Demo signature	sigWASTEDemo			=		FOUR_CHAR_CODE ( 'OEDE' ),	//	resource types, clipboard types, and file types	kTypeMenuColorTable		=		FOUR_CHAR_CODE ( 'mctb' ),	kTypeDeskAccessory		=		FOUR_CHAR_CODE ( 'DRVR' ),	kTypeDialogItemList		=		FOUR_CHAR_CODE ( 'DITL' ),	kTypeFont				=		FOUR_CHAR_CODE ( 'FONT' ),	kTypePicture			=		FOUR_CHAR_CODE ( 'PICT' ),	kTypePrintRecord		=		FOUR_CHAR_CODE ( 'PREC' ),	kTypePageFormat			=		FOUR_CHAR_CODE ( 'WEpg' ),		//	Carbon PMPageFormat object	kTypePageMargins		=		FOUR_CHAR_CODE ( 'MARG' ),		//	page margins	kTypeSound				=		FOUR_CHAR_CODE ( 'snd ' )} ;enum{	//	user tags used in association with WEGetUserInfo / WESetUserInfo	kWindowTag				=		FOUR_CHAR_CODE ( 'WIND' ),		//	reference to owner window	kPrintRecordTag			=		kTypePrintRecord,	kPageFormatTag			=		kTypePageFormat,	kPageMarginsTag			=		kTypePageMargins} ;enum{	//	virtual key codes for navigation keys found on extended keyboards	keyPgUp				=		0x74,	keyPgDn				=		0x79,	keyHome				=		0x73,	keyEnd				=		0x77,	//	virtual key codes generated by some function keys	keyF1				=		0x7A,	keyF2				=		0x78,	keyF3				=		0x63,	keyF4				=		0x76};//	possible values for HandleOpenDocument refCon parameterenum{	kDoOpen				=		0,	kDoPrint			=		1};//	possible value for the PrintDialogStyle data typeenum{	kPageSetupDialog	=		0,	kPrintDialog		=		1} ;typedef SInt16 PrintDialogStyle ;// 	other commonly used constants#define	kBarWidth						16			//	width of a scroll bar#define kTitleHeight					20			//	usual height of a window title bar#define kTextMargin						3			//	indent of text rect from a window port rect#define kScrollDelta					11			//	pixels to scroll when the scroll bar arrow is clicked#define kStandardTranslucencyThreshold	0x7FFFFFFF	//	infinity#define kMinSystemVersion				0x08608000	//	Mac OS 8.6#define kMinWASTEVersion				0x0200400F	//	WASTE 2.0a15// enumeration types used for closing a window and/or quitting the applicationtypedef enum { savingYes, savingNo, savingAsk } SavingOption ;// enumeration for orientation (vertical/horizontal)typedef enum { kVertical, kHorizontal } Orientation ;/* *	Resource ID numbers */// menu IDsenum{	kMenuApple					= 1,	kMenuFile					= 2,	kMenuEdit					= 3,	kMenuFont					= 4,	kMenuSize					= 5,	kMenuStyle					= 6,	kMenuFeatures				= 7,//	submenus	kMenuAlignment				= 9,	kMenuDirection				= 10,	kMenuTextColor				= 11,	kMenuBackgroundColor		= 12,	kMenuLineSpacing			= 13,	kMenuFontFirstSubmenu		= 100		//	first font submenu ID in case we use a hierarchical Font menu};//	Apple Menu itemsenum{	kItemAbout					= 1};//	File menu itemsenum{	kItemNew					= 1,	kItemOpen					= 2,	kItemClose					= 4,	kItemSave					= 5,	kItemSaveAs					= 6,	kItemPageSetup				= 8,	kItemPrint					= 9,	kItemQuit					= 11};//	Edit menu itemsenum{	kItemUndo					= 1,	kItemRedo					= 2,	kItemCut					= 4,	kItemCopy					= 5,	kItemPaste					= 6,	kItemClear					= 7,	kItemSelectAll				= 8};//	Size menu itemsenum{	kItemLastSize				= 8,	kItemSmaller				= 10,	kItemLarger					= 11};//	Style menu itemsenum{	kItemPlainText				= 1,	kItemBold					= 2,	kItemItalic					= 3,	kItemUnderline				= 4,	kItemOutline				= 5,	kItemShadow					= 6,	kItemCondensed				= 7,	kItemExtended				= 8,	kItemStrikethrough			= 9,	kItemTextColorSubmenu		= 11,	kItemBackColorSubmenu		= 12,	kItemAlignmentSubmenu		= 13,	kItemDirectionSubmenu		= 14,	kItemLineSpacingSubmenu		= 15,	kItemNudgeUp				= 17,	kItemNudgeDown				= 18};//	Text Color menu itemsenum{	kItemBlack					= 1,	kItemRed					= 2,	kItemPine					= 3,	kItemBlue					= 4,	kItemSkyBlue				= 5,	kItemCarnation				= 6,	kItemLemon					= 7,	kItemDirt					= 8,	kItemOrange					= 9,	kItemGranite				= 10,	kItemCactus					= 11,	kItemLastTextColor			= kItemCactus};//	Background Color menu itemsenum{	kItemNoBackgroundColor		= 1,	kItemCanteloupe				= 3,	kItemOceanGreen				= 4,	kItemEveningBlue			= 5,	kItemOlive					= 6,	kItemOrchid					= 7,	kItemBanana					= 8,	kItemSoapstone				= 9,	kItemLastBackgroundColor	= kItemSoapstone};//	Alignment menu itemsenum{	kItemAlignDefault			= 1,	kItemFlushLeft				= 3,	kItemCenter					= 4,	kItemFlushRight				= 5,	kItemJustify				= 6,	kItemLastAlignment			= kItemJustify};//	Direction menu itemsenum{	kItemDirectionDefault 		= 1,	kItemDirectionLR			= 3,	kItemDirectionRL			= 4,	kItemLastDirection			= kItemDirectionRL} ;//	Line Spacing menu itemsenum{	kItemLineSpacingSingle		= 1,	kItemLineSpacingOneAndHalf	= 2,	kItemLineSpacingDouble		= 3,	kItemLastLineSpacing		= kItemLineSpacingDouble} ;//	Features menu itemsenum{	kItemAutoScroll				= 1,	kItemOutlineHilite			= 2,	kItemReadOnly				= 3,	kItemIntelligentCutAndPaste = 4,	kItemDragAndDrop			= 5,	kItemTranslucentDrags		= 6,	kItemOffscreenDrawing		= 7,	kItemMonoStyled				= 8,	kItemFontKeyboardSync		= 9,	kItemICSupport				= 10,	kItemLastFeature			= kItemICSupport};//	dialog item list (DITL) resource IDsenum{	kDITLSaveAsExtras		=	258,		//	additional items for the Save As dialog	kDITLPageSetupExtras	=	260			//	additional items for the Page Setup dialog} ;//	Alert & dialog template resource IDsenum{	kAlertNeedNewerSystem		= 128,	kAlertNeedNewerWASTE		= 129,	kAlertGenError				= 130,	kAlertSaveChanges			= 131,	kDialogAboutBox				= 256};//	String list resource IDsenum{	kUndoStringsID				= 128,	kMiscStringsID				= 130,	kAlertStringsID				= 131};// miscellaneous resource IDsenum{	kMenuBarID					= 128,	kScrollBarTemplateID		= 128,	kPromptStringID				= 128};// a PageMarginRec is a structure defining the margins to use// when printing a document page.  Margins are expressed in Fixed (16:16) points.struct PageMarginRec{	Fixed				top ;	Fixed				bottom ;	Fixed				left ;	Fixed				right ;} ;typedef struct PageMarginRec PageMarginRec, *PageMarginRecPtr, **PageMarginRecHandle ;// a DocumentRecord is a structure associated with each window// a handle to this structure is kept in the window refConstruct DocumentRecord{	WindowRef			owner;				// the window	ControlRef			scrollBars [ 2 ];	// its scroll bars	WEReference 		we;					// its WASTE instance	OSType				docType;			// traditional text ('TEXT') or Unicode text ('utxt')} ;typedef struct DocumentRecord DocumentRecord, *DocumentPtr, **DocumentHandle;//	GLOBAL VARIABLES & FUNCTION PROTOTYPES//	From WEDemoAbout.cvoid			DoAboutBox( SInt16 );//	From WEDemoDialogs.cModalFilterUPP	GetMyStandardDialogFilter( void );SInt16			GetDialogItemType( DialogRef, SInt16 );Handle			GetDialogItemHandle( DialogRef, SInt16 );void			GetDialogItemRect( DialogRef, SInt16, Rect * );void			SetDialogItemProc( DialogRef, SInt16, UserItemUPP );void			FlashButton( DialogRef, SInt16 );void			GetEditFieldString ( DialogRef, SInt16, Str255 ) ;void			SetEditFieldString ( DialogRef, SInt16, ConstStr255Param ) ;void			ReplaceParam ( Str255 ioTarget, ConstStr255Param inParam, SInt16 inIndex ) ;void			NumToVersionString ( UInt32 inVersion, Str15 outVersionString ) ;void			ErrorAlert ( OSStatus ) ;//	From WEDemoDrags.cOSStatus		InstallDragHandlers( void );OSStatus		RemoveDragHandlers( void );//	From WEDemoEvents.cvoid			AdjustCursor ( Point, RgnHandle ) ;void			DoMouseDown ( const EventRecord * ) ;void			DoKeyDown ( const EventRecord * ) ;void			DoDiskEvent ( const EventRecord * ) ;void			DoOSEvent ( const EventRecord * ) ;void			DoHighLevelEvent ( const EventRecord * ) ;void			DoIdleEvent ( const EventRecord * ) ;void			DoWindowEvent ( const EventRecord * ) ;void			ProcessEvent ( void ) ;OSStatus		GotRequiredParams ( const AppleEvent * ) ;OSStatus		InstallEventHandlers ( void ) ;//	From WEDemoFiles.cOSStatus		NewHandleTemp ( Size, Handle * ) ;void			ForgetHandle ( Handle * ) ;OSStatus		ReadTextFile ( const FSSpec *, WEReference ) ;OSStatus		ReadUnicodeTextFile ( const FSSpec *, WEReference ) ;OSStatus		WriteTextFile ( const FSSpec *, WEReference ) ;OSStatus		WriteUnicodeTextFile ( const FSSpec * pFileSpec, WEReference we ) ;OSStatus		FSpCheckObjectLock ( const FSSpec * ) ;OSStatus		FSpSetIsStationery ( const FSSpec * ) ;//	From WEDemoInit.cOSStatus		Initialize ( void ) ;void			Finalize ( void ) ;//	From WEDemoMain.cextern	Boolean		gExiting ;//	From WEDemoMenus.cextern const WESelector gStyleTags [ ] ;void			PrepareMenus ( void ) ;OSStatus		DoNew ( void ) ;OSStatus		SaveWindow ( const FSSpec *, OSType, Boolean, WindowRef ) ;OSStatus		DoSave ( WindowRef ) ;OSStatus		DoQuit ( SavingOption ) ;void			DoAppleChoice ( UInt16 ) ;void			DoFileChoice ( UInt16 );void			DoEditChoice ( UInt16 );void			DoFontChoice ( UInt16, Boolean );void			DoSizeChoice ( UInt16 );void			DoStyleChoice ( UInt16 );void			DoTextColorChoice ( UInt16 );void			DoBackgroundColorChoice ( UInt16 ) ;void			DoAlignmentChoice ( UInt16 );void			DoDirectionChoice ( UInt16 ) ;void			DoLineSpacingChoice ( UInt16 ) ;void			DoFeatureChoice ( UInt16 );void			DoMenuChoice ( UInt32, EventModifiers ) ;OSStatus		InitializeMenus ( void ) ;//	From WEDemoNavDialogs.cOSStatus		DoOpen ( void ) ;OSStatus		DoSaveAs ( WindowRef ) ;OSStatus		DoClose ( NavAskSaveChangesAction, SavingOption, WindowRef ) ;//	From WEDemoPrintDialogs.c#if ! TARGET_API_MAC_CARBONBoolean			DoPrintDialog ( THPrint, PageMarginRecHandle, PrintDialogStyle ) ;#endif//	From WEDemoPrinting.cOSStatus		DoPageSetup ( WindowRef ) ;OSStatus		DoPrint ( WindowRef ) ;//	From WEDemoScripting.cvoid			InitDesc ( AEDesc * ) ;OSStatus		GetAEDescDataAsHandle ( const AEDesc *, Handle * ) ;OSStatus		GetContentsOfSelection ( DescType, AEDesc *, WEReference ) ;OSStatus		SetContentsOfSelection ( const AEDesc *, WEReference ) ;OSStatus		InstallCoreHandlers ( void ) ;OSStatus		FindProcess ( OSType, OSType, ProcessSerialNumber * ) ;OSStatus		CreatePSNBasedAppleEvent ( const ProcessSerialNumber *, AEEventClass, AEEventID, AppleEvent * ) ;OSStatus		SwitchToFinder ( void ) ;OSStatus		CreateObjectSpecifier ( const AEDesc *, DescType, AEKeyword, const AEDesc *, AEDesc * ) ;OSStatus		CreatePropertySpecifier ( const AEDesc *, AEKeyword, AEDesc * ) ;OSStatus		CreateFinderObjectSpecifier ( const FSSpec *, AEDesc * ) ;OSStatus		SendGetDataEvent ( const ProcessSerialNumber *, const AEDesc *, DescType, AEDesc * ) ;OSStatus		GetFileRect ( const FSSpec *, Rect * ) ;//	From WEDemoWindows.cDocumentHandle	GetWindowDocument ( WindowRef ) ;WEReference		GetWindowWE ( WindowRef ) ;void			DoDrag ( Point, WindowRef ) ;void			DoPathSelect ( WindowRef ) ;void			DoGrow ( Point, WindowRef ) ;void			DoZoom ( SInt16, WindowRef ) ;Boolean			DoContent ( Point, const EventRecord *, WindowRef ) ;void			DoKey ( SInt16, const EventRecord * ) ;void			DoUpdate ( WindowRef ) ;void			DoActivate ( Boolean, WindowRef ) ;void			DoIdle ( UInt32 *, WindowRef ) ;OSStatus		CreateWindow ( const FSSpec *, WindowRef * ) ;void			DestroyWindow ( WindowRef ) ;#endif /* __WEDEMO__ */
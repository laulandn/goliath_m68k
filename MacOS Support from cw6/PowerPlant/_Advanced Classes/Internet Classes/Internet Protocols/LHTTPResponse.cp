// ===========================================================================//	LHTTPResponse.cp			PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================//// Class for handling HTTP style responses.//// NOTE: Since HTTP responses always include the requested data or an error//		description (usually in HTML) this class also includes the actual//		LHTTPMessage return from the server.#include <LHTTPResponse.h>#include <cstring>#include <cstdlib>#include <UInternet.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LHTTPResponse							Default Constructor// ---------------------------------------------------------------------------LHTTPResponse::LHTTPResponse(){}// ---------------------------------------------------------------------------//	¥ LHTTPResponse							Constructor// ---------------------------------------------------------------------------LHTTPResponse::LHTTPResponse(char * inResponse){	SetResponse(inResponse);}// ---------------------------------------------------------------------------//	¥ operator =							Assignment Operator// ---------------------------------------------------------------------------LHTTPResponse&LHTTPResponse::operator = (const LHTTPResponse& copyResponse){	mMessage = copyResponse.mMessage;	return *this;}// ---------------------------------------------------------------------------//	¥ ~LHTTPResponse						Destructor// ---------------------------------------------------------------------------LHTTPResponse::~LHTTPResponse(){}// ---------------------------------------------------------------------------//	¥ SetResponse// ---------------------------------------------------------------------------//voidLHTTPResponse::SetResponse(const char * inResponse) {	SetResponse(inResponse, PP_STD::strlen(inResponse));}// ---------------------------------------------------------------------------//	¥ SetResponse// ---------------------------------------------------------------------------voidLHTTPResponse::SetResponse(const char * inResponse, UInt32 inLength){	char * p, *q;	p = PP_STD::strchr(inResponse, LF);	if (p) {		mResponseText.assign(inResponse, (UInt32) (p - inResponse)); 	// -1 removes the CR		//Pull code out of response		q = PP_STD::strchr(inResponse, ' ');		if (q)			mResponseCode = PP_STD::atol(++q);		p++;		//+1 walks past the LF		if (*p)			mMessage.SetMessage(p, inLength - (p - inResponse));	}}// ---------------------------------------------------------------------------//	¥ SetResponse// ---------------------------------------------------------------------------voidLHTTPResponse::SetResponse(const char * inResponse, LDynamicBuffer * inResponseData){	StPointerBlock tempResponse((SInt32) (PP_STD::strlen(inResponse) + 1), true);	PP_STD::strcpy(tempResponse, inResponse);	char * p;	//strip CRLF	p = PP_STD::strchr(tempResponse, LF);	if (p)		*p = '\0';	p = PP_STD::strchr(tempResponse, CR);	if (p)		*p = '\0';	mResponseText = tempResponse;	//Pull code out of response	p = PP_STD::strchr(inResponse, ' ');	if (p)		mResponseCode = PP_STD::atol(++p);	//Set the data, we just grab the stream to prevent having to	//	duplicate a potentially large amount of data	mMessage.SetMessage(inResponseData);}PP_End_Namespace_PowerPlant
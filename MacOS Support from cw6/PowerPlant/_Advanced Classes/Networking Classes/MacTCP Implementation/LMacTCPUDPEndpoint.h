// ===========================================================================//	LMacTCPUDPEndpoint.h		PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================#ifndef _H_LMacTCPUDPEndpoint#define _H_LMacTCPUDPEndpoint#pragma once#include <LUDPEndpoint.h>#include <UCallbackUtils.h>#include <LSharedMemoryPool.h>#include <UNetworkMessages.h>#include <LNetMessageQueue.h>#include <LMacTCPListenQueue.h>#include <LMacTCPUDPSendQueue.h>#include <MacTCP.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantenum { MacTCPUDP_RcvBuffer = 16384 };class LMacTCPUDPSendQueue;// ===========================================================================//		¥ LMacTCPTCPEndpoint// ===========================================================================//	An implementation of LTCPEndpoint that communicates with MacTCP.//	We recommend that you do not make a subclass of this class.class LMacTCPUDPEndpoint :		public LUDPEndpoint,								public LGlobalsContext {public:								LMacTCPUDPEndpoint(UInt32		inReceiveBufferSize = MacTCP_RcvBuffer);								~LMacTCPUDPEndpoint();	virtual void				Bind(										LInternetAddress&		inLocalAddress,										UInt32					inListenQueueSize = 0,										Boolean					inReusePort = true);	virtual void				Unbind();	virtual LInternetAddress*	GetLocalAddress();	virtual void				SendPacketData(										LInternetAddress&		inRemoteHost,										void*					inData,										UInt32					inDataSize);	virtual bool				ReceiveFrom(										LInternetAddress&		outRemoteAddress,										void*					outDataBuffer,										UInt32&					ioDataSize,										UInt32					inTimeoutSeconds = Timeout_None);	// connection status	virtual EEndpointState		GetState()									{ return (EEndpointState) mEndpointState; }	// acknowledgement of sent data	virtual void				AckSends();	virtual void				DontAckSends();	virtual Boolean				IsAckingSends();	void						AbortThreadOperation(LThread * inThread);protected:	void					Int_HandleAsyncEvent(									UInt16		inEventCode,									ICMPReport*	inIcmpMsg,									StreamPtr	inStreamPtr);	static pascal void		Int_UDPNotifyProc(									StreamPtr		inStreamPtr,									UInt16			inEventCode,									Ptr				inUserPtr,									ICMPReport*		inIcmpMsg);	StreamPtr				mUDPStream;			// pointer to MacTCP stream object	LInternetAddress *		mLocalAddress;	Boolean					mAckSends;	UInt16					mEndpointState;	Ptr						mReceiveBuffer;	UInt32					mReceiveBufferSize;	LNetMessageQueue *		mMessageQueue;	LSharedMemoryPool * 	mSharedPool;	LMacTCPUDPSendQueue *	mSendQueue;private:	static UDPNotifyUPP		sUDPNotifyUPP;	friend class LMacTCPUDPSendQueue;	friend class StMacTCPUDPOperation;};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
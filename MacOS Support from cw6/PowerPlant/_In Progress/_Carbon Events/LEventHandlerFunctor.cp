// ===========================================================================//	LEventHandlerFunctor.cp		PowerPlant 2.1			 ©2000 Metrowerks Inc.// ===========================================================================////	A Carbon Event handler where the Toolbox callback calls an ordinary//	C function#include <LEventHandlerFunctor.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	Class VariableEventHandlerUPP	LEventHandlerFunctor::sHandlerUPP;// ---------------------------------------------------------------------------//	¥ LEventHandlerFunctor// ---------------------------------------------------------------------------LEventHandlerFunctor::LEventHandlerFunctor(){	mHandlerFunc = nil;}// ---------------------------------------------------------------------------//	¥ LEventHandlerFunctor// ---------------------------------------------------------------------------LEventHandlerFunctor::LEventHandlerFunctor(	EventTargetRef			inTarget,	UInt32					inNumTypes,	const EventTypeSpec*	inTypeList,	HandlerFunc				inFunc){	Install(inTarget, inNumTypes, inTypeList, inFunc);}// ---------------------------------------------------------------------------//	¥ LEventHandlerFunctor// ---------------------------------------------------------------------------LEventHandlerFunctor::LEventHandlerFunctor(	EventTargetRef		inTarget,	EventClass			inEventClass,	EventType			inEventType,	HandlerFunc			inFunc){	Install(inTarget, inEventClass, inEventType, inFunc);}// ---------------------------------------------------------------------------//	¥ ~LEventHandlerFunctor// ---------------------------------------------------------------------------LEventHandlerFunctor::~LEventHandlerFunctor(){}// ---------------------------------------------------------------------------//	¥ Install// ---------------------------------------------------------------------------OSStatusLEventHandlerFunctor::Install(	EventTargetRef			inTarget,	UInt32					inNumTypes,	const EventTypeSpec*	inTypeList,	HandlerFunc				inFunc){	mHandlerFunc = inFunc;	if (sHandlerUPP == nil) {		sHandlerUPP = ::NewEventHandlerUPP(&EventHandlerCallback);	}	return LEventHandler::Install( inTarget,								   sHandlerUPP,								   inNumTypes,								   inTypeList,								   this );}// ---------------------------------------------------------------------------//	¥ Install// ---------------------------------------------------------------------------OSStatusLEventHandlerFunctor::Install(	EventTargetRef		inTarget,	EventClass			inEventClass,	EventType			inEventType,	HandlerFunc			inFunc){	EventTypeSpec	typeSpec = { inEventClass, inEventType };		return Install(inTarget, 1, &typeSpec, inFunc);}// ---------------------------------------------------------------------------//	¥ EventHandlerCallback// ---------------------------------------------------------------------------pascalOSStatusLEventHandlerFunctor::EventHandlerCallback(	EventHandlerCallRef	inCallRef,	EventRef			inEventRef,	void*				inUserData){	LEventHandlerFunctor	*functor = static_cast<LEventHandlerFunctor*>(inUserData);	HandlerFunc				handler  = functor->GetHandlerFunc();		OSStatus				result = eventNotHandledErr;		try {		result = (*handler)(inCallRef, inEventRef);	}		catch (...) { }					// Can't throw out of a Toolbox callback		return result;}PP_End_Namespace_PowerPlant
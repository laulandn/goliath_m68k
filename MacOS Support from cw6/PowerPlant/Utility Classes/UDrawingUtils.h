// ===========================================================================//	UDrawingUtils.h				PowerPlant 2.1		©1993-2000 Metrowerks Inc.// ===========================================================================#ifndef _H_UDrawingUtils#define _H_UDrawingUtils#pragma once#include <UDrawingState.h>#include <Quickdraw.h>#include <Script.h>#include <TextEdit.h>#include <TextUtils.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlant// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	UDrawingUtils {public:	static bool			IsColorGrafPort(								GrafPtr		inMacPort);	static SInt16		GetPortPixelDepth(								GrafPtr		inMacPort);	static bool			IsActiveScreenDevice(								GDHandle	inDevice);	static bool			DeviceSupportsColor(								GDHandle	inDevice);	static void			SetHiliteModeOn();};// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	StColorDrawLoop {public:						StColorDrawLoop(								const Rect&	inLocalRect);						~StColorDrawLoop();	bool				NextDepth(								SInt16&		outDepth);	GDHandle			GetCurrentDevice()		{ return mCurrentDevice; }protected:	StClipRgnState	mClipState;	Rect			mGlobalRect;	GDHandle		mCurrentDevice;};// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	StDeviceLoop : public StColorDrawLoop {public:						StDeviceLoop(								const Rect	&inLocalRect);						~StDeviceLoop();	bool				NextDepth(								SInt16		&outDepth);protected:	bool			mHasOldQD;	bool			mOldQDPending;};// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	UMarchingAnts {public:	static Boolean		BeginMarch();	static void			EndMarch();	static void			UseAntsPattern();protected:	static Pattern	sAntsPattern;	static UInt32	sNextAntMarchTime;};// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	LMarchingAnts {public:						LMarchingAnts(								UInt32	inMarchInterval = 3);						~LMarchingAnts();	Boolean				BeginMarch();	void				EndMarch();	void				UseAntsPattern();protected:	Pattern			mAntsPattern;	UInt32			mMarchInterval;	UInt32			mNextAntMarchTime;};// ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑclass	UTextDrawing {public:	static void			DrawWithJustification(								Ptr				inText,								SInt32			inLength,								const Rect&		inRect,								SInt16			inJustification,								bool			inFirstLeading = true);	static void			DrawTruncatedWithJust(								ConstStringPtr	inString,						  		const Rect&		inRect,						  		SInt16			inJustification,								bool			inTruncateString = true,						  		bool	 		inPreferOutline = false,						  		TruncCode		inTruncWhere = truncEnd);	static SInt16		GetActualJustification(								SInt16			inJustification)							{								return (inJustification == teFlushDefault) ?											::GetSysDirection() :											inJustification;							}	static void			DimTextColor(								RGBColor&		ioColor);};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
/*  Metrowerks Standard Library  *//*  $Date: 2000/06/15 21:51:27 $  *  $Revision: 1.16.2.2.6.17 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//* *	cstdio       hh  971206  filename used to be stdio.h */ #ifndef __cstdio__#define __cstdio__#include <ansi_parms.h>#if __dest_os==__win32_os#include <unistd.h>  /* for lseek */#endif#include <size_t.h>#include <null.h>#include <eof.h>		/* vss 980817 */#include <va_list.h>#ifndef __NO_WIDE_CHAR				/* mm 980204 */#include <wchar_t.h>				/* mm 990217 */#endif								/* mm 980204 */#include <file_struc.h>     		/* mm 990806 */#ifndef RC_INVOKED#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef __cplusplus               /*  hh  971206 */	#ifdef _MSL_USING_NAMESPACE		namespace std {	#endif	extern "C" {#endif#ifndef _No_Disk_File_OS_Support	_MSL_IMP_EXP_C int			remove(const char * );	_MSL_IMP_EXP_C int			rename(const char * , const char * );	_MSL_IMP_EXP_C char *	tmpnam(char * );	_MSL_IMP_EXP_C FILE *	tmpfile(void);#endif /* ndef _No_Disk_File_OS_Support */_MSL_IMP_EXP_C void		setbuf (FILE *  , char * );  /* 990715 mf */_MSL_IMP_EXP_C int			setvbuf(FILE *  , char * , int , size_t   );/* 990715 mf */#if __dest_os == __be_os                                        /* mm 970708 */	_MSL_IMP_EXP_C int         setbuffer(FILE *, char *, size_t   );    /* mm 970708 */  /* 990715 mf */	_MSL_IMP_EXP_C int         setlinebuf(FILE *);                           /* mm 970708 */#endif                                                          /* mm 970708 */_MSL_IMP_EXP_C int			fclose(FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C int			fflush(FILE *  );  /* 990715 mf */#ifndef _No_Disk_File_OS_Support	_MSL_IMP_EXP_C FILE *	fopen  (const char * , const char * );	_MSL_IMP_EXP_C FILE *	freopen(const char * , const char * , FILE *  );  /* 990715 mf */#endif /* ndef _No_Disk_File_OS_Support */#if __dest_os == __be_os	_MSL_IMP_EXP_C FILE *  fdopen(int fd, const char *type);	/*int     fileno(FILE *fd); */  /*cc removed */#endif#ifndef __NO_WIDE_CHAR				/* mm 980204 */	_MSL_IMP_EXP_C int         fwide(FILE *, int);     /* mm 980825 */#endif /* __NO_WIDE_CHAR */         /* mm 980204 */_MSL_IMP_EXP_C void		    setbuf (FILE *  , char * );  /* 990715 mf */_MSL_IMP_EXP_C int			setvbuf(FILE *  , char * , int , size_t   );  /* 990715 mf */_MSL_IMP_EXP_C int			fprintf(FILE *  , const char * , ...); /* 990715 mf */_MSL_IMP_EXP_C int			fscanf (FILE *  , const char * , ...); /* 990715 mf */#if __dest_os == __n64_os			/* ad 1.28.99 */	extern void	printf(const char * format, ...);#else	_MSL_IMP_EXP_C int			printf(const char * , ...);#endif_MSL_IMP_EXP_C int			scanf (const char * , ...);_MSL_IMP_EXP_C int			sprintf (char * , const char * , ...);_MSL_IMP_EXP_C int			snprintf(char * , size_t , const char * , ...);_MSL_IMP_EXP_C int			sscanf (const char * , const char * , ...);#if __INTEL__  || __MIPS__	_MSL_IMP_EXP_C int         swprintf(wchar_t * , size_t , const wchar_t * , ...);  /* 980226 JCM added size_t to prototype */#endif_MSL_IMP_EXP_C int			vfscanf(FILE *  ,    const char * , va_list arg);  /* 990715 mf */ /* mm 990921 */_MSL_IMP_EXP_C int			vsscanf(const char * s, const char * format, va_list arg); /* mm 990921 */_MSL_IMP_EXP_C int			vfprintf(FILE *  , const char * format, va_list arg);  /* 990715 mf */_MSL_IMP_EXP_C int			vprintf(const char * format, va_list arg);_MSL_IMP_EXP_C int			vsprintf(char * s, const char * format, va_list arg);_MSL_IMP_EXP_C int			vsnprintf(char * s, size_t n, const char * format, va_list arg);_MSL_IMP_EXP_C int			fgetc(FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C char *	        fgets(char * , int , FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C int			fputc(int , FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C int			fputs(const char * , FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C char *	        gets(char * );_MSL_IMP_EXP_C int			puts(const char * );_MSL_IMP_EXP_C int			ungetc(int , FILE *  );  /* 990715 mf */_MSL_IMP_EXP_C size_t	    	fread (void *   , size_t memb_size, size_t num_memb, FILE *  ); /* 990715 mf */_MSL_IMP_EXP_C size_t	    	fwrite(const void *   , size_t memb_size, size_t num_memb, FILE *  ); /* 990715 mf */_MSL_IMP_EXP_C int			fgetpos(FILE *  , fpos_t * pos); /* 990715 mf */_MSL_IMP_EXP_C long			ftell  (FILE *  ); /* 990715 mf */_MSL_IMP_EXP_C fpos_t    		 _ftell(FILE *);                    /* mm 970708 */_MSL_IMP_EXP_C int			fsetpos(FILE *  , const fpos_t * pos); /* 990715 mf */_MSL_IMP_EXP_C int			fseek  (FILE *  , long , int ); /* 990715 mf */_MSL_IMP_EXP_C int      	   _fseek(FILE *, fpos_t, int);     /* mm 970708 */_MSL_IMP_EXP_C void			rewind(FILE *  ); /* 990715 mf */_MSL_IMP_EXP_C void			clearerr(FILE *  );  /* 990715 mf */ 	_MSL_IMP_EXP_C void			perror(const char * );	_MSL_IMP_EXP_C int			__get_char(FILE *  ); /* 990715 mf */_MSL_IMP_EXP_C int			__put_char(int c,FILE *  ); /* 990715 mf *//*#if __dest_os==__win32_os__inline long _tell(int fildes){	return (_lseek(fildes, 0L, SEEK_CUR));	}#endif*//* The following section inserted  mm 990325 */typedef struct{	char * CharStr;	size_t MaxCharCount;	size_t CharsWritten;} __OutStrCtrl;typedef struct													{	char * NextChar;	int    NullCharDetected;} __InStrCtrl;void * __FileWrite(void *, const char *, size_t);				void * __StringWrite(void *, const char *, size_t);int    __FileRead(void *, int, int);int    __StringRead(void *, int, int);enum __ReadProcActions{	__GetAChar,	__UngetAChar,	__TestForError};#ifndef __NO_WIDE_CHAR				typedef struct{	wchar_t * wCharStr;	size_t MaxCharCount;	size_t CharsWritten;} __wOutStrCtrl;typedef struct{	wchar_t * wNextChar;	int    wNullCharDetected;} __wInStrCtrl;void * __wFileWrite(void *, const wchar_t *, size_t);void * __wStringWrite(void *, const wchar_t *, size_t);wint_t __wFileRead(void *, wint_t, int);wint_t __wStringRead(void *, wint_t, int);enum __WReadProcActions{	__GetAwChar,	__UngetAwChar,	__TestForwcsError};	#endif /* #ifndef __NO_WIDE_CHAR */	/* End of section inserted  mm 990325 */_MSL_IMP_EXP_C FILE *	__handle_open  (__file_handle handle, const char * mode);FILE *	__handle_reopen(__file_handle handle, const char * mode, FILE *  );  /* 990715 mf */void	__set_idle_proc(FILE *  , __idle_proc idle_proc);  /* 990715 mf */#if (__dest_os	== __win32_os  || __dest_os	== __wince_os)	/*	 * I'm putting this declaration here because it is in Visual C++'s stdio.h	 * I copied this declaration from unix.win32.h. They should match.	 */	/*FILE *fdopen(int fildes, char *type);*/	/*	 * defines added for compatibility with older MS C code	 */	#define _vsnprintf __std(vsnprintf)	#define _snprintf  snprintf#endif#ifdef __cplusplus	}  /* extern "C" */	inline int getc(FILE * file)	#ifndef __NO_WIDE_CHAR						/* mm 980204 */	{ return (fwide(file, -1) >= 0) ? EOF : 	                (file->buffer_len-- ? *file->buffer_ptr++ : __get_char(file)); }#else	{ return file->buffer_len-- ? *file->buffer_ptr++ : __get_char(file); }#endif  /* __NO_WIDE_CHAR */                /* mm 980204 */	inline int putc(int c, FILE *file)	#ifndef __NO_WIDE_CHAR						/* mm 980204 */	{ return (fwide(file, -1) >= 0) ? EOF : /* vss 990129 */			(file->buffer_len-- ? (*file->buffer_ptr++ = (unsigned char)c) : __put_char(c, file)); }#else	{ return file->buffer_len-- ? (*file->buffer_ptr++ = (unsigned char)c) : __put_char(c, file); }  /* mm 990202 */#endif  /* __NO_WIDE_CHAR */                /* mm 980204 */	inline int getchar()		{ return getc(stdin); }	inline int putchar(int c)		{ return putc(c, stdout); }	inline int feof(FILE * file)		{ return file->state.eof; }	inline int ferror(FILE * file)		{ return file->state.error; }#else	_MSL_IMP_EXP_C int		getc(FILE *  );         /* 990715 mf */	_MSL_IMP_EXP_C int		putc(int c, FILE *  );  /* 990715 mf */#ifndef __NO_WIDE_CHAR                  /* mm 980204 */	#define getc(file)	((fwide(file, -1) >= 0) ? EOF :\						  (file)->buffer_len-- ? (int)  *(file)->buffer_ptr++      : __std(__get_char)(file))#else									/* mm 980204 */    #define getc(file)	((file)->buffer_len-- ? (int)  *(file)->buffer_ptr++      : __std(__get_char)(file))#endif /* __NO_WIDE_CHAR */				/* mm 980204 */#ifndef __NO_WIDE_CHAR                  /* mm 980204 */    #define putc(c, file)	((fwide(file, -1) >= 0) ? EOF :\    	(file)->buffer_len-- ? (int) (*(file)->buffer_ptr++ = (unsigned char)(c)) : __std(__put_char)(c, file)) /* mm 990202 */ /* mm 990728 */#else									/* mm 980204 */    #define putc(c, file)	\    	((file)->buffer_len-- ? (int) (*(file)->buffer_ptr++ = (unsigned char)(c)) : __std(__put_char)(c, file)) /* mm 990202 */ /* mm 990728 */#endif /* __NO_WIDE_CHAR */				/* mm 980204 */	_MSL_IMP_EXP_C int			getchar(void);	_MSL_IMP_EXP_C int			putchar(int c);    #define 	getchar()		__std(getc)(stdin)    #define 	putchar(c)		__std(putc)(c, stdout)	_MSL_IMP_EXP_C int			feof  (FILE *  ); /* 990715 mf */	_MSL_IMP_EXP_C int			ferror(FILE *  ); /* 990715 mf */	#define feof(file)		((file)->state.eof)	#define ferror(file)	((file)->state.error)#endif/* #endif  hh 980121 There should not be C++ versions of the C libs */#ifdef __cplusplus           /*  hh  971206 */	#ifdef _MSL_USING_NAMESPACE		}	#endif	#endif#if __dest_os == __wince_os   enum { stdio_tofiles,stdio_tocom, stdio_custom}; /* mf-- allows CE users to    /* customize their io-- the default is to/from files */#endif   #if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#ifdef __cplusplus	extern "C" {#endif	_MSL_IMP_EXP_C int 	        _fileno(__std(FILE) *);  /* cc Feb 09. 2000 */	_MSL_IMP_EXP_C __std(FILE) *	_fdopen(int , char *);#ifdef __cplusplus	} /* extern "C" */#endif#ifdef _POSIX__inline int fileno(__std(FILE) *stream ) {return _fileno(stream);}__inline __std(FILE)* fdopen(int fildes , char* type) {return _fdopen(fildes, type);}#endif  /* _POSIX */#endif /* RC_INVOKED */#endif /* __cstdio__ *//*     Change record * mm  961031  Changes for Pascal * mm  961203  Changed files to __files * mm  970708  Inserted Be changes * SM  970709  Added conditional support for embedded targets via the			   __no_os, _No_Console, and _Unbuffered_Console macros. * MA  970720  Changed __no_os to _No_Disk_File_OS_Support. * hh  971206 Changed file name from stdio.h to cstdio and added namespace support * hh  971230 added RC_INVOKED wrapper * hh  980121 added <cstddef> for wchar_t * mm  980204  added fields in file structure for wide characters. * blc 980301 added vsnprintf, snprintf from C9X draft * rjk 980313 add DLLDATA for exporting data in dll * hh  980627 changed include from wctype.h to cwctype * mm  980708 Corrected space allotment for the values of __file_kinds in __file_modes * vss 980817 Define EOF in its own file and include it here to avoid circular dep * mm  980825 Removed variable names from prototype for fwide to avoid problems with PH tests * mm  981007 Changes for dynamic allocation of file structures. * ad 1.28.99 take out the printf() prototype for nintendo * vss 990129 Get rid of warning message by casting to uchar * mm  990202 Made similar changes as in vss 990129 in three other places * mm  990217 Deleted #include cstddef as not needed and replaced by #include <wchar_t.h> * mm  990325 Changes to permit separation of string format i/o functions from file i/o   * hh  990507 Changed #include <wctype.h> to <cwctype> * hh  990520 Fixed up the stdout, etc. macros to be namespace aware * mm  990728 Corrected mm990202. * mf  990715 Arg names in prototypes cause conflicts * mm  990807 Moved file structure definitions to file_str.h *  mm 990921	__vfscanf and __vsscanf changed to vfscanf and vsscanf since they are in C9x * cc  000209 Added prototype for fileno  and # define  * cc  000210 Added prototype for _fdopen  * cc  000215 Removed prototype for fdopne * mf  000403 moved fdopen and fileno to extern "C" and got rid of posix macros for __inlines * cc  000428 moved _tell to extras.win32.h  */
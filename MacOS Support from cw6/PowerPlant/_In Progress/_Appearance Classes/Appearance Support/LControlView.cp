// ===========================================================================//	LControlView.cp				PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LControlView.h>#include <LControlImp.h>#include <LStream.h>#include <PP_Messages.h>#include <URegistrar.h>PP_Begin_Namespace_PowerPlant// ===========================================================================// ¥ LControlSubPane// ===========================================================================// ---------------------------------------------------------------------------// ¥ LControlSubPane// ---------------------------------------------------------------------------LControlSubPane::LControlSubPane(	const SPaneInfo&	inPaneInfo,	ClassIDT			inImpID,	SInt16				inControlKind,	ConstStringPtr		inTitle,	ResIDT				inTextTraitsID,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue,	SInt32				inRefCon)	: LControlPane(inPaneInfo, inImpID, inControlKind, inTitle,						inTextTraitsID, inValueMessage, inValue,						inMinValue, inMaxValue, inRefCon){}// ---------------------------------------------------------------------------// ¥ LControlSubPane// ---------------------------------------------------------------------------LControlSubPane::LControlSubPane(	const SPaneInfo&	inPaneInfo,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue)	: LControlPane(inPaneInfo, inValueMessage, inValue,						inMinValue, inMaxValue){}// ---------------------------------------------------------------------------// ¥ ~LControlSubPane// ---------------------------------------------------------------------------LControlSubPane::~LControlSubPane(){}// ---------------------------------------------------------------------------// ¥ HotSpotResult// ---------------------------------------------------------------------------voidLControlSubPane::HotSpotResult(	SInt16	inHotSpot){	LControlView*	superView = dynamic_cast<LControlView*>(mSuperView);	if (superView != nil) {		superView->HotSpotResult(inHotSpot);	}}// ---------------------------------------------------------------------------// ¥ Draw// ---------------------------------------------------------------------------voidLControlSubPane::Draw(	RgnHandle	inSuperDrawRgnH){	if (inSuperDrawRgnH == nil) {		mSuperView->Draw(nil);	} else {		LControlPane::Draw(inSuperDrawRgnH);	}}// ---------------------------------------------------------------------------// ¥ Refresh// ---------------------------------------------------------------------------voidLControlSubPane::Refresh(){	mSuperView->Refresh();}// ---------------------------------------------------------------------------// ¥ Click// ---------------------------------------------------------------------------voidLControlSubPane::Click(	SMouseDownEvent	&inMouseDown){	if (!inMouseDown.delaySelect) {			// Until now, whereLocal is actually in port coords. Now			// that we know what Pane is handling the click, we can			// convert it to the proper local coords.		PortToLocalPoint(inMouseDown.whereLocal);		UpdateClickCount(inMouseDown);			// A ControlSubPane is an implementation detail.			// Logically, we should executed the click attachments of			// the LControlView containing this pane.		if (mSuperView->ExecuteAttachments(msg_Click, &inMouseDown)) {			ClickSelf(inMouseDown);		}	}}// ---------------------------------------------------------------------------// ¥ AdjustCursor// ---------------------------------------------------------------------------voidLControlSubPane::AdjustCursor(	Point				inPortPt,	const EventRecord	&inMacEvent){			// A ControlSubPane is an implementation detail.			// Logically, we should executed the cursor attachments of			// the LControlView containing this pane.	if (mSuperView->ExecuteAttachments(msg_AdjustCursor, (void*) &inMacEvent)) {		AdjustCursorSelf(inPortPt, inMacEvent);	}}// ===========================================================================// ¥ LControlView// ===========================================================================#pragma mark -// ---------------------------------------------------------------------------// ¥ LControlView// ---------------------------------------------------------------------------LControlView::LControlView(	LStream*	inStream,	ClassIDT	inImpID)	: LView(inStream){	SControlInfo	cInfo;	inStream->ReadData(&cInfo, sizeof(SControlInfo));	MakeControlSubPane(inImpID, cInfo.valueMessage, cInfo.value,					cInfo.minValue, cInfo.maxValue, inStream);}// ---------------------------------------------------------------------------// ¥ LControlView// ---------------------------------------------------------------------------LControlView::LControlView(	LStream*	inStream)	: LView(inStream){	mControlSubPane = nil;			// Client must call MakeControlSubPane()}// ---------------------------------------------------------------------------// ¥ LControlView// ---------------------------------------------------------------------------LControlView::LControlView(	const SPaneInfo&	inPaneInfo,	const SViewInfo&	inViewInfo,	ClassIDT			inImpID,	SInt16				inControlKind,	ConstStringPtr		inTitle,	ResIDT				inTextTraitsID,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue)	: LView(inPaneInfo, inViewInfo){	MakeControlSubPane(inImpID, inControlKind, inTitle, inTextTraitsID,					inValueMessage, inValue, inMinValue, inMaxValue);}// ---------------------------------------------------------------------------// ¥ ~LControlView// ---------------------------------------------------------------------------LControlView::~LControlView(){}voidLControlView::MakeControlSubPane(	ClassIDT			inImpID,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue,	LStream*			inStream){	SPaneInfo	paneInfo;	paneInfo.paneID = PaneIDT_Unspecified;	paneInfo.width = mFrameSize.width;	paneInfo.height = mFrameSize.height;	paneInfo.visible = true;	paneInfo.enabled = true;	paneInfo.bindings.left = true;	paneInfo.bindings.top = true;	paneInfo.bindings.right = true;	paneInfo.bindings.bottom = true;	paneInfo.left = 0;	paneInfo.top = 0;	paneInfo.userCon = inValue;		// Store initial value. Some AM controls									//   don't properly set the value.	paneInfo.superView = this;	mControlSubPane = nil;	mControlSubPane = new LControlSubPane(paneInfo, inValueMessage,							inValue, inMinValue, inMaxValue);	mControlSubPane->MakeControlImp(inImpID, inStream);	mControlSubPane->AddListener(this);	SetDefaultAttachable(this);		// Reset so Attachments don't get									//   attached to the ControlSubPane}voidLControlView::MakeControlSubPane(	ClassIDT			inImpID,	SInt16				inControlKind,	ConstStringPtr		inTitle,	ResIDT				inTextTraitsID,	MessageT			inValueMessage,	SInt32				inValue,	SInt32				inMinValue,	SInt32				inMaxValue){	SPaneInfo	paneInfo;	paneInfo.paneID = PaneIDT_Unspecified;	paneInfo.width = mFrameSize.width;	paneInfo.height = mFrameSize.height;	paneInfo.visible = true;	paneInfo.enabled = true;	paneInfo.bindings.left = true;	paneInfo.bindings.top = true;	paneInfo.bindings.right = true;	paneInfo.bindings.bottom = true;	paneInfo.left = 0;	paneInfo.top = 0;	paneInfo.userCon = inValue;		// Store initial value. Some AM controls									//   don't properly set the value.	paneInfo.superView = this;	mControlSubPane = nil;	mControlSubPane = new LControlSubPane(paneInfo, inImpID, inControlKind,							inTitle, inTextTraitsID, inValueMessage,							inValue, inMinValue, inMaxValue, 0);	mControlSubPane->AddListener(this);	SetDefaultAttachable(this);		// Reset so Attachments don't get									//   attached to the ControlSubPane}StringPtrLControlView::GetDescriptor(	Str255		outDescriptor) const{	return mControlSubPane->GetDescriptor(outDescriptor);}voidLControlView::SetDescriptor(	ConstStringPtr	inDescriptor){	mControlSubPane->SetDescriptor(inDescriptor);}SInt32LControlView::GetValue() const{	return mControlSubPane->GetValue();}voidLControlView::SetValue(	SInt32		inValue){	mControlSubPane->SetValue(inValue);}voidLControlView::ListenToMessage(	MessageT	inMessage,	void		*ioParam){	BroadcastMessage(inMessage, ioParam);}voidLControlView::SetDataTag(	SInt16			inPartCode,	FourCharCode	inTag,	Size			inDataSize,	void*			inDataPtr){	mControlSubPane->SetDataTag(inPartCode, inTag,						inDataSize, inDataPtr);}voidLControlView::GetDataTag(	SInt16			inPartCode,	FourCharCode	inTag,	Size			inBufferSize,	void*			inBuffer,	Size			*outDataSize) const{	mControlSubPane->GetDataTag(inPartCode, inTag,						inBufferSize, inBuffer,						outDataSize);}voidLControlView::SetTextTraitsID(	ResIDT		inTextTraitsID){	mControlSubPane->SetTextTraitsID(inTextTraitsID);}ResIDTLControlView::GetTextTraitsID() const{	return mControlSubPane->GetTextTraitsID();}voidLControlView::ApplyForeAndBackColors() const{	if ( (mControlSubPane != nil)  &&		 !(mControlSubPane->GetControlImp())->ApplyForeAndBackColors() ) {		if (mSuperView != nil) {			mSuperView->ApplyForeAndBackColors();		}	}}voidLControlView::GetForeAndBackColors(	RGBColor	*outForeColor,	RGBColor	*outBackColor) const{	if ( !(mControlSubPane->GetControlImp())->			GetForeAndBackColors(outForeColor, outBackColor) ) {		if (mSuperView != nil) {			mSuperView->GetForeAndBackColors(outForeColor, outBackColor);		}	}}voidLControlView::HotSpotResult(	SInt16	/* inHotSpot */){}PP_End_Namespace_PowerPlant
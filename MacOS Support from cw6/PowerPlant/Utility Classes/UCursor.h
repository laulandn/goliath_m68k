// ===========================================================================//	UCursor.h			  		PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub#ifndef _H_UCursor#define _H_UCursor#pragma once#include <PP_Prefix.h>#include <Quickdraw.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------class UCursor {public:	static	void		SetTheCursor(ResIDT inCursID);	static	void		SetArrow();	static	void		SetIBeam()		{ SetTheCursor(iBeamCursor); }	static	void		SetCross()		{ SetTheCursor(crossCursor); }	static	void		SetPlus()		{ SetTheCursor(plusCursor); }	static	void		SetWatch()		{ SetTheCursor(watchCursor); }	static	void		InitTheCursor();	static	ResIDT		GetCurrentID()	{ return sCurrentID; }	static	void		SetCurrentID(const ResIDT inCurrentID)							{								sCurrentID = inCurrentID;							}	static	bool		InAnimatedCursor()	{ return sInAnimatedCursor; }	static	void		SetInAnimatedCursor(bool inInAnimated)							{								sInAnimatedCursor = inInAnimated;							}protected:	static	ResIDT		sCurrentID;	static	bool		sInAnimatedCursor;};// ===========================================================================class StCursor {public:						StCursor(								ResIDT		inCursID = watchCursor,								bool		inRestoreOriginal = true);	virtual				~StCursor();protected:	ResIDT			mRestoreID;private:						StCursor(const StCursor &inOriginal);		StCursor&		operator = (const StCursor &inOriginal);};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif /* _H_UCursor */
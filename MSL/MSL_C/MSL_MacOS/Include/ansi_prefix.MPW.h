/*  Metrowerks Standard Library  *//*  $Date: 2000/03/23 19:12:04 $  *  $Revision: 1.5.8.3 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//* *	ansi_prefix.MPW.h *	 */#define __MSL_C9X__#ifndef __ansi_prefix__#define __ansi_prefix__#define __BUILDING_MPW__	1#include <os_enum.h>#define _POSIX#define 	__dest_os		__mac_os#ifndef _MSL_IMP_EXP    		/* cc  03152000 */  	#define _MSL_IMP_EXP #endif /*961221 bkoz long long only supported on mac CW11 tools*/#if __option(longlong) || (__MOTO__ >= 30903)#  define __MSL_LONGLONG_SUPPORT__							#endif/* #define _MSL_MALLOC_0_RETURNS_NON_NULL *//* #define _MSL_PRO4_MALLOC *//* Turn on and off namespace std here */#if defined(__cplusplus) && __embedded_cplusplus == 0    #define _MSL_USING_NAMESPACE	/* Turn on support for wchar_t as a built in type */	/* #pragma wchar_type on */   /*  vss  not implemented yet  */#endif/* hh 980217 	__ANSI_OVERLOAD__ controls whether or not the prototypes in the C++ standard	section 26.5 get added to <cmath> and <math.h> or not.  If __ANSI_OVERLOAD__	is defined, and a C++ compiler is used, then these functions are available,	otherwise not.		There is one exception to the above rule:  double abs(double); is available	in <cmath> and <math.h> if the C++ compiler is used.  __ANSI_OVERLOAD__ has	no effect on the availability of this one function.	There is no need to recompile the C or C++ libs when this switch is flipped.*//* hh 990201 turned on */#define __ANSI_OVERLOAD__  /*961223 bkoz to use with debug new*//*#define DEBUG_NEW	2#include <DebugNew.h>#define new NEW*//* 961001 	bkoz (via jon watte)			if using MacHeaders make sure to uncomment below, then include MacHeaders.c to solve 			"fill" name conflict. Note ANSI Strict/ANSI Keywords must be off too.*//*#define		OLDROUTINENAMES 	0#define 	OLDROUTINELOCATIONS 0#include 	<MacHeaders.c>*/#endif/*hh  000302  Moved the namespace flag to here from mslGlobals.hcc  000315	added _MSL_IMP_EXP*/
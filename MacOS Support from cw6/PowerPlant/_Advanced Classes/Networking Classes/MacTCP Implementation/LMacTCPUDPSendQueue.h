// ===========================================================================//	LMacTCPUDPSendQueue.h		PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================#ifndef _H_LMacTCPUDPSendQueue#define _H_LMacTCPUDPSendQueue#pragma once#include <LInterruptSafeList.h>#include <LMacTCPUDPEndpoint.h>#include <LSendQueue.h>#include <LThread.h>#include <UMacTCPSupport.h>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlantclass StMacTCPUDPSendOperation;class LMacTCPUDPSendData;// ===========================================================================#pragma mark === LMacTCPUDPSendQueue ===class LMacTCPUDPSendQueue :	public LSendQueue{public:							LMacTCPUDPSendQueue(LMacTCPUDPEndpoint * inEndpoint);							~LMacTCPUDPSendQueue();protected:	virtual void			NotifyRelease(LSendData* inData);	virtual void			Int_InternalSend();	wdsEntry				mWDS[2];	LMacTCPUDPEndpoint	*	mMacTCPUDPEndpoint;	StMacTCPUDPSendOperation *	mOperation;	friend class LMacTCPUDPEndpoint;	friend class StMacTCPUDPSendOperation;};// ===========================================================================#pragma mark -#pragma mark === StMacTCPUDPSendOperation ===class StMacTCPUDPSendOperation : public StMacTCPUDPOperation{public:							StMacTCPUDPSendOperation(										LMacTCPUDPSendQueue * inSendQueue,										StreamPtr	inStreamPtr);							~StMacTCPUDPSendOperation();	virtual void			SetStream(StreamPtr	inStreamPtr);	virtual void			Int_AsyncResume(OSStatus	inResult);	virtual void			AbortOperation();	virtual void 			Int_AsyncRun();protected:	LMacTCPUDPSendQueue *		mMacTCPSendQueue;	friend class LMacTCPUDPSendQueue;};// ===========================================================================#pragma mark -#pragma mark === LMacTCPUDPSendData ===class LMacTCPUDPSendData : public LSendData{public:							LMacTCPUDPSendData(								void*					inData,								UInt32					inDataSize,								LInternetAddress&		inRemoteHost)								: LSendData(inData, inDataSize)							{								mRemoteHost.SetIPAddress(inRemoteHost.GetIPAddress());								mRemoteHost.SetHostPort(inRemoteHost.GetHostPort());							}							~LMacTCPUDPSendData() { }	LInternetAddress		mRemoteHost;};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
// ===========================================================================//	LHeaderField.h				PowerPlant 2.1		©1996-1999 Metrowerks Inc.// ===========================================================================#ifndef _H_LHeaderField#define _H_LHeaderField#pragma once#include <LDynamicBuffer.h>#include <string>#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlant#define kFieldMsgID			"Message-Id"#define kFieldDate			"Date"#define kFieldTo			"To"#define kFieldCC			"CC"#define kFieldBCC			"BCC"#define kFieldFrom			"From"#define kFieldSubject		"Subject"#define kFieldStatus		"Status"#define kFieldAllow			"Allow"#define kFieldAuthorization	"Authorization"#define kFieldContentLength	"Content-Length"#define kFieldContentEnc	"Content-Encoding"#define kFieldDate			"Date"#define kFieldExpires		"Expires"#define kFieldModSinceDate	"If-Modified-Since"#define kFieldLastModDate	"Last-Modified"#define kFieldLocation		"Location"#define kFieldPragma		"Pragma"#define kFieldReferer		"Referer"#define kFieldServer		"Server"#define kFieldUserAgent		"User-Agent"#define kFieldWWWAuth		"WWW-Authenticate"#define kFoldIndent "\r\n     " //CRLF + 5 Spaces... arbitrary#define kFieldOverHead	4 //colon, space, CR, LF#define kFieldFoldStart 60	//Start looking to fold the field body at this char positionclass	LHeaderField {public:					LHeaderField();					LHeaderField(const char * inTitle, const char * inBody);					LHeaderField(const char * inField);		 			~LHeaderField();	void			InitMembers();	const char *	GetTitle();	const char *	GetBody();	void			SetTitle(const char * inTitle);	void			SetTitle(const char * inTitle, UInt32 inLength);	void			SetBody(const char * inBody);	void			SetBody(const char * inBody, UInt32 inLength);	void			GetField(PP_STD::string& outField);	void			SetField(const char * inField);	UInt32			FieldLength();protected:	void			UnfoldBody();	void			Fold(const char * inField, PP_STD::string& outField);	PP_STD::string	mTitle;	PP_STD::string	mBody;};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif
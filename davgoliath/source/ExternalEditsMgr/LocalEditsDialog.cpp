/* ================================================================================================== * LocalEditsDialog.cpp															    *    Goliath - a Finder like application that implements WebDAV *    Copyright (C) 1999-2002  Thomas Bednarz * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com * =========================================================================== */#include "LocalEditsDialog.h"#ifndef __ExternalEditContext_h__#include "ExternalEditContext.h"#endif#ifndef __ExternalEditorManager_h__#include "ExternalEditorManager.h"#endif#ifndef __AppLauncher_h__#include "AppLauncher.h"#endif #include "CStringDisplayTable.h"#include "CDAVHeadingTable.h"#include "CDAVContext.h"#include <LPushButton.h>const int kSTRListID = 1007;const int kSrvrColumnName = 1;const int kResourceColumnName = 2;const int kLastModColumnName = 3;const int kRemoveConfirmStrSingle = 4;const int kRemoveConfirmStrMultiple = 5;// ---------------------------------------------------------------------------------//		¥ LocalEditsDialog// ---------------------------------------------------------------------------------//	LocalEditsDialog::LocalEditsDialog(LStream* inStream) :	LDialogBox(inStream) ,	mTable(NULL),	mRemoveButton(NULL),	mReveal(NULL){}// ---------------------------------------------------------------------------------//		¥ ~LocalEditsDialog// ---------------------------------------------------------------------------------//	LocalEditsDialog::~LocalEditsDialog() {}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	void LocalEditsDialog::FinishCreateSelf() {    mTable = dynamic_cast<CStringDisplayTable*>(FindPaneByID('flvt'));    Assert_(mTable != nil);	if (!mTable)		return;			CDAVHeadingTable *heading = reinterpret_cast<CDAVHeadingTable*>(FindPaneByID( 'dhdr' ));   	mRemoveButton = dynamic_cast<LPushButton*>(FindPaneByID('SEDT'));    mReveal = dynamic_cast<LPushButton*>(FindPaneByID('RFND'));    	std::map<MessageT, int> colMsgMap;	colMsgMap['COL1'] = 1;	colMsgMap['COL2'] = 2;	colMsgMap['COL3'] = 3;    mTable->Setup(NULL, heading, colMsgMap);    heading->InsertCols(1, 0, nil, nil, false);	heading->SetColumnHeading( 1, LStr255(kSTRListID, kSrvrColumnName), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(90,  1,  1);	heading->SetColumnListener(1, mTable);	    heading->InsertCols(1, 1, nil, nil, false);	heading->SetColumnHeading( 2, LStr255(kSTRListID, kResourceColumnName), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(180,  2,  2);	heading->SetColumnListener(2, mTable);    heading->InsertCols(1 , 2, nil, nil, false);	heading->SetColumnHeading( 3, LStr255(kSTRListID, kLastModColumnName), kControlBevelButtonAlignTextCenter, 0);	heading->SetColWidth(170,  3,  3);	heading->SetColumnListener(3, mTable);		ExternalEditorManager *editMgr = ExternalEditorManager::GetExternalEditsMgr();	std::list<ExternalEditContext*> fileList;	editMgr->GetAllEditedItems(fileList);	for (std::list<ExternalEditContext*>::iterator iter = fileList.begin(); iter != fileList.end(); ++iter) {	   	std::vector<std::string> items;		items.push_back((*iter)->GetContext()->GetServerName());		items.push_back((*iter)->GetURL());				FSSpec theSpec = *((*iter)->GetFSSpec());		UInt32 secs =  ExternalEditContext::GetFSSpecModDate(theSpec);   		Str255 datePString;		std::string dateStr;	  	::DateString(secs, shortDate, datePString, nil);		dateStr.append((const char*)&datePString[1], datePString[0]);		dateStr.append(" ");		TimeString(secs, true, datePString, nil);		dateStr.append((const char*)&datePString[1], datePString[0]);		items.push_back(dateStr);				mTable->AddListItem(items, *iter);	}}// ---------------------------------------------------------------------------------//		¥ PromptForRemoval// ---------------------------------------------------------------------------------//	bool LocalEditsDialog::PromptForRemoval(bool inSingle) {	AlertStdAlertParamRec param;	param.movable 		= false;	param.filterProc 	= nil;	param.defaultText 	= "\pOk";	param.cancelText 	= "\pCancel";	param.otherText 	= nil;	param.helpButton 	= false;	param.defaultButton = kAlertStdAlertOKButton;	param.cancelButton 	= kAlertStdAlertCancelButton;	param.position 		= 0;	SInt16			itemHit;			LStr255 desc;	if (inSingle)		desc.Assign(kSTRListID, kRemoveConfirmStrSingle);	else		desc.Assign(kSTRListID, kRemoveConfirmStrMultiple);	OSErr err=StandardAlert( kAlertCautionAlert, desc, "\p"/*nil*/, &param, &itemHit );   	if ((noErr != err) || (itemHit ==2))         return false;	return true;}// ---------------------------------------------------------------------------------//		¥ RemoveSelectedFiles// ---------------------------------------------------------------------------------//	void LocalEditsDialog::RemoveSelectedFiles(){	STableCell		cell;	UInt32			numRows,numCols;		std::vector<LOutlineItem*> items;	mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {		   LOutlineItem* theItem = mTable->FindItemForRow(cell.row);		   if (NULL != theItem) 		      items.push_back(theItem);   		}	}	if (!PromptForRemoval(items.size() == 1))		return;	ExternalEditorManager *editMgr = ExternalEditorManager::GetExternalEditsMgr();		for (std::vector<LOutlineItem*>::iterator iter = items.begin(); iter != items.end(); ++iter) {		LOutlineItem *theItem = *iter;		ExternalEditContext* editCtx = reinterpret_cast<ExternalEditContext*>(mTable->GetUserDataForItem(*iter));		editMgr->StopEditingItem(editCtx->GetContext()->GetServerName(), editCtx->GetURL());		mTable->RemoveItem(theItem);	}}// ---------------------------------------------------------------------------------//		¥ RemoveSelectedFiles// ---------------------------------------------------------------------------------//	void LocalEditsDialog::RevealFilesInFinder() {			STableCell		cell;	UInt32			numRows,numCols;		std::vector<LOutlineItem*> items;	mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {		   LOutlineItem* theItem = mTable->FindItemForRow(cell.row);		   if (NULL != theItem) 		      items.push_back(theItem);   		}	}	ExternalEditorManager *editMgr = ExternalEditorManager::GetExternalEditsMgr();		for (std::vector<LOutlineItem*>::iterator iter = items.begin(); iter != items.end(); ++iter) {		LOutlineItem *theItem = *iter;		ExternalEditContext* editCtx = reinterpret_cast<ExternalEditContext*>(mTable->GetUserDataForItem(*iter));		AppLauncher::RevealFileInFinder(editCtx->GetFSSpec());	}}// ---------------------------------------------------------------------------------//		¥ EnableControls// ---------------------------------------------------------------------------------//	void LocalEditsDialog::EnableControls() {	STableCell		cell;	UInt32			numRows,numCols;		mTable->GetTableSize(numRows,numCols);	bool atLeastOneIsSelected = false;	for (cell.row=1; cell.row<=numRows; cell.row++) {		if (mTable->CellIsSelected(cell)) {			atLeastOneIsSelected = true;			break;   		}	}	if (atLeastOneIsSelected) {		mRemoveButton->Enable();		mReveal->Enable();	} else { 		mRemoveButton->Disable();		mReveal->Disable();	}}// ---------------------------------------------------------------------------------//		¥ DoDialogLoop// ---------------------------------------------------------------------------------//	void LocalEditsDialog::DoDialogLoop() {	PP_PowerPlant::StDialogHandler dialog(1417, GetApplicationInstance());	LocalEditsDialog* dlog = dynamic_cast<LocalEditsDialog*>(dialog.GetDialog());	Assert_(dlog != nil);		dlog->Show();		while (true) {		dlog->EnableControls();		PP_PowerPlant::MessageT hitMessage = dialog.DoDialog();		if (hitMessage == PP_PowerPlant::msg_Cancel)			break;		else if (hitMessage == PP_PowerPlant::msg_OK) {			break;		} else if (hitMessage == 'SEDT') {			dlog->RemoveSelectedFiles();		} else if (hitMessage == 'RFND') {			dlog->RevealFilesInFinder();		}	}}
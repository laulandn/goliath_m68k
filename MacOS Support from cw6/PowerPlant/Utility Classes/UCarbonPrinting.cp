// ===========================================================================//	UCarbonPrinting.cp			PowerPlant 2.1		©1999-2000 Metrowerks Inc.// ===========================================================================////	Implementation of UPrinting module using Carbon non-Session Print APIs////	This implementation works with all versions of CarbonLib#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <UPrinting.h>#if PP_Target_Classic		// You must use UClassicPrinting for Classic targets.		// Remove this file from Classic targets.	#error "Classic target does not support UCarbonPrinting"#elif PM_USE_SESSION_APIS		// You must turn off the Toolbox flag PM_USE_SESSION_APIS		// to use UCarbonPrinting.			#error "Turn off the PM_USE_SESSION_APIS flag to use UCarbonPrinting"#endifPP_Begin_Namespace_PowerPlant// ===========================================================================//	LPrintSpec Class// ===========================================================================//	Wrapper class for Toolbox print information data structures://		THPrint			- Classic printing info//		PMPageFormat	- Info from Print Dialog [Carbon]//		PMPrintSettings	- Info from Page Setup [Carbon]// ---------------------------------------------------------------------------//	Local constantsconst PMPrintSession	printSession_Open	= (PMPrintSession) (-1);const PMPrintSession	printSession_Closed	= nil;// ---------------------------------------------------------------------------//	¥ LPrintSpec							Default Constructor		  [public]// ---------------------------------------------------------------------------LPrintSpec::LPrintSpec(){	mPageFormat		= nil;	mPrintSettings	= nil;	mPrintSession	= printSession_Closed;}// ---------------------------------------------------------------------------//	¥ ~LPrintSpec							Destructor				  [public]// ---------------------------------------------------------------------------LPrintSpec::~LPrintSpec(){}// ---------------------------------------------------------------------------//	¥ BeginSession// ---------------------------------------------------------------------------//	Start a print session////	When a session is open, LPrintSpec members have the following state:////		mPrintSession		printSession_Open//		mPageFormat			Validated Reference//		mPrintSettings		Validated Reference//		mFlatPageFormat		nil Handle//		mFlatPrintSettings	nil Handle//		mPrintRecordH		Initially nil, but will be allocated if//								GetPrintRecord() is called during the sessionvoidLPrintSpec::BeginSession(	PMPrintSession	/* inSession */){	SignalIf_( IsInSession() );		// Session already open	OSStatus	status;			// The goal here is to obtain valid PageFormat and PrintSettings		// objects. There are 4 possibilities, which we consider in order:		//		//		(1) Object already exists. Just validate it.		//		(2) Flattened version exists. Unflatten and validate.		//		(3) Convert a Classic PrintRecord		//		(4) Create a new one with default values		//		// Note that we  use a Classic PrintRecord only if both the PageFormat		// and PrintSettings are not present.		if ((mPageFormat == nil) && mFlatPageFormat.IsValid()) {									// Restore PageFormat from flattened data		status = ::PMUnflattenPageFormat(mFlatPageFormat, &mPageFormat);	}		mFlatPageFormat.Adopt(nil);		// Clear flattened data. PageFormat may									//   change and we don't want stale data.		if (mPageFormat != nil) {		// Validate PageFormat. This will validate									//   a PageFormat created in a previous									//   session, or one created above from									//   flattened data.		status = ::PMValidatePageFormat(mPageFormat, nil);	}		if ((mPrintSettings == nil) && mFlatPrintSettings.IsValid()) {									// Restore PrintSettings from flattened data		status = ::PMUnflattenPrintSettings(mFlatPrintSettings, &mPrintSettings);	}		mFlatPrintSettings.Adopt(nil);	// Clear flattened data		if (mPrintSettings != nil) {	// Validate PrintSettings		status = ::PMValidatePrintSettings(mPrintSettings, nil);	}		if ( (mPageFormat == nil) &&		 (mPrintSettings == nil) &&		 mPrintRecordH.IsValid() ) {		 							// Both PageFormat and PrintSettings are		 							//   undefined. Create them from a saved		 							//   Classic PrintRecord.		status = ::PMConvertOldPrintRecord(									mPrintRecordH,									&mPrintSettings,									&mPageFormat );	}		mPrintRecordH.Adopt(nil);		// Clear saved PrintRecord		if (mPageFormat == nil) {		// After checking all saved data, we									//   still don't have a PageFormat.									//   Create and new one with default									//   values.		status = ::PMNewPageFormat(&mPageFormat);				SignalIf_( status != noErr );				status = ::PMDefaultPageFormat(mPageFormat);				SignalIf_( status != noErr );	}		if (mPrintSettings == nil) {	// Similarly, create a new PrintSettings									//   with default values		status = ::PMNewPrintSettings(&mPrintSettings);		status = ::PMDefaultPrintSettings(mPrintSettings);	}		mPrintSession = printSession_Open;}// ---------------------------------------------------------------------------//	¥ EndSession// ---------------------------------------------------------------------------//	End a print session////	After a session ends, the LPrintSpec members have the following state:////		mPrintSession		printSession_Closed//		mPageFormat			nil//		mPrintSettings		nil//		mFlatPageFormat		Handle with saved PageFormat data//		mFlatPrintSettings	Handle with saved PrintSettings data//		mPrintRecordH		Handle with converted Format and Settings datavoidLPrintSpec::EndSession(){	SignalIfNot_( IsInSession() );		// Session should be open		mPrintSession = printSession_Closed;	OSStatus	status;	if ( (mPrintSettings != nil)  &&	// Save PrintRecord using current		 (mPageFormat != nil) ) {		//   PageFormat and PrintSettings		 		 Handle		printRecH = nil;		status = ::PMMakeOldPrintRecord(mPrintSettings, mPageFormat, &printRecH);				mPrintRecordH.Adopt(printRecH);	}										// Save flattened PageFormat	Handle	flatFormatH   = nil;	if (mPageFormat != nil) {		::PMFlattenPageFormat(mPageFormat, &flatFormatH);		::PMDisposePageFormat(mPageFormat);		mPageFormat = nil;	}	mFlatPageFormat.Adopt(flatFormatH);										// Save flattened PrintSettings	Handle	flatSettingsH = nil;	if (mPrintSettings != nil) {		::PMFlattenPrintSettings(mPrintSettings, &flatSettingsH);		::PMDisposePrintSettings(mPrintSettings);		mPrintSettings = nil;	}	mFlatPrintSettings.Adopt(flatSettingsH);}// ---------------------------------------------------------------------------//	¥ IsInSession													  [public]// ---------------------------------------------------------------------------boolLPrintSpec::IsInSession() const{	return (mPrintSession == printSession_Open);}// ---------------------------------------------------------------------------//	¥ GetError														  [public]// ---------------------------------------------------------------------------OSStatusLPrintSpec::GetError() const{	OSStatus	status = kPMNoError;		if (IsInSession()) {		status = ::PMError();	}		return status;}// ---------------------------------------------------------------------------//	¥ GetPrintRecord												  [public]// ---------------------------------------------------------------------------//	Return classic Print Record Handle////	Handle will be nil if printing isn't in progress, and no previous//	printing operation occurred.////	Treat the Handle as read-only. Do NOT dispose it.THPrintLPrintSpec::GetPrintRecord(){	if ( (mPrintSettings != nil) && (mPageFormat != nil) ) {		Handle	printRecH = nil;		ThrowIfOSStatus_( ::PMMakeOldPrintRecord(mPrintSettings, mPageFormat,													&printRecH) );		mPrintRecordH.Adopt(printRecH);	}	return (THPrint) mPrintRecordH.Get();}// ---------------------------------------------------------------------------//	¥ SetPrintRecord												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetPrintRecord(	THPrint		inPrintRecordH){	SignalIf_( IsInSession() );			// Error: Session is open	mPrintRecordH.Adopt((Handle) inPrintRecordH);}// ---------------------------------------------------------------------------//	¥ GetPageFormat													  [public]// ---------------------------------------------------------------------------PMPageFormatLPrintSpec::GetPageFormat() const{	return mPageFormat;}// ---------------------------------------------------------------------------//	¥ GetPageFlatFormat												  [public]// ---------------------------------------------------------------------------//	Return Handle with saved PageFormat data////	Handle will be nil if printing is in progress or if no print session//	has ever successfully started and ended.////	Do NOT dispose the Handle.HandleLPrintSpec::GetFlatPageFormat() const{	return mFlatPageFormat.Get();}// ---------------------------------------------------------------------------//	¥ SetFlatPageFormat												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetFlatPageFormat(	Handle	inFlatPageFormat){	SignalIf_( mPageFormat != nil );	// Error: Session is open	mFlatPageFormat.Adopt(inFlatPageFormat);}// ---------------------------------------------------------------------------//	¥ GetPrintSettings												  [public]// ---------------------------------------------------------------------------PMPrintSettingsLPrintSpec::GetPrintSettings() const{	return mPrintSettings;}// ---------------------------------------------------------------------------//	¥ GetFlatPrintSettings											  [public]// ---------------------------------------------------------------------------//	Return Handle with saved PrintSettings data////	Handle will be nil if printing is in progress or if no print session//	has ever successfully started and ended.////	Do NOT dispose the Handle.HandleLPrintSpec::GetFlatPrintSettings() const{	return mFlatPrintSettings.Get();}// ---------------------------------------------------------------------------//	¥ SetFlatPrintSettings											  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetFlatPrintSettings(	Handle	inFlatPrintSettings){	SignalIf_( mPrintSettings != nil );	// Error: Session is open	mFlatPrintSettings.Adopt(inFlatPrintSettings);}// ---------------------------------------------------------------------------//	¥ GetPrintJobParams												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPrintJobParams(	UInt32&		outFirstPage,	UInt32&		outLastPage,	UInt32&		outNumCopies){	SignalIfNot_( IsInSession() );		// Print Session must be open	if (mPrintSettings != nil) {		::PMGetFirstPage(mPrintSettings, &outFirstPage);		::PMGetLastPage (mPrintSettings, &outLastPage);		::PMGetCopies   (mPrintSettings, &outNumCopies);	}}// ---------------------------------------------------------------------------//	¥ SetPrintJobParams												  [public]// ---------------------------------------------------------------------------voidLPrintSpec::SetPrintJobParams(	UInt32		inFirstPage,	UInt32		inLastPage,	UInt32		inNumCopies){	SignalIfNot_( IsInSession() );		// Print Session must be open	if (mPrintSettings != nil) {		::PMSetFirstPage(mPrintSettings, inFirstPage, false);		::PMSetLastPage (mPrintSettings, inLastPage, false);		::PMSetCopies   (mPrintSettings, inNumCopies, false);	}}// ---------------------------------------------------------------------------//	¥ GetPaperRect													  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPaperRect(	Rect&	outPaperRect){		// Carbon 1.0 has a function called PMGetPhysicalPaperSize().		// But tests showed that calling it with CarbonLib 1.0.4 returns		// kPMNotImplemented (-30873). So, to get the paper rectangle,		// we make a Classic PrintRecord and read the proper field.	THPrint		printRecH = GetPrintRecord();		if (printRecH != nil) {		outPaperRect = (**printRecH).rPaper;	} else {		outPaperRect = Rect_0000;	}}// ---------------------------------------------------------------------------//	¥ GetPageRect													  [public]// ---------------------------------------------------------------------------voidLPrintSpec::GetPageRect(	Rect&	outPageRect){		// Carbon 1.0 has a function called PMGetPhysicalPageSize().		// But tests showed that calling it with CarbonLib 1.0.4 returns		// kPMNotImplemented (-30873). So, to get the paper rectangle,		// we make a Classic PrintRecord and read the proper field.	THPrint		printRecH = GetPrintRecord();	if (printRecH != nil) {		outPageRect = (**printRecH).prInfo.rPage;	} else {		outPageRect = Rect_0000;	}}#pragma mark -// ===========================================================================//	StPrintContext Class// ===========================================================================////	Constructor opens printing for a document//	Destructor closes printing for a document////	A Print Session must be open before using any functions of this class.// ---------------------------------------------------------------------------//	¥ StPrintContext						Constructor// ---------------------------------------------------------------------------StPrintContext::StPrintContext(	LPrintSpec&		ioPrintSpec){								// Print Session must be open	SignalIfNot_( ioPrintSpec.IsInSession() );	OSStatus	status = ::PMBeginDocument( ioPrintSpec.GetPrintSettings(),											ioPrintSpec.GetPageFormat(),					  						&mPrintContext);	ThrowIfOSStatus_(status);}// ---------------------------------------------------------------------------//	¥ ~StPrintContext						Destructor// ---------------------------------------------------------------------------StPrintContext::~StPrintContext(){	::PMEndDocument(mPrintContext);}// ---------------------------------------------------------------------------//	¥ GetGrafPtr// ---------------------------------------------------------------------------//	Return GrafPtr being used for printing////	Note: The GrafPtr is valid only while printing a page. That is, after//	BeginPage() is called and before EndPage() is called.GrafPtrStPrintContext::GetGrafPtr() const{	GrafPtr		printerPort = nil;	OSStatus	status = ::PMGetGrafPtr(mPrintContext, &printerPort);		// Signal here instead of throwing. If there's an error, it's		// most likely programmer error (haven't called BeginPage() yet)		// rather than a printing or memory problem.	SignalIf_( status != noErr );	return printerPort;}// ---------------------------------------------------------------------------//	¥ BeginPage// ---------------------------------------------------------------------------//	Begin printing a new page////	Each BeginPage() call must be balanced by a following EndPage() callvoidStPrintContext::BeginPage(){	OSStatus	status = ::PMBeginPage(mPrintContext, nil);	ThrowIfOSStatus_(status);}// ---------------------------------------------------------------------------//	¥ EndPage// ---------------------------------------------------------------------------//	End printing a new page////	Each EndPage() call must be balanced by a preceding BeginPage() callvoidStPrintContext::EndPage(){	::PMEndPage(mPrintContext);}#pragma mark -// ===========================================================================//	StPrintSession Class// ===========================================================================////	Constructor begins a print session//	Destructor ends a print sessionStPrintSession::StPrintSession(	LPrintSpec&		inPrintSpec)	: mPrintSpec(inPrintSpec){	OSStatus	status = ::PMBegin();	ThrowIfOSStatus_(status);	mPrintSpec.BeginSession(nil);}StPrintSession::~StPrintSession(){	mPrintSpec.EndSession();	::PMEnd();}#pragma mark -// ===========================================================================//	UPrinting Class// ===========================================================================// ---------------------------------------------------------------------------//	Class VariablesLPrintSpec	UPrinting::sAppPrintSpec;// ---------------------------------------------------------------------------//	¥ AskPageSetup// ---------------------------------------------------------------------------//	Display the standard Page Setup dialog.////	If the user OK's the settings, the ioPrintSpec is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintSpec is unchanged and this function returns false.////	You must open a Print Session before calling this function.boolUPrinting::AskPageSetup(	LPrintSpec&	ioPrintSpec){	SignalIfNot_( ioPrintSpec.IsInSession() );	Boolean	setUpOK = false;	::PMPageSetupDialog(ioPrintSpec.GetPageFormat(), &setUpOK);	return setUpOK;}// ---------------------------------------------------------------------------//	¥ AskPrintJob// ---------------------------------------------------------------------------//	Display the standard Print Job Dialog.////	If the user OK's the job, the ioPrintSpec is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintSpec is unchanged and this function returns false.////	You must open a Print Session before calling this function.boolUPrinting::AskPrintJob(	LPrintSpec&	ioPrintSpec){	SignalIfNot_( ioPrintSpec.IsInSession() );	Boolean		printOK = false;	::PMPrintDialog( ioPrintSpec.GetPrintSettings(),					 ioPrintSpec.GetPageFormat(),					 &printOK);	return printOK;}PP_End_Namespace_PowerPlant
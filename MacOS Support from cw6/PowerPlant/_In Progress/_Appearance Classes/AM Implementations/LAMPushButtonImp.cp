// ===========================================================================//	LAMPushButtonImp.cp			PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================#ifdef PowerPlant_PCH	#include PowerPlant_PCH#endif#include <LAMPushButtonImp.h>#include <UAppearance.h>#include <UDrawingState.h>#include <URegions.h>#include <UTBAccessors.h>PP_Begin_Namespace_PowerPlant// ---------------------------------------------------------------------------//	¥ LAMPushButtonImp					Stream/Default Constructor	  [public]// ---------------------------------------------------------------------------//	Do not access inStream. It may be nil. Read Stream data in Init()LAMPushButtonImp::LAMPushButtonImp(	LStream*	inStream)	: LAMControlImp(inStream){	mRingOffsets = Rect_0000;}// ---------------------------------------------------------------------------//	¥ ~LAMPushButtonImp						Destructor				  [public]// ---------------------------------------------------------------------------LAMPushButtonImp::~LAMPushButtonImp(){}// ---------------------------------------------------------------------------//	¥ SetDataTag													  [public]// ---------------------------------------------------------------------------voidLAMPushButtonImp::SetDataTag(	SInt16			inPartCode,	FourCharCode	inTag,	Size			inDataSize,	void*			inDataPtr){	Boolean		wasDefault;	GetDataTag(0, kControlPushButtonDefaultTag, sizeof(Boolean), &wasDefault);	LAMControlImp::SetDataTag(inPartCode, inTag, inDataSize, inDataPtr);	if (inTag == kControlPushButtonDefaultTag) {		Boolean makeDefault = *(Boolean *) inDataPtr;		if (makeDefault != wasDefault) {				// We want the frame to be the same size as the				// button's structure region, which may be larger				// than the control rectangle			Rect	frame;			CalcLocalFrameRect(frame);			StRegion	rgn;			UAppearance::GetControlRegion(	mMacControlH,											kControlStructureMetaPart,											rgn);			Rect	bounds = rgn.Bounds();			if ((bounds.right - bounds.left) <= 0) {					// GetControlRegion() not implemented, so we					// must be running Platinum Theme, where the					// focus ring is 3 pixels thick.				bounds = frame;				if (makeDefault) {					::MacInsetRect(&bounds, -3, -3);				} else {					::MacInsetRect(&bounds, 3, 3);				}			}				// Store how much the default ring is offset from				// each side of the button. Offsets are all zero if				// there is no ring.			mRingOffsets = Rect_0000;			if (makeDefault) {				mRingOffsets.left   = (SInt16) (bounds.left   - frame.left);				mRingOffsets.top    = (SInt16) (bounds.top    - frame.top);				mRingOffsets.right  = (SInt16) (bounds.right  - frame.right);				mRingOffsets.bottom = (SInt16) (bounds.bottom - frame.bottom);			}			mControlPane->MoveBy(	(SInt16) (bounds.left - frame.left),									(SInt16) (bounds.top  - frame.top),									Refresh_Yes);			mControlPane->ResizeFrameTo(									(SInt16) (bounds.right  - bounds.left),									(SInt16) (bounds.bottom - bounds.top),									Refresh_Yes);		}	}}// ---------------------------------------------------------------------------//	¥ AdjustControlBounds										   [protected]// ---------------------------------------------------------------------------voidLAMPushButtonImp::AdjustControlBounds(	Rect&	ioBounds){		// Control rect encloses just the button and not the default		// ring, so we need to adjust the frame by the thickness of		// the ring on each side.	ioBounds.left   -= mRingOffsets.left;	ioBounds.top    -= mRingOffsets.top;	ioBounds.right  -= mRingOffsets.right;	ioBounds.bottom -= mRingOffsets.bottom;}PP_End_Namespace_PowerPlant
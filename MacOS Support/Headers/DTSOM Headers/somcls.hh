/************************************************************Created: Tuesday, September 5, 1995 at 9:30:04 AM    somcls.hh	    C++ Interface to SOM        © Apple Computer, Inc. 1995-1996        All rights reserved************************************************************/#ifndef	__SOMCLS__#define	__SOMCLS__#ifndef	__SOMOBJ__#include <somobj.hh>#endif#if __SOM_ENABLED__class SOMClass : public virtual SOMObject {public:		virtual	void *somNew ();	// Uses somAllocate to allocate storage for a new instance of the	// receiving class, and then calls somRenewNoInitNoZero to load the 	// new object's method table pointer. Then somInit is called to	// initialize the new object.  Upon failure, NULL is returned.		virtual	boolean somMakeDynamicClassReference ();	// Converts a class reference into a dynamic class reference.	// If the reference was already dynamic then this just returns true.	// If the reference was a static class reference, then this	// converts the reference to a dynamic reference and returns	// true on success.	// See the SOM for Macintosh notes for further information about	// static and dynamic class references.		virtual	long somGetInstancePartSize ();	// The size in bytes of the instance data introduced by the receiving	// class.		virtual	long somGetInstanceSize ();	// The total size of an instance of the receiving class.		virtual	const char *somGetName ();	// This object's class name as a NULL terminated string.		virtual	somDToken somGetInstanceToken ();	// A data token that identifies the introduced portion of this class	// within itself or any derived class.  This token can be subsequently	// passed to the run-time somDataResolve function to locate the instance	// data introduced by this class in any object derived from this class.			//############   [Dynamic Interface]   ############	// These methods are useful to clients with dynamic interfaces.		virtual	long somGetNumMethods ();	// The number of methods currently supported by this class,	// including inherited methods (both static and dynamic).		virtual	long somGetNumStaticMethods ();	// The number of static methods that this class has.  Can	// be used by a child class when initializing its method table.		virtual	boolean somGetMethodData (IN somId methodId, 					   OUT somMethodData *md);	// Sets the fields in the method descriptor block, <md>, to	// information about the method.  1 (true) is returned if the method is	// supported by this object and 0 (false) otherwise. The id field in	// the method descriptor block will also be set to NULL.			virtual	somKernelId somGetMethodDescriptor(IN somId methodId);	// Returns the method descriptor for the indicated method.	If	// this object does not support the indicated method then NULL is	// returned.		virtual	somMToken somGetMethodToken(IN somId methodId);	// Returns the specified method's access token. This token can then	// be passed to method resolution routines, which use the token	// to select a method pointer from a method table.		virtual	void somAddDynamicMethod(IN somId methodId, 						   IN somId methodDescriptor, 						   IN somMethodPtr method, 						   IN somMethodPtr applyStub = 0);	// Adds the indicated method to the class's name lookup list.	// If this happens to override a static method then this operation is	// equivalent to <somOverrideSMethod> and the <methodDescriptor> and	// <applyStub> arguments are ignored (the overridden method's values	// will be used).	// <methodDescriptor> is the somId of a string describing the calling	// sequence to this method as described in <somcGetNthMethodInfo>	// defined in the SOMObject class definition.	// <method> is the actual method procedure for this method	// <applyStub> is ignored		virtual	long somGetMethodIndex(IN somId id);	// Returns the index for the specified method. (A number that may	// change if any methods are added or deleted to this class object or	// any of its ancestors).  This number is the basis for other calls to	// get info about the method. Indices start at 0. A -1 is returned if	// the method cannot be found.		virtual	boolean somGetNthMethodData(IN long n, OUT somMethodData *md);		// loads *md with the method data associated with the the nth method,	// or NULL if there is no such method. Returns true is successful;	// false otherwise.		virtual	somKernelId somGetNthMethodInfo(IN long n, OUT somKernelId *descriptor);	// Returns the id of the <n>th method if one exists and NULL	// otherwise.	//	// The ordering of the methods is unpredictable, but will not change	// unless some change is made to the class or one of its ancestor classes.	//	// See CORBA documentation for info on method descriptors.	// parameter may be null.		virtual	boolean somFindMethod(IN somId methodId, 						OUT somMethodPtr *m);	// Finds the method procedure associated with <methodId> for this	// class and sets <m> to it.  1 (true) is returned when the	// method procedure is a static method and 0 (false) is returned	// when the method procedure is dynamic method.	//	// If the class does not support the specified method then	// <m> is set to NULL and the return value is meaningless.	//		virtual	boolean somFindMethodOk(IN somId methodId, 						  OUT somMethodPtr *m);	// Just like <somFindMethod> except that if the method is not	// supported then an error is raised and execution is halted.		virtual	somMethodPtr somFindSMethod(IN somId methodId);	// Finds the indicated method, which must be a static method supported	// by this class, and returns a pointer to its method procedure.	// If the method is not supported by the receiver (as a static method 	// or at all) then a NULL pointer is returned.		virtual	somMethodPtr somFindSMethodOk(IN somId methodId);	// Uses <somFindSMethod>, and raises an error if the result is NULL.		virtual	somMethodPtr somLookupMethod(IN somId methodId);	// Like <somFindSMethodOK>, but without restriction to static methods.	// Still raises an error if the result is NULL.			//########### [Testing] #############		virtual	void somGetVersionNumbers (OUT long *majorVersion, OUT long *minorVersion);	// Returns the class' major and minor version numbers in the corresponding	// output parameters.		virtual	boolean somCheckVersion(IN long majorVersion, IN long minorVersion);		// Returns 1 (true) if the implementation of this class is	// compatible with the specified major and minor version number and	// false (0) otherwise.  An implementation is compatible with the	// specified version numbers if it has the same major version number	// and a minor version number that is equal to or greater than	// <minorVersion>.	The major, minor version number pair (0,0) is	// considered to match any version.  This method is usually called	// immediately after creating the class object to verify that a	// dynamically loaded class definition is compatible with a using	// application.		virtual	boolean somDescendedFrom(IN SOMClass *aClassObj);		// Returns 1 (true) if <self> is a descendent class of <aClassObj> and	// 0 (false) otherwise.  Note: a class object is considered to be	// descended itself for the purposes of this method.		virtual	boolean somSupportsMethod(IN somId mId);		// Returns 1 (true) if the indicated method is supported by this	// class and 0 (false) otherwise.		protected:		virtual	void *somAllocate(IN long size);	// Allocates memory to hold an object and returns a pointer to this memory.	// This is a non-overridable method. The default implementation calls	// SOMMalloc, but a class designer can specify a different implementation	// using the somallocate modifier in IDL. The allocator takes the same	// parameters as this method.		virtual	void somDeallocate(IN void *memptr);	// Zeros out the method table pointer stored in the word pointed to by	// memptr, and then deallocates the block of memory pointed to by memptr.	// This is a non-overridable method. The default deallocator called is	// SOMFree, but a class designer can specify a 	// different deallocator using the somdeallocate modifier in IDL. The	// deallocator takes the same parameters as this method.#pragma SOMReleaseOrder (somNew,somRenew,somClassReady,								\			somGetName,somDescendedFrom,somCheckVersion,somFindMethod,				\			somFindMethodOk,somSupportsMethod,somGetNumMethods, 					\			somGetInstanceSize,somGetInstancePartSize,somGetMethodIndex,			\			somGetNumStaticMethods,somAddDynamicMethod,somFindSMethod,				\			somFindSMethodOk,somGetMethodDescriptor,somGetNthMethodInfo,			\			somNewNoInit,somRenewNoInit,somGetInstanceToken,somGetMethodData, 		\			somGetMethodToken,somGetParents,somGetVersionNumbers,somLookupMethod,	\			somRenewNoZero,somRenewNoInitNoZero,somAllocate,somDeallocate,			\			somGetNthMethodData,somMakeDynamicClassReference)#pragma SOMClassVersion (SOMClass, 70, 1)#pragma SOMCallStyle OIDL};	#endif /* __SOM_ENABLED__ */#endif /* __SOMCLS__ */
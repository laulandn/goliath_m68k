/*  Metrowerks Standard Library  *//*  $Date: 2000/06/09 19:24:14 $  *  $Revision: 1.11.4.3 $  *  $NoKeywords: $  * *		Portions Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. *//** **  functional **/#ifndef _FUNCTIONAL#define _FUNCTIONAL#include <mslconfig>#include <msl_utility>#ifndef RC_INVOKED#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#if _MSL_FORCE_ENUMS_ALWAYS_INT		#pragma enumsalwaysint on	#else		#pragma enumsalwaysint off	#endif#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT		#pragma bool on	#else		#pragma bool off	#endif#endif#ifndef _MSL_NO_CPP_NAMESPACE	namespace std {#endif//  lib.base, base:template <class Arg, class Result>struct unary_function{	typedef Arg    argument_type;	typedef Result result_type;};template <class Arg1, class Arg2, class Result>struct binary_function{	typedef Arg1   first_argument_type;	typedef Arg2   second_argument_type;	typedef Result result_type;};//  lib.arithmetic.operations, arithmetic operations:// plustemplate <class T>struct plus	: binary_function<T, T, T>{	T operator()(const T& x, const T& y) const;};template <class T>inlineTplus<T>::operator()(const T& x, const T& y) const{	return x + y;}// minustemplate <class T>struct minus	: binary_function<T, T, T>{	T operator()(const T& x, const T& y) const;};template <class T>inlineTminus<T>::operator()(const T& x, const T& y) const{	return x - y;}// multipliestemplate <class T>struct multiplies	: binary_function<T, T, T>{	T operator()(const T& x, const T& y) const;};template <class T>inlineTmultiplies<T>::operator()(const T& x, const T& y) const{	return x * y;}// dividestemplate <class T>struct divides	: binary_function<T, T, T>{	T operator()(const T& x, const T& y) const;};template <class T>inlineTdivides<T>::operator()(const T& x, const T& y) const{	return x / y;}// modulustemplate <class T>struct modulus	: binary_function<T, T, T>{	T operator()(const T& x, const T& y) const;};template <class T>inlineTmodulus<T>::operator()(const T& x, const T& y) const{	return x % y;}// negatetemplate <class T>struct negate	: unary_function<T, T>{	T operator()(const T& x) const;};template <class T>inlineTnegate<T>::operator()(const T& x) const{	return -x;}//  lib.comparisons, comparisons:// equal_totemplate <class T>struct equal_to	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolequal_to<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x == y);}// not_equal_totemplate <class T>struct not_equal_to	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolnot_equal_to<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x != y);}// greatertemplate <class T>struct greater	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolgreater<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x > y);}// lesstemplate <class T>struct less	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolless<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x < y);}// greater_equaltemplate <class T>struct greater_equal	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolgreater_equal<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x >= y);}// less_equaltemplate <class T>struct less_equal	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboolless_equal<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x <= y);}//  lib.logical.operations, logical operations:// logical_andtemplate <class T>struct logical_and	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboollogical_and<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x && y);}// logical_ortemplate <class T>struct logical_or	: binary_function<T, T, bool>{	bool operator()(const T& x, const T& y) const;};template <class T>inlineboollogical_or<T>::operator()(const T& x, const T& y) const{	return static_cast<bool>(x || y);}// logical_nottemplate <class T>struct logical_not	: unary_function<T, bool>{	bool operator()(const T& x) const;};template <class T>inlineboollogical_not<T>::operator()(const T& x) const{	return static_cast<bool>(!x);}//  lib.negators, negators:// unary_negatetemplate <class Predicate>class unary_negate	: public unary_function<typename Predicate::argument_type, bool>{public:	explicit unary_negate(const Predicate& pred);	bool operator()(const typename Predicate::argument_type& x) const;private:	Predicate pred_;};template <class Predicate>inlineunary_negate<Predicate>::unary_negate(const Predicate& pred)	: pred_(pred){}template <class Predicate>inlineboolunary_negate<Predicate>::operator()(const typename Predicate::argument_type& x) const{	return static_cast<bool>(!pred_(x));}template <class Predicate>inlineunary_negate<Predicate>not1(const Predicate& pred){	return unary_negate<Predicate>(pred);}// binary_negatetemplate <class Predicate>class binary_negate	: public binary_function<typename Predicate::first_argument_type,	                         typename Predicate::second_argument_type, bool>{public:	explicit binary_negate(const Predicate& pred);	bool operator()(const typename Predicate::first_argument_type&  x,	                const typename Predicate::second_argument_type& y) const;private:	Predicate pred_;};template <class Predicate>inlinebinary_negate<Predicate>::binary_negate(const Predicate& pred)	: pred_(pred){}template <class Predicate>inlineboolbinary_negate<Predicate>::operator()(const typename Predicate::first_argument_type&  x,                                     const typename Predicate::second_argument_type& y) const{	return static_cast<bool>(!pred_(x, y));}template <class Predicate>inlinebinary_negate<Predicate>not2(const Predicate& pred){	return binary_negate<Predicate>(pred);}//  lib.binders, binders:// binder1st#ifdef _MSL_EXTENDED_BINDERStemplate <class Operation, class T = Metrowerks::remove_reference<Operation>::type::first_argument_type>class binder1st	: public unary_function<typename Metrowerks::remove_reference<Operation>::type::second_argument_type,	                        typename Metrowerks::remove_reference<Operation>::type::result_type>{	typedef typename unary_function<		typename Metrowerks::remove_reference<Operation>::type::second_argument_type,		typename Metrowerks::remove_reference<Operation>::type::result_type> base;public:	typedef Operation operation_type;	typedef T first_argument_type;	typedef typename base::argument_type argument_type;	typedef typename base::result_type result_type;	binder1st(typename Metrowerks::call_traits<Operation>::param_type x,	          typename Metrowerks::call_traits<T>::param_type y)		: op(x), value(y) {}	result_type		operator()(typename Metrowerks::call_traits<argument_type>::const_reference x) const		{return op(value, x);}	result_type		operator()(typename Metrowerks::call_traits<argument_type>::reference x)		{return op(value, x);}protected:	operation_type op;	first_argument_type value;};#else  // _MSL_EXTENDED_BINDERStemplate <class Operation>class binder1st	: public unary_function<typename Operation::second_argument_type,	                        typename Operation::result_type>{public:	binder1st(const Operation& x, const typename Operation::first_argument_type& y);	typename Operation::result_type		operator()(const typename Operation::second_argument_type& x) const;	typename Operation::result_type  // experimental		operator()(typename Operation::second_argument_type& x) const;protected:	Operation op;	typename Operation::first_argument_type value;};template <class Operation>inlinebinder1st<Operation>::binder1st(const Operation& x,                                const typename Operation::first_argument_type& y)	: op(x),	  value(y){}template <class Operation>inlinetypename Operation::result_typebinder1st<Operation>::operator()(const typename Operation::second_argument_type& x) const{	return op(value, x);}// experimentaltemplate <class Operation>inlinetypename Operation::result_typebinder1st<Operation>::operator()(typename Operation::second_argument_type& x) const{	return op(value, x);}#endif  // _MSL_EXTENDED_BINDERS#if !defined(__MWERKS__) || (defined(__MWERKS__) && __MWERKS__ >= 0x2400)	template <class Operation, class T>	inline	binder1st<Operation>	bind1st(const Operation& op, const T& x)	{		return binder1st<Operation>(op, typename Operation::first_argument_type(x));	}#else	template <class Operation, class T>	inline	binder1st<Operation>	bind1st(const Operation& op, const T& x)	{		return binder1st<Operation>(op, Operation::first_argument_type(x));	}#endif// __binder1st_const_reftemplate <class Operation>class __binder1st_const_ref	: public unary_function<typename Operation::second_argument_type,	                        typename Operation::result_type>{public:	__binder1st_const_ref(const Operation& x, const typename Operation::first_argument_type& y);	typename Operation::result_type		operator()(const typename Operation::second_argument_type& x) const;protected:	Operation op;	const typename Operation::first_argument_type* value;};template <class Operation>inline__binder1st_const_ref<Operation>::__binder1st_const_ref(const Operation& x,                                const typename Operation::first_argument_type& y)	: op(x),	  value(&y){}template <class Operation>inlinetypename Operation::result_type__binder1st_const_ref<Operation>::operator()(const typename Operation::second_argument_type& x) const{	return op(*value, x);}// binder2nd#ifdef _MSL_EXTENDED_BINDERStemplate <class Operation, class T = Metrowerks::remove_reference<Operation>::type::second_argument_type>class binder2nd	: public unary_function<typename Metrowerks::remove_reference<Operation>::type::first_argument_type,	                        typename Metrowerks::remove_reference<Operation>::type::result_type>{	typedef typename unary_function<		typename Metrowerks::remove_reference<Operation>::type::first_argument_type,		typename Metrowerks::remove_reference<Operation>::type::result_type> base;public:	typedef Operation operation_type;	typedef T second_argument_type;	typedef typename base::argument_type argument_type;	typedef typename base::result_type result_type;	binder2nd(typename Metrowerks::call_traits<Operation>::param_type x,	          typename Metrowerks::call_traits<T>::param_type y)		: op(x), value(y) {}	result_type		operator()(typename Metrowerks::call_traits<argument_type>::const_reference x) const		{return op(x, value);}	result_type		operator()(typename Metrowerks::call_traits<argument_type>::reference x)		{return op(x, value);}protected:	operation_type op;	second_argument_type value;};#else // _MSL_EXTENDED_BINDERStemplate <class Operation>class binder2nd	: public unary_function<typename Operation::first_argument_type,	                        typename Operation::result_type>{public:	binder2nd(const Operation& x, const typename Operation::second_argument_type& y);	typename Operation::result_type		operator()(const typename Operation::first_argument_type& x) const;	typename Operation::result_type  // experimental		operator()(typename Operation::first_argument_type& x) const;protected:	Operation op;	typename Operation::second_argument_type value;};template <class Operation>inlinebinder2nd<Operation>::binder2nd(const Operation& x,                                const typename Operation::second_argument_type& y)	: op(x),	  value(y){}template <class Operation>inlinetypename Operation::result_typebinder2nd<Operation>::operator()(const typename Operation::first_argument_type& x) const{	return op(x, value);}// experimentaltemplate <class Operation>inlinetypename Operation::result_typebinder2nd<Operation>::operator()(typename Operation::first_argument_type& x) const{	return op(x, value);}#endif  // _MSL_EXTENDED_BINDERS#if !defined(__MWERKS__) || (defined(__MWERKS__) && __MWERKS__ >= 0x2400)	template <class Operation, class T>	inline	binder2nd<Operation>	bind2nd(const Operation& op, const T& x)	{		return binder2nd<Operation>(op, typename Operation::second_argument_type(x));	}#else	template <class Operation, class T>	inline	binder2nd<Operation>	bind2nd(const Operation& op, const T& x)	{		return binder2nd<Operation>(op, Operation::second_argument_type(x));	}#endif// __binder2nd_const_reftemplate <class Operation>class __binder2nd_const_ref	: public unary_function<typename Operation::first_argument_type,	                        typename Operation::result_type>{public:	__binder2nd_const_ref(const Operation& x, const typename Operation::second_argument_type& y);	typename Operation::result_type		operator()(const typename Operation::first_argument_type& x) const;protected:	Operation op;	const typename Operation::second_argument_type* value;};template <class Operation>inline__binder2nd_const_ref<Operation>::__binder2nd_const_ref(const Operation& x,                                const typename Operation::second_argument_type& y)	: op(x),	  value(&y){}template <class Operation>inlinetypename Operation::result_type__binder2nd_const_ref<Operation>::operator()(const typename Operation::first_argument_type& x) const{	return op(x, *value);}//  lib.function.pointer.adaptors, adaptors:// pointer_to_unary_functiontemplate <class Arg, class Result>class pointer_to_unary_function	: public unary_function<Arg, Result>{public:	explicit pointer_to_unary_function(Result (*f)(Arg));	Result operator()(Arg x) const;private:	Result (*f_)(Arg);};template <class Arg, class Result>inlinepointer_to_unary_function<Arg, Result>::pointer_to_unary_function(Result (*f)(Arg))	: f_(f){}template <class Arg, class Result>inlineResultpointer_to_unary_function<Arg, Result>::operator()(Arg x) const{	return f_(x);}template <class Arg, class Result>inlinepointer_to_unary_function<Arg, Result>ptr_fun(Result (*f)(Arg)){	return pointer_to_unary_function<Arg, Result>(f);}// pointer_to_unary_function_with_const_argstemplate <class Arg, class Result>class pointer_to_unary_function_with_const_args	: public unary_function<Arg, Result>{public:	explicit pointer_to_unary_function_with_const_args(Result (*f)(const Arg&));	Result operator()(const Arg& x) const;private:	Result (*f_)(const Arg&);};template <class Arg, class Result>inlinepointer_to_unary_function_with_const_args<Arg, Result>::pointer_to_unary_function_with_const_args(Result (*f)(const Arg&))	: f_(f){}template <class Arg, class Result>inlineResultpointer_to_unary_function_with_const_args<Arg, Result>::operator()(const Arg& x) const{	return f_(x);}template <class Arg, class Result>inlinepointer_to_unary_function_with_const_args<Arg, Result>ptr_fun(Result (*f)(const Arg&)){	return pointer_to_unary_function_with_const_args<Arg, Result>(f);}// pointer_to_binary_functiontemplate <class Arg1, class Arg2, class Result>class pointer_to_binary_function	: public binary_function<Arg1, Arg2, Result>{public:	explicit pointer_to_binary_function(Result (*f)(Arg1, Arg2));	Result operator()(Arg1 x, Arg2 y) const;private:	Result (*f_)(Arg1, Arg2);};template <class Arg1, class Arg2, class Result>inlinepointer_to_binary_function<Arg1, Arg2, Result>::pointer_to_binary_function(Result (*f)(Arg1, Arg2))	: f_(f){}template <class Arg1, class Arg2, class Result>inlineResultpointer_to_binary_function<Arg1, Arg2, Result>::operator()(Arg1 x, Arg2 y) const{	return f_(x, y);}template <class Arg1, class Arg2, class Result>inlinepointer_to_binary_function<Arg1, Arg2, Result>ptr_fun(Result (*f)(Arg1, Arg2)){	return pointer_to_binary_function<Arg1, Arg2, Result>(f);}// pointer_to_binary_function_with_const_argstemplate <class Arg1, class Arg2, class Result>class pointer_to_binary_function_with_const_args	: public binary_function<Arg1, Arg2, Result>{public:	explicit pointer_to_binary_function_with_const_args(Result (*f)(const Arg1&, const Arg2&));	Result operator()(const Arg1&, const Arg2&) const;private:	Result (*f_)(const Arg1& x, const Arg2& y);};template <class Arg1, class Arg2, class Result>inlinepointer_to_binary_function_with_const_args<Arg1, Arg2, Result>::pointer_to_binary_function_with_const_args(Result (*f)(const Arg1&, const Arg2&))	: f_(f){}template <class Arg1, class Arg2, class Result>inlineResultpointer_to_binary_function_with_const_args<Arg1, Arg2, Result>::operator()(const Arg1& x, const Arg2& y) const{	return f_(x, y);}template <class Arg1, class Arg2, class Result>inlinepointer_to_binary_function_with_const_args<Arg1, Arg2, Result>ptr_fun(Result (*f)(const Arg1&, const Arg2&)){	return pointer_to_binary_function_with_const_args<Arg1, Arg2, Result>(f);}//  lib.member.pointer.adaptors, adaptors:// mem_fun_ttemplate <class S, class T>class mem_fun_t	: public unary_function<T*, S>{public:	explicit mem_fun_t(S (T::*mf)());	S operator()(T* p) const;private:	S (T::*mf_)();};template <class S, class T>inlinemem_fun_t<S, T>::mem_fun_t(S (T::*mf)())	: mf_(mf){}template <class S, class T>inlineSmem_fun_t<S, T>::operator()(T* p) const{	return (p->*mf_)();}// mem_fun1_ttemplate <class S, class T, class A>class mem_fun1_t	: public binary_function<T*, A, S>{public:	explicit mem_fun1_t(S (T::*mf)(A));	S operator()(T* p, A x) const;private:	S (T::*mf_)(A);};template <class S, class T, class A>inlinemem_fun1_t<S, T, A>::mem_fun1_t(S (T::*mf)(A))	: mf_(mf){}template <class S, class T, class A>inlineSmem_fun1_t<S, T, A>::operator()(T* p, A x) const{	return (p->*mf_)(x);}// mem_funtemplate<class S, class T>inlinemem_fun_t<S, T>mem_fun(S (T::*f)()){	return mem_fun_t<S, T>(f);}template<class S, class T, class A>inlinemem_fun1_t<S, T, A>mem_fun(S (T::*f)(A)){	return mem_fun1_t<S, T, A>(f);}// mem_fun_ref_ttemplate <class S, class T>class mem_fun_ref_t	: public unary_function<T, S>{public:	explicit mem_fun_ref_t(S (T::*mf)());	S operator()(T& p) const;private:	S (T::*mf_)();};template <class S, class T>inlinemem_fun_ref_t<S, T>::mem_fun_ref_t(S (T::*mf)())	: mf_(mf){}template <class S, class T>inlineSmem_fun_ref_t<S, T>::operator()(T& p) const{	return (p.*mf_)();}// mem_fun1_ref_ttemplate <class S, class T, class A>class mem_fun1_ref_t	: public binary_function<T, A, S>{public:	explicit mem_fun1_ref_t(S (T::*mf)(A));	S operator()(T& p, A x) const;private:	S (T::*mf_)(A);};template <class S, class T, class A>inlinemem_fun1_ref_t<S, T, A>::mem_fun1_ref_t(S (T::*mf)(A))	: mf_(mf){}template <class S, class T, class A>inlineSmem_fun1_ref_t<S, T, A>::operator()(T& p, A x) const{	return (p.*mf_)(x);}// mem_fun_reftemplate<class S, class T>inlinemem_fun_ref_t<S, T>mem_fun_ref(S (T::*f)()){	return mem_fun_ref_t<S, T>(f);}template<class S, class T, class A>inlinemem_fun1_ref_t<S, T, A>mem_fun_ref(S (T::*f)(A)){	return mem_fun1_ref_t<S, T, A>(f);}#if !defined(__MWERKS__) || (defined(__MWERKS__) && __MWERKS__ >= 0x2400)	// const_mem_fun_t	template <class S, class T>	class const_mem_fun_t		: public unary_function<T*, S>	{	public:		explicit const_mem_fun_t(S (T::*mf)() const);		S operator()(const T* p) const;	private:		S (T::*mf_)() const;	};	template <class S, class T>	inline	const_mem_fun_t<S, T>::const_mem_fun_t(S (T::*mf)() const)		: mf_(mf)	{	}	template <class S, class T>	inline	S	const_mem_fun_t<S, T>::operator()(const T* p) const	{		return (p->*mf_)();	}	// const_mem_fun1_t	template <class S, class T, class A>	class const_mem_fun1_t		: public binary_function<T*, A, S>	{	public:		explicit const_mem_fun1_t(S (T::*mf)(A) const);		S operator()(const T* p, A x) const;	private:		S (T::*mf_)(A) const;	};	template <class S, class T, class A>	inline	const_mem_fun1_t<S, T, A>::const_mem_fun1_t(S (T::*mf)(A) const)		: mf_(mf)	{	}	template <class S, class T, class A>	inline	S	const_mem_fun1_t<S, T, A>::operator()(const T* p, A x) const	{		return (p->*mf_)(x);	}	// mem_fun	template <class S, class T>	inline	const_mem_fun_t<S, T>	mem_fun(S (T::*f)() const)	{		return const_mem_fun_t<S, T>(f);	}	template <class S, class T, class A>	inline	const_mem_fun1_t<S, T, A>	mem_fun(S (T::*f)(A) const)	{		return const_mem_fun1_t<S, T, A>(f);	}	// const_mem_fun_ref_t	template <class S, class T>	class const_mem_fun_ref_t		: public unary_function<T, S>	{	public:		explicit const_mem_fun_ref_t(S (T::*mf)() const);		S operator()(const T& p) const;	private:		S (T::*mf_)() const;	};	template <class S, class T>	inline	const_mem_fun_ref_t<S, T>::const_mem_fun_ref_t(S (T::*mf)() const)		: mf_(mf)	{	}	template <class S, class T>	inline	S	const_mem_fun_ref_t<S, T>::operator()(const T& p) const	{		return (p.*mf_)();	}	// const_mem_fun1_ref_t	template <class S, class T, class A>	class const_mem_fun1_ref_t		: public binary_function<T, A, S>	{	public:		explicit const_mem_fun1_ref_t(S (T::*mf)(A) const);		S operator()(const T& p, A x) const;	private:		S (T::*mf_)(A) const;	};	template <class S, class T, class A>	inline	const_mem_fun1_ref_t<S, T, A>::const_mem_fun1_ref_t(S (T::*mf)(A) const)		: mf_(mf)	{	}	template <class S, class T, class A>	inline	S	const_mem_fun1_ref_t<S, T, A>::operator()(const T& p, A x) const	{		return (p.*mf_)(x);	}	// mem_fun_ref	template <class S, class T>	inline	const_mem_fun_ref_t<S, T>	mem_fun_ref(S (T::*f)() const)	{		return const_mem_fun_ref_t<S, T>(f);	}	template <class S, class T, class A>	inline	const_mem_fun1_ref_t<S, T, A>	mem_fun_ref(S (T::*f)(A) const)	{		return const_mem_fun1_ref_t<S, T, A>(f);	}#endif#ifndef _MSL_NO_CPP_NAMESPACE	} // namespace std #endif#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT	#pragma enumsalwaysint reset#endif#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT	#pragma bool reset#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif // RC_INVOKED#endif // _FUNCTIONAL// hh 971221 Changed filename from functional.h to functional// hh 971221 Made include guards standard// hh 971230 added RC_INVOKED wrapper// hh 980401 rewrote all mem_fun stuff// hh 980731 added select2nd per customer request// hh 980923 Put in a few typename fixes// hh 990505 Rewrote// hh 990807 Added pointer_to_binary_function_with_const_args//           and pointer_to_unary_function_with_const_args.// hh 991015 const_mem_fun1_ref_t was missing data member// hh 991118 Added experimental operators to binder1st and binder2nd that take//           non-const args.// hh 000402 Extended functionality to binder1st and binder2nd.
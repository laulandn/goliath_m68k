/*  Metrowerks Standard Library  *//*  $Date: 2000/05/04 20:27:28 $  *  $Revision: 1.10.12.9 $  *  $NoKeywords: $  * *		Copyright © 1995-1999 Metrowerks, Inc. *		All rights reserved. */ /* *	cwctype */ #ifndef __cwctype#define __cwctype#ifndef __NO_WIDE_CHAR				/* mm 981020 */#include <ansi_parms.h>#include <eof.h>				/* vss 980817 */#include <wchar_t.h>#include <wctrans.h>			/* mm 000412 *//* #include <cstdio>        */	/* vss 980817 */ /* mm 970918*//*#include <cstddef>*/			/* mm 990217 */ /* #include <wchar.h> */#ifndef RC_INVOKED#pragma options align=native#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import on#endif#ifdef __cplusplus		extern "C" {#endif#ifndef WEOF#define WEOF (wint_t)(0xFFFF)#endif /* ifndef WEOF */extern _MSL_IMP_EXP_C wchar_t	__wctype_map[];extern _MSL_IMP_EXP_C wchar_t	__wlower_map[];extern _MSL_IMP_EXP_C wchar_t	__wupper_map[];#ifdef __cplusplus       /* hh  971206 */	}#endif#define __wcontrol_char		0x01#define __wmotion_char		0x02#define __wspace_char		0x04#define __wpunctuation		0x08#define __wdigit			0x10#define __whex_digit		0x20#define __wlower_case		0x40#define __wupper_case		0x80#define __wletter				(__wlower_case   | __wupper_case  )#define __walphanumeric			(__wletter       | __wdigit       )#define __wgraphic				(__walphanumeric | __wpunctuation )#define __wprintable			(__wgraphic      | __wspace_char  )#define __wwhitespace			(__wmotion_char  | __wspace_char  )#define __wcontrol       		(__wmotion_char  | __wcontrol_char)#define __wz_fill(c)	((wchar_t) (wchar_t) (c))#define __WCMAP_SIZE    256#ifdef __cplusplus       /* hh  971206 */	//extern "C" {	#ifdef _MSL_USING_NAMESPACE		namespace std {	#endif#endif/*_MSL_IMP_EXP_C int iswalnum (wint_t);_MSL_IMP_EXP_C int iswalpha (wint_t);_MSL_IMP_EXP_C int iswcntrl (wint_t);_MSL_IMP_EXP_C int iswdigit (wint_t);_MSL_IMP_EXP_C int iswgraph (wint_t);_MSL_IMP_EXP_C int iswlower (wint_t);_MSL_IMP_EXP_C int iswprint (wint_t);_MSL_IMP_EXP_C int iswpunct (wint_t);_MSL_IMP_EXP_C int iswspace (wint_t);_MSL_IMP_EXP_C int iswupper (wint_t);_MSL_IMP_EXP_C int iswxdigit(wint_t);_MSL_IMP_EXP_C wchar_t towlower (wint_t);_MSL_IMP_EXP_C wchar_t towupper (wint_t);*/_MSL_IMP_EXP_C wctype_t wctype(const char *property);				_MSL_IMP_EXP_C int iswctype(wint_t wc, wctype_t desc);			/* begin mm 980626 */__inline int iswalnum(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __walphanumeric) : 0); }__inline int iswalpha(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wletter) : 0); }__inline int iswcntrl(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wcontrol) : 0); }__inline int iswdigit(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wdigit) : 0); }__inline int iswgraph(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wgraphic) : 0); }__inline int iswlower(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wlower_case) : 0); }__inline int iswprint(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wprintable) : 0); }__inline int iswpunct(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wpunctuation) : 0); }__inline int iswspace(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wwhitespace) : 0); }__inline int iswupper(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __wupper_case) : 0); }__inline int iswxdigit(wint_t c)	{return((c < __WCMAP_SIZE) ? (__wctype_map[__wz_fill(c)] & __whex_digit) : 0); }/* begin mm 970918*/__inline wint_t towlower(wint_t c){return((c >= __WCMAP_SIZE) ? c:((wint_t)  __wlower_map[__wz_fill(c)])); }  /* mm 980205 */__inline wint_t towupper(wint_t c){return((c >= __WCMAP_SIZE) ? c:((wint_t)  __wupper_map[__wz_fill(c)])); }  /* mm 980205 *//* end mm 970918*/ /*__inline int wctob(wint_t c)         { return((c & 0xFF00) ? EOF : (int)c);}  /* mm 980625 */   /* mm 000201 */#ifdef __cplusplus//}	#ifdef _MSL_USING_NAMESPACE       }	#endif#endif#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)	#pragma import reset#endif#pragma options align=reset#endif /* RC_INVOKED */#endif /*#ifndef __NO_WIDE_CHAR		*/		/* mm 981020 */#endif /* __cwctype__ *//*  Change Record *	980121 	JCM  First code release. *  rjk 980313 added _MSL_IMP_EXP_C *  mm 980625  Added declarations for wctob. *  mm 980626  Considerable rewrite of the wc classification functions, towlower and towupper to  *             match C9x *  mm 980627  Inserted missing typedefs for mbstate_t and Wint_t *  mm 980629  Added prototypes for wctype() and iswctype(). * vss 980817  Added eof.h to get EOF defined, removed <cstdio> because of circular dependency *  mm 981020  Added #ifndef __NO_WIDE_CHAR wrappers *  hh 981221  Made __inline methods extern "C++" *  mm 990217  Replaced include of cstddef with one of  wchar_t.h *  mm 990401	Moved #endif to include defines of iswalnum()... inside !__cplusplus *  mm 990807	Deleted definitions of wchar types *  mm 000201  Removed declarations for wctob to put them in cwchar in accord with C Standard. *  mm 000412  Added #include for wctrans.h*/
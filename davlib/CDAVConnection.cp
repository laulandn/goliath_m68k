/* =========================================================================== *	CDAVConnection.cpp			    * *  This file is part of the DAVLib package *  Copyright (C) 1999-2000  Thomas Bednarzфr * *    This program is free software; you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation; either version 2 of the License, or *    (at your option) any later version. * *    This program is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with this program; if not, write to the Free Software Foundation, *    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. * *  For questions, suggestions, bug-reports, enhancement-requests etc. *  I may be contacted at: * *  tombednarz@hotmail.com */ // WebDAV HTTP Connection#include "CDAVConnection.h"#include <LInternetAddress.h>#include <UInternet.h>#include <LString.h>#include <cstdio>// ===========================================================================////	 Portions of this class are derived from the PowerPlant class //	 LHTTPConnection, which does a great job at handling HTTP requests.//// ===========================================================================const char* CDAVConnection::kHTTPOptions			   = "OPTIONS";const char* CDAVConnection::kDAVPropFind			   = "PROPFIND";const char* CDAVConnection::kDAVMkcol				   = "MKCOL";const char* CDAVConnection::kDAVDelete				   = "DELETE";const char* CDAVConnection::kDAVCopy				   = "COPY";const char* CDAVConnection::kDAVMove				   = "MOVE";const char* CDAVConnection::kDAVPropPatch			   = "PROPPATCH";const char* CDAVConnection::kDAVLock				   = "LOCK";const char* CDAVConnection::kDAVUnlock				   = "UNLOCK";const char* CDAVConnection::kMSAuthorVia			   = "MS-Author-Via";const char* CDAVConnection::kDAV					   = "DAV";const char* CDAVConnection::kServer					   = "Server";const char* CDAVConnection::kAllow					   = "Allow";const SInt32 CDAVConnection::kHTTPContinue			   = 100;const SInt32 CDAVConnection::kHTTPSwitchingProtocols   = 101;const SInt32 CDAVConnection::kHTTPOK     			   = 200;const SInt32 CDAVConnection::kHTTPCreated			   = 201;const SInt32 CDAVConnection::kHTTPNoContent			   = 204;const SInt32 CDAVConnection::kHTTPResetContent		   = 205;const SInt32 CDAVConnection::kHTTPPartialContent       = 206;const SInt32 CDAVConnection::kHTTPMultiStatus		   = 207;const SInt32 CDAVConnection::kHTTPMovedPermanently     = 301;const SInt32 CDAVConnection::kHTTPFound                = 302;const SInt32 CDAVConnection::kHTTPRequestUnauthorized  = 401;const SInt32 CDAVConnection::kHTTPForbidden			   = 403;const SInt32 CDAVConnection::kHTTPNotFound			   = 404;const SInt32 CDAVConnection::kHTTPMethodNotAllowed	   = 405;const SInt32 CDAVConnection::kHTTPConfiict			   = 409;const SInt32 CDAVConnection::kHTTPPreconditionFailed   = 412;const SInt32 CDAVConnection::kUnsupportedMediaType	   = 415;const SInt32 CDAVConnection::kHTTPLocked			   = 423;const SInt32 CDAVConnection::kHTTPFailedDependancy	   = 424;const SInt32 CDAVConnection::kHTTPBadGateway		   = 502;const SInt32 CDAVConnection::kHTTPInsufficientStorage  = 507;void getChunkLength(LStream &stream, std::string &lenStr);#pragma mark еее CDAVConnection еее// ---------------------------------------------------------------------------//		е CDAVConnection()// ---------------------------------------------------------------------------//	ConstructorCDAVConnection::CDAVConnection(LThread& inThread, LTCPEndpoint *inEndPoint,											LCookieList *inOutCookies, bool inSecure)	:LHTTP11Connection(inThread, inEndPoint, inOutCookies, inSecure){}// ---------------------------------------------------------------------------//		е ~CDAVConnection// ---------------------------------------------------------------------------//	DestructorCDAVConnection::~CDAVConnection(){}// ---------------------------------------------------------------------------//		е RequestResource// ---------------------------------------------------------------------------//voidCDAVConnection::RequestResource(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		EHTTPMethod			inMethod,		SInt16				inRemotePort){	DoHTTPMethod(		inMethod,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е RequestResource// ---------------------------------------------------------------------------//voidCDAVConnection::RequestResource(		ConstStr255Param	inRemoteHost,		ConstStr255Param	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		EHTTPMethod			inMethod,		SInt16				inRemotePort){	DoHTTPMethod(		inMethod,		std::string ((char*)inRemoteHost + 1, inRemoteHost[0]),		std::string ((char*)inRequest + 1, inRequest[0]),		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Options// ---------------------------------------------------------------------------//voidCDAVConnection::Options(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kHTTPOptions,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е PropFind// ---------------------------------------------------------------------------//voidCDAVConnection::PropFind(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVPropFind,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е MkCol// ---------------------------------------------------------------------------//voidCDAVConnection::MkCol(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVMkcol,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Delete// ---------------------------------------------------------------------------//void CDAVConnection::Delete(const std::string&	inRemoteHost,							const std::string&	inRequest,							LHTTPMessage&		inMessage,							LHTTPResponse&		outResponse,							SInt16				inRemotePort) {	DoHTTPMethod(		kDAVDelete,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Copy// ---------------------------------------------------------------------------//voidCDAVConnection::Copy(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVCopy,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Move// ---------------------------------------------------------------------------//voidCDAVConnection::Move(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVMove,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е PropPatch// ---------------------------------------------------------------------------//voidCDAVConnection::PropPatch(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVPropPatch,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Lock// ---------------------------------------------------------------------------//voidCDAVConnection::Lock(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVLock,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}// ---------------------------------------------------------------------------//		е Unlock// ---------------------------------------------------------------------------//voidCDAVConnection::Unlock(		const std::string&	inRemoteHost,		const std::string&	inRequest,		LHTTPMessage&		inMessage,		LHTTPResponse&		outResponse,		SInt16				inRemotePort){	DoHTTPMethod(		kDAVUnlock,		inRemoteHost,		inRequest,		inMessage,		outResponse,		inRemotePort);}
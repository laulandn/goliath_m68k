// ===========================================================================//	UCursor.cp					PowerPlant 2.1		©1997-1999 Metrowerks Inc.// ===========================================================================//	Original Author: John C. Daub////	A set of utility classes and routines for cursor manipulation and control.////	Overlaps slightly in name/concept from the old, obsolete UCursor class.//	Do not mix these two classes (and their files). They are incompatable.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UCursor.h>#include <UDrawingState.h>#include <UDebugging.h>PP_Begin_Namespace_PowerPlantResIDT	UCursor::sCurrentID = 0;bool	UCursor::sInAnimatedCursor = false;// ---------------------------------------------------------------------------//	¥ SetTheCursor											 [static] [public]// ---------------------------------------------------------------------------//	Given the ResIDT for a 'CURS' resource, set the cursor to that. If the//	cursor is currently hidden, SetTheCursor will not make it visible. There//	is no Apple-supported/recommend way to determine cursor visibility.////	You could refer to the "develop" Q&A section from the June 1997 issue//	of MacTech Magazine for information on how to determine cursor visibility,//	but use this at your own risk.voidUCursor::SetTheCursor(	ResIDT	inCursID){		// If inCursID is zero, we'll take that to be a desire for the		// the arrow (which technically isn't zero, but we'll interpret		// it that way)	if (inCursID == 0) {		SetArrow();	} else {							// Try to load the cursor		CursHandle	theCursH = ::MacGetCursor(inCursID);		if (theCursH == nil) {			SignalStringLiteral_("Cursor not found");			SetArrow();					// Just set to the arrow cursor		} else {						// All's well. Set and go.			::MacSetCursor(*theCursH);			sCurrentID = inCursID;		}	}}// ---------------------------------------------------------------------------//	¥ SetArrow// ---------------------------------------------------------------------------voidUCursor::SetArrow(){	#if PP_Target_Carbon		Cursor	theArrow;		::MacSetCursor(UQDGlobals::GetArrow(&theArrow));	#else		::MacSetCursor(&UQDGlobals::GetQDGlobals()->arrow);	#endif	sCurrentID = 0;}// ---------------------------------------------------------------------------//	¥ InitTheCursor											 [static] [public]// ---------------------------------------------------------------------------//	Calls ::InitCursor(). But in addition, updates the stored cursor ID//	so everything stays in sync.voidUCursor::InitTheCursor(){	::InitCursor();	sCurrentID = 0;}#pragma mark -// ===========================================================================// ¥ StCursor// ===========================================================================//	A class to temporarily change the cursor to something else.// ---------------------------------------------------------------------------//	¥ StCursor								Constructor				  [public]// ---------------------------------------------------------------------------//	Upon entry, specify the ResIDT of the 'CURS' to change to. Upon exit,//	we either restore the old cursor or default to the arrow.////	By default, StCursor will set to the watch cursor, and restore the//	original cursor.StCursor::StCursor(	ResIDT		inCursID,	bool		inRestoreOriginal){	if (inRestoreOriginal) {					// Save current cursor		mRestoreID = UCursor::GetCurrentID();	} else {		mRestoreID = 0;	}	UCursor::SetTheCursor(inCursID);			// Set new cursor}// ---------------------------------------------------------------------------//	¥ ~StCursor								Destructor				  [public]// ---------------------------------------------------------------------------//	Pops back to our original cursorStCursor::~StCursor(){	UCursor::SetTheCursor(mRestoreID);}PP_End_Namespace_PowerPlant
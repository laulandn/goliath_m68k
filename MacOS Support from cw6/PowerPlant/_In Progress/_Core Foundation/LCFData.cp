// ===========================================================================//	LCFData.cp					PowerPlant 2.1			 ©2000 Metrowerks Inc.// ===========================================================================#include <LCFData.h>// ---------------------------------------------------------------------------//	¥ LCFData								Default Constructor		  [public]// ---------------------------------------------------------------------------//	Construct a mutable CFData block with the specified capacityLCFData::LCFData(	CFIndex			inCapacity,	CFAllocatorRef	inAllocator){	mMutableDataRef = ::CFDataCreateMutable(inAllocator, inCapacity);	if (mMutableDataRef == nil) {		// throw std::bad_alloc	}	SetTypeRef(mMutableDataRef);}// ---------------------------------------------------------------------------//	¥ LCFData								Constructor				  [public]// ---------------------------------------------------------------------------//	Construct an immutable CFData block with the specified dataLCFData::LCFData(	const UInt8*	inBytes,	CFIndex			inLength,	CFAllocatorRef	inAllocator){	CFDataRef	ref = ::CFDataCreate(inAllocator, inBytes, inLength);	if (ref == nil) {		// throw std::bad_alloc	}	SetTypeRef(ref);	mMutableDataRef = nil;}// ---------------------------------------------------------------------------//	¥ LCFData								Constructor				  [public]// ---------------------------------------------------------------------------//	Construct from an existing immutable DataRefLCFData::LCFData(	CFDataRef	inDataRef)	: LCFObject(inDataRef){	mMutableDataRef = nil;}// ---------------------------------------------------------------------------//	¥ LCFData								Constructor				  [public]// ---------------------------------------------------------------------------//	Construct from an existing mutable DataRefLCFData::LCFData(	CFMutableDataRef	inDataRef)	: LCFObject(inDataRef){	mMutableDataRef = inDataRef;}// ---------------------------------------------------------------------------//	¥ ~LCFData								Destructor				  [public]// ---------------------------------------------------------------------------LCFData::~LCFData(){}#pragma mark -UInt8*LCFData::GetMutableBytePtr() const{	if (mMutableDataRef != nil) {		return ::CFDataGetMutableBytePtr(mMutableDataRef);	} else {		// Error: CFData is not mutable		return nil;	}}voidLCFData::SetLength(	CFIndex	inNewLength){	if (mMutableDataRef != nil) {		::CFDataSetLength(mMutableDataRef, inNewLength);	} else {		// Error: Can't set length of an immutable CFData	}}voidLCFData::IncreaseLength(	CFIndex	inExtraLength){	if (mMutableDataRef != nil) {		::CFDataIncreaseLength(mMutableDataRef, inExtraLength);	} else {		// Error: Can't increase length of an immutable CFData	}}voidLCFData::AppendBytes(	const UInt8*	inBytes,	CFIndex			inLength){	if (mMutableDataRef != nil) {		::CFDataAppendBytes(mMutableDataRef, inBytes, inLength);	} else {		// Error: Can't append bytes to an immutable CFData	}}voidLCFData::ReplaceBytes(	CFRange			inRange,	const UInt8*	inNewBytes,	CFIndex			inNewLength){	if (mMutableDataRef != nil) {		::CFDataReplaceBytes(mMutableDataRef, inRange, inNewBytes, inNewLength);	} else {		// Error: Can't replace bytes in an immutable CFData	}}voidLCFData::DeleteBytes(	CFRange			inRange){	if (mMutableDataRef != nil) {		::CFDataDeleteBytes(mMutableDataRef, inRange);	} else {		// Error: Can't delete bytes from an immutable CFData	}}